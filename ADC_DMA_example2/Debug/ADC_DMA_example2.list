
ADC_DMA_example2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003770  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080038f8  080038f8  000048f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003930  08003930  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003930  08003930  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003930  08003930  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003930  08003930  00004930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003934  08003934  00004934  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003938  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08003944  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003944  00005148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8c4  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a26  00000000  00000000  00010900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00012328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c4  00000000  00000000  00012bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b627  00000000  00000000  000132b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bbcb  00000000  00000000  0002e8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a233f  00000000  00000000  0003a4a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dc7e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002358  00000000  00000000  000dc828  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000deb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080038e0 	.word	0x080038e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080038e0 	.word	0x080038e0

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001cc:	f000 facc 	bl	8000768 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d0:	f000 f80a 	bl	80001e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d4:	f000 f904 	bl	80003e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80001d8:	f000 f8e4 	bl	80003a4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001dc:	f000 f8b2 	bl	8000344 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80001e0:	f000 f844 	bl	800026c <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e4:	bf00      	nop
 80001e6:	e7fd      	b.n	80001e4 <main+0x1c>

080001e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b090      	sub	sp, #64	@ 0x40
 80001ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001ee:	f107 0318 	add.w	r3, r7, #24
 80001f2:	2228      	movs	r2, #40	@ 0x28
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f003 fb45 	bl	8003886 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001fc:	1d3b      	adds	r3, r7, #4
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
 8000208:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800020a:	2302      	movs	r3, #2
 800020c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800020e:	2301      	movs	r3, #1
 8000210:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000212:	2310      	movs	r3, #16
 8000214:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000216:	2302      	movs	r3, #2
 8000218:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800021a:	2300      	movs	r3, #0
 800021c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800021e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000222:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000224:	f107 0318 	add.w	r3, r7, #24
 8000228:	4618      	mov	r0, r3
 800022a:	f001 fd2f 	bl	8001c8c <HAL_RCC_OscConfig>
 800022e:	4603      	mov	r3, r0
 8000230:	2b00      	cmp	r3, #0
 8000232:	d001      	beq.n	8000238 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000234:	f000 f93c 	bl	80004b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000238:	230f      	movs	r3, #15
 800023a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800023c:	2302      	movs	r3, #2
 800023e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000244:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800024e:	1d3b      	adds	r3, r7, #4
 8000250:	2102      	movs	r1, #2
 8000252:	4618      	mov	r0, r3
 8000254:	f002 fd58 	bl	8002d08 <HAL_RCC_ClockConfig>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800025e:	f000 f927 	bl	80004b0 <Error_Handler>
  }
}
 8000262:	bf00      	nop
 8000264:	3740      	adds	r7, #64	@ 0x40
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
	...

0800026c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000272:	463b      	mov	r3, r7
 8000274:	2200      	movs	r2, #0
 8000276:	601a      	str	r2, [r3, #0]
 8000278:	605a      	str	r2, [r3, #4]
 800027a:	609a      	str	r2, [r3, #8]
 800027c:	60da      	str	r2, [r3, #12]
 800027e:	611a      	str	r2, [r3, #16]
 8000280:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000282:	4b2f      	ldr	r3, [pc, #188]	@ (8000340 <MX_ADC1_Init+0xd4>)
 8000284:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000288:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800028a:	4b2d      	ldr	r3, [pc, #180]	@ (8000340 <MX_ADC1_Init+0xd4>)
 800028c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000290:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000292:	4b2b      	ldr	r3, [pc, #172]	@ (8000340 <MX_ADC1_Init+0xd4>)
 8000294:	2200      	movs	r2, #0
 8000296:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000298:	4b29      	ldr	r3, [pc, #164]	@ (8000340 <MX_ADC1_Init+0xd4>)
 800029a:	2201      	movs	r2, #1
 800029c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800029e:	4b28      	ldr	r3, [pc, #160]	@ (8000340 <MX_ADC1_Init+0xd4>)
 80002a0:	2200      	movs	r2, #0
 80002a2:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002a4:	4b26      	ldr	r3, [pc, #152]	@ (8000340 <MX_ADC1_Init+0xd4>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80002ac:	4b24      	ldr	r3, [pc, #144]	@ (8000340 <MX_ADC1_Init+0xd4>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002b2:	4b23      	ldr	r3, [pc, #140]	@ (8000340 <MX_ADC1_Init+0xd4>)
 80002b4:	2201      	movs	r2, #1
 80002b6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002b8:	4b21      	ldr	r3, [pc, #132]	@ (8000340 <MX_ADC1_Init+0xd4>)
 80002ba:	2200      	movs	r2, #0
 80002bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80002be:	4b20      	ldr	r3, [pc, #128]	@ (8000340 <MX_ADC1_Init+0xd4>)
 80002c0:	2202      	movs	r2, #2
 80002c2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80002c4:	4b1e      	ldr	r3, [pc, #120]	@ (8000340 <MX_ADC1_Init+0xd4>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80002cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000340 <MX_ADC1_Init+0xd4>)
 80002ce:	2204      	movs	r2, #4
 80002d0:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80002d2:	4b1b      	ldr	r3, [pc, #108]	@ (8000340 <MX_ADC1_Init+0xd4>)
 80002d4:	2200      	movs	r2, #0
 80002d6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80002d8:	4b19      	ldr	r3, [pc, #100]	@ (8000340 <MX_ADC1_Init+0xd4>)
 80002da:	2200      	movs	r2, #0
 80002dc:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002de:	4818      	ldr	r0, [pc, #96]	@ (8000340 <MX_ADC1_Init+0xd4>)
 80002e0:	f000 fac6 	bl	8000870 <HAL_ADC_Init>
 80002e4:	4603      	mov	r3, r0
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d001      	beq.n	80002ee <MX_ADC1_Init+0x82>
  {
    Error_Handler();
 80002ea:	f000 f8e1 	bl	80004b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80002ee:	2301      	movs	r3, #1
 80002f0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002f2:	2301      	movs	r3, #1
 80002f4:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002f6:	2300      	movs	r3, #0
 80002f8:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_181CYCLES_5;
 80002fa:	2306      	movs	r3, #6
 80002fc:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002fe:	2300      	movs	r3, #0
 8000300:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000306:	463b      	mov	r3, r7
 8000308:	4619      	mov	r1, r3
 800030a:	480d      	ldr	r0, [pc, #52]	@ (8000340 <MX_ADC1_Init+0xd4>)
 800030c:	f000 fe00 	bl	8000f10 <HAL_ADC_ConfigChannel>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <MX_ADC1_Init+0xae>
  {
    Error_Handler();
 8000316:	f000 f8cb 	bl	80004b0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800031a:	2305      	movs	r3, #5
 800031c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800031e:	2302      	movs	r3, #2
 8000320:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000322:	463b      	mov	r3, r7
 8000324:	4619      	mov	r1, r3
 8000326:	4806      	ldr	r0, [pc, #24]	@ (8000340 <MX_ADC1_Init+0xd4>)
 8000328:	f000 fdf2 	bl	8000f10 <HAL_ADC_ConfigChannel>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d001      	beq.n	8000336 <MX_ADC1_Init+0xca>
  {
    Error_Handler();
 8000332:	f000 f8bd 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000336:	bf00      	nop
 8000338:	3718      	adds	r7, #24
 800033a:	46bd      	mov	sp, r7
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	20000028 	.word	0x20000028

08000344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000348:	4b14      	ldr	r3, [pc, #80]	@ (800039c <MX_USART2_UART_Init+0x58>)
 800034a:	4a15      	ldr	r2, [pc, #84]	@ (80003a0 <MX_USART2_UART_Init+0x5c>)
 800034c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800034e:	4b13      	ldr	r3, [pc, #76]	@ (800039c <MX_USART2_UART_Init+0x58>)
 8000350:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000356:	4b11      	ldr	r3, [pc, #68]	@ (800039c <MX_USART2_UART_Init+0x58>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800035c:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <MX_USART2_UART_Init+0x58>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <MX_USART2_UART_Init+0x58>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000368:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <MX_USART2_UART_Init+0x58>)
 800036a:	220c      	movs	r2, #12
 800036c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800036e:	4b0b      	ldr	r3, [pc, #44]	@ (800039c <MX_USART2_UART_Init+0x58>)
 8000370:	2200      	movs	r2, #0
 8000372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000374:	4b09      	ldr	r3, [pc, #36]	@ (800039c <MX_USART2_UART_Init+0x58>)
 8000376:	2200      	movs	r2, #0
 8000378:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800037a:	4b08      	ldr	r3, [pc, #32]	@ (800039c <MX_USART2_UART_Init+0x58>)
 800037c:	2200      	movs	r2, #0
 800037e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000380:	4b06      	ldr	r3, [pc, #24]	@ (800039c <MX_USART2_UART_Init+0x58>)
 8000382:	2200      	movs	r2, #0
 8000384:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000386:	4805      	ldr	r0, [pc, #20]	@ (800039c <MX_USART2_UART_Init+0x58>)
 8000388:	f002 fede 	bl	8003148 <HAL_UART_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000392:	f000 f88d 	bl	80004b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000396:	bf00      	nop
 8000398:	bd80      	pop	{r7, pc}
 800039a:	bf00      	nop
 800039c:	200000bc 	.word	0x200000bc
 80003a0:	40004400 	.word	0x40004400

080003a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b082      	sub	sp, #8
 80003a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003aa:	4b0c      	ldr	r3, [pc, #48]	@ (80003dc <MX_DMA_Init+0x38>)
 80003ac:	695b      	ldr	r3, [r3, #20]
 80003ae:	4a0b      	ldr	r2, [pc, #44]	@ (80003dc <MX_DMA_Init+0x38>)
 80003b0:	f043 0301 	orr.w	r3, r3, #1
 80003b4:	6153      	str	r3, [r2, #20]
 80003b6:	4b09      	ldr	r3, [pc, #36]	@ (80003dc <MX_DMA_Init+0x38>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	f003 0301 	and.w	r3, r3, #1
 80003be:	607b      	str	r3, [r7, #4]
 80003c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003c2:	2200      	movs	r2, #0
 80003c4:	2100      	movs	r1, #0
 80003c6:	200b      	movs	r0, #11
 80003c8:	f001 f995 	bl	80016f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003cc:	200b      	movs	r0, #11
 80003ce:	f001 f9ae 	bl	800172e <HAL_NVIC_EnableIRQ>

}
 80003d2:	bf00      	nop
 80003d4:	3708      	adds	r7, #8
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bd80      	pop	{r7, pc}
 80003da:	bf00      	nop
 80003dc:	40021000 	.word	0x40021000

080003e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	b08a      	sub	sp, #40	@ 0x28
 80003e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003e6:	f107 0314 	add.w	r3, r7, #20
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003f6:	4b2b      	ldr	r3, [pc, #172]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 80003f8:	695b      	ldr	r3, [r3, #20]
 80003fa:	4a2a      	ldr	r2, [pc, #168]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 80003fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000400:	6153      	str	r3, [r2, #20]
 8000402:	4b28      	ldr	r3, [pc, #160]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 8000404:	695b      	ldr	r3, [r3, #20]
 8000406:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800040a:	613b      	str	r3, [r7, #16]
 800040c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800040e:	4b25      	ldr	r3, [pc, #148]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	4a24      	ldr	r2, [pc, #144]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 8000414:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000418:	6153      	str	r3, [r2, #20]
 800041a:	4b22      	ldr	r3, [pc, #136]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 800041c:	695b      	ldr	r3, [r3, #20]
 800041e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000422:	60fb      	str	r3, [r7, #12]
 8000424:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000426:	4b1f      	ldr	r3, [pc, #124]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 8000428:	695b      	ldr	r3, [r3, #20]
 800042a:	4a1e      	ldr	r2, [pc, #120]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 800042c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000430:	6153      	str	r3, [r2, #20]
 8000432:	4b1c      	ldr	r3, [pc, #112]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 8000434:	695b      	ldr	r3, [r3, #20]
 8000436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800043a:	60bb      	str	r3, [r7, #8]
 800043c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800043e:	4b19      	ldr	r3, [pc, #100]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 8000440:	695b      	ldr	r3, [r3, #20]
 8000442:	4a18      	ldr	r2, [pc, #96]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 8000444:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000448:	6153      	str	r3, [r2, #20]
 800044a:	4b16      	ldr	r3, [pc, #88]	@ (80004a4 <MX_GPIO_Init+0xc4>)
 800044c:	695b      	ldr	r3, [r3, #20]
 800044e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000452:	607b      	str	r3, [r7, #4]
 8000454:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000456:	2200      	movs	r2, #0
 8000458:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800045c:	4812      	ldr	r0, [pc, #72]	@ (80004a8 <MX_GPIO_Init+0xc8>)
 800045e:	f001 fbfd 	bl	8001c5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000462:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000468:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800046c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800046e:	2300      	movs	r3, #0
 8000470:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000472:	f107 0314 	add.w	r3, r7, #20
 8000476:	4619      	mov	r1, r3
 8000478:	480c      	ldr	r0, [pc, #48]	@ (80004ac <MX_GPIO_Init+0xcc>)
 800047a:	f001 fa7d 	bl	8001978 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800047e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000482:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000484:	2301      	movs	r3, #1
 8000486:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000488:	2300      	movs	r3, #0
 800048a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800048c:	2300      	movs	r3, #0
 800048e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000490:	f107 0314 	add.w	r3, r7, #20
 8000494:	4619      	mov	r1, r3
 8000496:	4804      	ldr	r0, [pc, #16]	@ (80004a8 <MX_GPIO_Init+0xc8>)
 8000498:	f001 fa6e 	bl	8001978 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800049c:	bf00      	nop
 800049e:	3728      	adds	r7, #40	@ 0x28
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	40021000 	.word	0x40021000
 80004a8:	48000400 	.word	0x48000400
 80004ac:	48000800 	.word	0x48000800

080004b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004b4:	b672      	cpsid	i
}
 80004b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b8:	bf00      	nop
 80004ba:	e7fd      	b.n	80004b8 <Error_Handler+0x8>

080004bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000500 <HAL_MspInit+0x44>)
 80004c4:	699b      	ldr	r3, [r3, #24]
 80004c6:	4a0e      	ldr	r2, [pc, #56]	@ (8000500 <HAL_MspInit+0x44>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6193      	str	r3, [r2, #24]
 80004ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000500 <HAL_MspInit+0x44>)
 80004d0:	699b      	ldr	r3, [r3, #24]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	607b      	str	r3, [r7, #4]
 80004d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <HAL_MspInit+0x44>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a08      	ldr	r2, [pc, #32]	@ (8000500 <HAL_MspInit+0x44>)
 80004e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <HAL_MspInit+0x44>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004ee:	603b      	str	r3, [r7, #0]
 80004f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004f2:	2007      	movs	r0, #7
 80004f4:	f001 f8f4 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f8:	bf00      	nop
 80004fa:	3708      	adds	r7, #8
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	40021000 	.word	0x40021000

08000504 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000524:	d154      	bne.n	80005d0 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000526:	4b2c      	ldr	r3, [pc, #176]	@ (80005d8 <HAL_ADC_MspInit+0xd4>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	4a2b      	ldr	r2, [pc, #172]	@ (80005d8 <HAL_ADC_MspInit+0xd4>)
 800052c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000530:	6153      	str	r3, [r2, #20]
 8000532:	4b29      	ldr	r3, [pc, #164]	@ (80005d8 <HAL_ADC_MspInit+0xd4>)
 8000534:	695b      	ldr	r3, [r3, #20]
 8000536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	4b26      	ldr	r3, [pc, #152]	@ (80005d8 <HAL_ADC_MspInit+0xd4>)
 8000540:	695b      	ldr	r3, [r3, #20]
 8000542:	4a25      	ldr	r2, [pc, #148]	@ (80005d8 <HAL_ADC_MspInit+0xd4>)
 8000544:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000548:	6153      	str	r3, [r2, #20]
 800054a:	4b23      	ldr	r3, [pc, #140]	@ (80005d8 <HAL_ADC_MspInit+0xd4>)
 800054c:	695b      	ldr	r3, [r3, #20]
 800054e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000552:	60fb      	str	r3, [r7, #12]
 8000554:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4;
 8000556:	2311      	movs	r3, #17
 8000558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800055a:	2303      	movs	r3, #3
 800055c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800055e:	2300      	movs	r3, #0
 8000560:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000562:	f107 0314 	add.w	r3, r7, #20
 8000566:	4619      	mov	r1, r3
 8000568:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800056c:	f001 fa04 	bl	8001978 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000570:	4b1a      	ldr	r3, [pc, #104]	@ (80005dc <HAL_ADC_MspInit+0xd8>)
 8000572:	4a1b      	ldr	r2, [pc, #108]	@ (80005e0 <HAL_ADC_MspInit+0xdc>)
 8000574:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000576:	4b19      	ldr	r3, [pc, #100]	@ (80005dc <HAL_ADC_MspInit+0xd8>)
 8000578:	2200      	movs	r2, #0
 800057a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800057c:	4b17      	ldr	r3, [pc, #92]	@ (80005dc <HAL_ADC_MspInit+0xd8>)
 800057e:	2200      	movs	r2, #0
 8000580:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000582:	4b16      	ldr	r3, [pc, #88]	@ (80005dc <HAL_ADC_MspInit+0xd8>)
 8000584:	2280      	movs	r2, #128	@ 0x80
 8000586:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000588:	4b14      	ldr	r3, [pc, #80]	@ (80005dc <HAL_ADC_MspInit+0xd8>)
 800058a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800058e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000590:	4b12      	ldr	r3, [pc, #72]	@ (80005dc <HAL_ADC_MspInit+0xd8>)
 8000592:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000596:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000598:	4b10      	ldr	r3, [pc, #64]	@ (80005dc <HAL_ADC_MspInit+0xd8>)
 800059a:	2220      	movs	r2, #32
 800059c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <HAL_ADC_MspInit+0xd8>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005a4:	480d      	ldr	r0, [pc, #52]	@ (80005dc <HAL_ADC_MspInit+0xd8>)
 80005a6:	f001 f8dc 	bl	8001762 <HAL_DMA_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <HAL_ADC_MspInit+0xb0>
    {
      Error_Handler();
 80005b0:	f7ff ff7e 	bl	80004b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	4a09      	ldr	r2, [pc, #36]	@ (80005dc <HAL_ADC_MspInit+0xd8>)
 80005b8:	639a      	str	r2, [r3, #56]	@ 0x38
 80005ba:	4a08      	ldr	r2, [pc, #32]	@ (80005dc <HAL_ADC_MspInit+0xd8>)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	6253      	str	r3, [r2, #36]	@ 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 80005c0:	2200      	movs	r2, #0
 80005c2:	2100      	movs	r1, #0
 80005c4:	2012      	movs	r0, #18
 80005c6:	f001 f896 	bl	80016f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80005ca:	2012      	movs	r0, #18
 80005cc:	f001 f8af 	bl	800172e <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80005d0:	bf00      	nop
 80005d2:	3728      	adds	r7, #40	@ 0x28
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	40021000 	.word	0x40021000
 80005dc:	20000078 	.word	0x20000078
 80005e0:	40020008 	.word	0x40020008

080005e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b08a      	sub	sp, #40	@ 0x28
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ec:	f107 0314 	add.w	r3, r7, #20
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a17      	ldr	r2, [pc, #92]	@ (8000660 <HAL_UART_MspInit+0x7c>)
 8000602:	4293      	cmp	r3, r2
 8000604:	d128      	bne.n	8000658 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000606:	4b17      	ldr	r3, [pc, #92]	@ (8000664 <HAL_UART_MspInit+0x80>)
 8000608:	69db      	ldr	r3, [r3, #28]
 800060a:	4a16      	ldr	r2, [pc, #88]	@ (8000664 <HAL_UART_MspInit+0x80>)
 800060c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000610:	61d3      	str	r3, [r2, #28]
 8000612:	4b14      	ldr	r3, [pc, #80]	@ (8000664 <HAL_UART_MspInit+0x80>)
 8000614:	69db      	ldr	r3, [r3, #28]
 8000616:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800061a:	613b      	str	r3, [r7, #16]
 800061c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061e:	4b11      	ldr	r3, [pc, #68]	@ (8000664 <HAL_UART_MspInit+0x80>)
 8000620:	695b      	ldr	r3, [r3, #20]
 8000622:	4a10      	ldr	r2, [pc, #64]	@ (8000664 <HAL_UART_MspInit+0x80>)
 8000624:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000628:	6153      	str	r3, [r2, #20]
 800062a:	4b0e      	ldr	r3, [pc, #56]	@ (8000664 <HAL_UART_MspInit+0x80>)
 800062c:	695b      	ldr	r3, [r3, #20]
 800062e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000636:	230c      	movs	r3, #12
 8000638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000646:	2307      	movs	r3, #7
 8000648:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0314 	add.w	r3, r7, #20
 800064e:	4619      	mov	r1, r3
 8000650:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000654:	f001 f990 	bl	8001978 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000658:	bf00      	nop
 800065a:	3728      	adds	r7, #40	@ 0x28
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	40004400 	.word	0x40004400
 8000664:	40021000 	.word	0x40021000

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <NMI_Handler+0x4>

08000670 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000674:	bf00      	nop
 8000676:	e7fd      	b.n	8000674 <HardFault_Handler+0x4>

08000678 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <MemManage_Handler+0x4>

08000680 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <BusFault_Handler+0x4>

08000688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <UsageFault_Handler+0x4>

08000690 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000694:	bf00      	nop
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800069e:	b480      	push	{r7}
 80006a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006a2:	bf00      	nop
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b0:	bf00      	nop
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006be:	f000 f899 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006cc:	4802      	ldr	r0, [pc, #8]	@ (80006d8 <DMA1_Channel1_IRQHandler+0x10>)
 80006ce:	f001 f88f 	bl	80017f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000078 	.word	0x20000078

080006dc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 interrupt.
  */
void ADC1_IRQHandler(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80006e0:	4802      	ldr	r0, [pc, #8]	@ (80006ec <ADC1_IRQHandler+0x10>)
 80006e2:	f000 fa4b 	bl	8000b7c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028

080006f0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006f4:	4b06      	ldr	r3, [pc, #24]	@ (8000710 <SystemInit+0x20>)
 80006f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006fa:	4a05      	ldr	r2, [pc, #20]	@ (8000710 <SystemInit+0x20>)
 80006fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000704:	bf00      	nop
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000ed00 	.word	0xe000ed00

08000714 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800074c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000718:	f7ff ffea 	bl	80006f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800071c:	480c      	ldr	r0, [pc, #48]	@ (8000750 <LoopForever+0x6>)
  ldr r1, =_edata
 800071e:	490d      	ldr	r1, [pc, #52]	@ (8000754 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000720:	4a0d      	ldr	r2, [pc, #52]	@ (8000758 <LoopForever+0xe>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000724:	e002      	b.n	800072c <LoopCopyDataInit>

08000726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800072a:	3304      	adds	r3, #4

0800072c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800072c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800072e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000730:	d3f9      	bcc.n	8000726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000732:	4a0a      	ldr	r2, [pc, #40]	@ (800075c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000734:	4c0a      	ldr	r4, [pc, #40]	@ (8000760 <LoopForever+0x16>)
  movs r3, #0
 8000736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000738:	e001      	b.n	800073e <LoopFillZerobss>

0800073a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800073a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800073c:	3204      	adds	r2, #4

0800073e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800073e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000740:	d3fb      	bcc.n	800073a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000742:	f003 f8a9 	bl	8003898 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000746:	f7ff fd3f 	bl	80001c8 <main>

0800074a <LoopForever>:

LoopForever:
    b LoopForever
 800074a:	e7fe      	b.n	800074a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800074c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000754:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000758:	08003938 	.word	0x08003938
  ldr r2, =_sbss
 800075c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000760:	20000148 	.word	0x20000148

08000764 <CAN_RX1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000764:	e7fe      	b.n	8000764 <CAN_RX1_IRQHandler>
	...

08000768 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	@ (8000790 <HAL_Init+0x28>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	@ (8000790 <HAL_Init+0x28>)
 8000772:	f043 0310 	orr.w	r3, r3, #16
 8000776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 ffb1 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	2000      	movs	r0, #0
 8000780:	f000 f808 	bl	8000794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff fe9a 	bl	80004bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40022000 	.word	0x40022000

08000794 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_InitTick+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <HAL_InitTick+0x58>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 ffc9 	bl	800174a <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e00e      	b.n	80007e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d80a      	bhi.n	80007de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295
 80007d0:	f000 ff91 	bl	80016f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4a06      	ldr	r2, [pc, #24]	@ (80007f0 <HAL_InitTick+0x5c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b06      	ldr	r3, [pc, #24]	@ (8000814 <HAL_IncTick+0x20>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <HAL_IncTick+0x24>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a04      	ldr	r2, [pc, #16]	@ (8000818 <HAL_IncTick+0x24>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	20000008 	.word	0x20000008
 8000818:	20000144 	.word	0x20000144

0800081c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000820:	4b03      	ldr	r3, [pc, #12]	@ (8000830 <HAL_GetTick+0x14>)
 8000822:	681b      	ldr	r3, [r3, #0]
}
 8000824:	4618      	mov	r0, r3
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000144 	.word	0x20000144

08000834 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000834:	b480      	push	{r7}
 8000836:	b083      	sub	sp, #12
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr

08000848 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8000850:	bf00      	nop
 8000852:	370c      	adds	r7, #12
 8000854:	46bd      	mov	sp, r7
 8000856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085a:	4770      	bx	lr

0800085c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000864:	bf00      	nop
 8000866:	370c      	adds	r7, #12
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b09a      	sub	sp, #104	@ 0x68
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000878:	2300      	movs	r3, #0
 800087a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800087e:	2300      	movs	r3, #0
 8000880:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d101      	bne.n	8000890 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800088c:	2301      	movs	r3, #1
 800088e:	e169      	b.n	8000b64 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	691b      	ldr	r3, [r3, #16]
 8000894:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d176      	bne.n	8000990 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d152      	bne.n	8000950 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2200      	movs	r2, #0
 80008ae:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2200      	movs	r2, #0
 80008b4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	2200      	movs	r2, #0
 80008ba:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2200      	movs	r2, #0
 80008c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80008c4:	6878      	ldr	r0, [r7, #4]
 80008c6:	f7ff fe1d 	bl	8000504 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d13b      	bne.n	8000950 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80008d8:	6878      	ldr	r0, [r7, #4]
 80008da:	f000 fdcb 	bl	8001474 <ADC_Disable>
 80008de:	4603      	mov	r3, r0
 80008e0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	f003 0310 	and.w	r3, r3, #16
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d12f      	bne.n	8000950 <HAL_ADC_Init+0xe0>
 80008f0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d12b      	bne.n	8000950 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000900:	f023 0302 	bic.w	r3, r3, #2
 8000904:	f043 0202 	orr.w	r2, r3, #2
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	689a      	ldr	r2, [r3, #8]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800091a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800092a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800092c:	4b8f      	ldr	r3, [pc, #572]	@ (8000b6c <HAL_ADC_Init+0x2fc>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a8f      	ldr	r2, [pc, #572]	@ (8000b70 <HAL_ADC_Init+0x300>)
 8000932:	fba2 2303 	umull	r2, r3, r2, r3
 8000936:	0c9a      	lsrs	r2, r3, #18
 8000938:	4613      	mov	r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	4413      	add	r3, r2
 800093e:	005b      	lsls	r3, r3, #1
 8000940:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000942:	e002      	b.n	800094a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	3b01      	subs	r3, #1
 8000948:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d1f9      	bne.n	8000944 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800095a:	2b00      	cmp	r3, #0
 800095c:	d007      	beq.n	800096e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000968:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800096c:	d110      	bne.n	8000990 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	f023 0312 	bic.w	r3, r3, #18
 8000976:	f043 0210 	orr.w	r2, r3, #16
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000982:	f043 0201 	orr.w	r2, r3, #1
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000994:	f003 0310 	and.w	r3, r3, #16
 8000998:	2b00      	cmp	r3, #0
 800099a:	f040 80d6 	bne.w	8000b4a <HAL_ADC_Init+0x2da>
 800099e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f040 80d1 	bne.w	8000b4a <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	f040 80c9 	bne.w	8000b4a <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009bc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80009c0:	f043 0202 	orr.w	r2, r3, #2
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80009c8:	4b6a      	ldr	r3, [pc, #424]	@ (8000b74 <HAL_ADC_Init+0x304>)
 80009ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80009cc:	2300      	movs	r3, #0
 80009ce:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	689b      	ldr	r3, [r3, #8]
 80009d6:	f003 0303 	and.w	r3, r3, #3
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d108      	bne.n	80009f0 <HAL_ADC_Init+0x180>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f003 0301 	and.w	r3, r3, #1
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d101      	bne.n	80009f0 <HAL_ADC_Init+0x180>
 80009ec:	2301      	movs	r3, #1
 80009ee:	e000      	b.n	80009f2 <HAL_ADC_Init+0x182>
 80009f0:	2300      	movs	r3, #0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d11c      	bne.n	8000a30 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80009f6:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d010      	beq.n	8000a1e <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	689b      	ldr	r3, [r3, #8]
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	2b01      	cmp	r3, #1
 8000a06:	d107      	bne.n	8000a18 <HAL_ADC_Init+0x1a8>
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	2b01      	cmp	r3, #1
 8000a12:	d101      	bne.n	8000a18 <HAL_ADC_Init+0x1a8>
 8000a14:	2301      	movs	r3, #1
 8000a16:	e000      	b.n	8000a1a <HAL_ADC_Init+0x1aa>
 8000a18:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d108      	bne.n	8000a30 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000a1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a20:	689b      	ldr	r3, [r3, #8]
 8000a22:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	431a      	orrs	r2, r3
 8000a2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a2e:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	7e5b      	ldrb	r3, [r3, #25]
 8000a34:	035b      	lsls	r3, r3, #13
 8000a36:	687a      	ldr	r2, [r7, #4]
 8000a38:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8000a3a:	2a01      	cmp	r2, #1
 8000a3c:	d002      	beq.n	8000a44 <HAL_ADC_Init+0x1d4>
 8000a3e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000a42:	e000      	b.n	8000a46 <HAL_ADC_Init+0x1d6>
 8000a44:	2200      	movs	r2, #0
 8000a46:	431a      	orrs	r2, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	431a      	orrs	r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000a56:	4313      	orrs	r3, r2
 8000a58:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000a60:	2b01      	cmp	r3, #1
 8000a62:	d11b      	bne.n	8000a9c <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	7e5b      	ldrb	r3, [r3, #25]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d109      	bne.n	8000a80 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000a70:	3b01      	subs	r3, #1
 8000a72:	045a      	lsls	r2, r3, #17
 8000a74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8000a76:	4313      	orrs	r3, r2
 8000a78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000a7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8000a7e:	e00d      	b.n	8000a9c <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a84:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8000a88:	f043 0220 	orr.w	r2, r3, #32
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a94:	f043 0201 	orr.w	r2, r3, #1
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d007      	beq.n	8000ab4 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000aac:	4313      	orrs	r3, r2
 8000aae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	689b      	ldr	r3, [r3, #8]
 8000aba:	f003 030c 	and.w	r3, r3, #12
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d114      	bne.n	8000aec <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	68db      	ldr	r3, [r3, #12]
 8000ac8:	687a      	ldr	r2, [r7, #4]
 8000aca:	6812      	ldr	r2, [r2, #0]
 8000acc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8000ad0:	f023 0302 	bic.w	r3, r3, #2
 8000ad4:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	7e1b      	ldrb	r3, [r3, #24]
 8000ada:	039a      	lsls	r2, r3, #14
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4313      	orrs	r3, r2
 8000ae6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8000ae8:	4313      	orrs	r3, r2
 8000aea:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68da      	ldr	r2, [r3, #12]
 8000af2:	4b21      	ldr	r3, [pc, #132]	@ (8000b78 <HAL_ADC_Init+0x308>)
 8000af4:	4013      	ands	r3, r2
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	6812      	ldr	r2, [r2, #0]
 8000afa:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8000afc:	430b      	orrs	r3, r1
 8000afe:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	691b      	ldr	r3, [r3, #16]
 8000b04:	2b01      	cmp	r3, #1
 8000b06:	d10c      	bne.n	8000b22 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	f023 010f 	bic.w	r1, r3, #15
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	69db      	ldr	r3, [r3, #28]
 8000b16:	1e5a      	subs	r2, r3, #1
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	430a      	orrs	r2, r1
 8000b1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8000b20:	e007      	b.n	8000b32 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f022 020f 	bic.w	r2, r2, #15
 8000b30:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	2200      	movs	r2, #0
 8000b36:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b3c:	f023 0303 	bic.w	r3, r3, #3
 8000b40:	f043 0201 	orr.w	r2, r3, #1
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	641a      	str	r2, [r3, #64]	@ 0x40
 8000b48:	e00a      	b.n	8000b60 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b4e:	f023 0312 	bic.w	r3, r3, #18
 8000b52:	f043 0210 	orr.w	r2, r3, #16
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000b60:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3768      	adds	r7, #104	@ 0x68
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	20000000 	.word	0x20000000
 8000b70:	431bde83 	.word	0x431bde83
 8000b74:	50000300 	.word	0x50000300
 8000b78:	fff0c007 	.word	0xfff0c007

08000b7c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b088      	sub	sp, #32
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	685b      	ldr	r3, [r3, #4]
 8000b9e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000ba0:	693b      	ldr	r3, [r7, #16]
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d004      	beq.n	8000bb4 <HAL_ADC_IRQHandler+0x38>
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d109      	bne.n	8000bc8 <HAL_ADC_IRQHandler+0x4c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000bb4:	693b      	ldr	r3, [r7, #16]
 8000bb6:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d05a      	beq.n	8000c74 <HAL_ADC_IRQHandler+0xf8>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	f003 0308 	and.w	r3, r3, #8
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d055      	beq.n	8000c74 <HAL_ADC_IRQHandler+0xf8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	f003 0310 	and.w	r3, r3, #16
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d105      	bne.n	8000be0 <HAL_ADC_IRQHandler+0x64>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68db      	ldr	r3, [r3, #12]
 8000be6:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68db      	ldr	r3, [r3, #12]
 8000bee:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d137      	bne.n	8000c66 <HAL_ADC_IRQHandler+0xea>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8000bf6:	69bb      	ldr	r3, [r7, #24]
 8000bf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d132      	bne.n	8000c66 <HAL_ADC_IRQHandler+0xea>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	f003 0308 	and.w	r3, r3, #8
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d02d      	beq.n	8000c66 <HAL_ADC_IRQHandler+0xea>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	689b      	ldr	r3, [r3, #8]
 8000c10:	f003 0304 	and.w	r3, r3, #4
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d11a      	bne.n	8000c4e <HAL_ADC_IRQHandler+0xd2>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f022 020c 	bic.w	r2, r2, #12
 8000c26:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d112      	bne.n	8000c66 <HAL_ADC_IRQHandler+0xea>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c44:	f043 0201 	orr.w	r2, r3, #1
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000c4c:	e00b      	b.n	8000c66 <HAL_ADC_IRQHandler+0xea>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c52:	f043 0210 	orr.w	r2, r3, #16
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c5e:	f043 0201 	orr.w	r2, r3, #1
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff fde4 	bl	8000834 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	220c      	movs	r2, #12
 8000c72:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	f003 0320 	and.w	r3, r3, #32
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d004      	beq.n	8000c88 <HAL_ADC_IRQHandler+0x10c>
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f003 0320 	and.w	r3, r3, #32
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d109      	bne.n	8000c9c <HAL_ADC_IRQHandler+0x120>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d069      	beq.n	8000d66 <HAL_ADC_IRQHandler+0x1ea>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d064      	beq.n	8000d66 <HAL_ADC_IRQHandler+0x1ea>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ca0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cb6:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d14c      	bne.n	8000d58 <HAL_ADC_IRQHandler+0x1dc>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d00b      	beq.n	8000ce0 <HAL_ADC_IRQHandler+0x164>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	68db      	ldr	r3, [r3, #12]
 8000cce:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d140      	bne.n	8000d58 <HAL_ADC_IRQHandler+0x1dc>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d13b      	bne.n	8000d58 <HAL_ADC_IRQHandler+0x1dc>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d036      	beq.n	8000d58 <HAL_ADC_IRQHandler+0x1dc>
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8000cf2:	697b      	ldr	r3, [r7, #20]
 8000cf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d12d      	bne.n	8000d58 <HAL_ADC_IRQHandler+0x1dc>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	689b      	ldr	r3, [r3, #8]
 8000d02:	f003 0308 	and.w	r3, r3, #8
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d11a      	bne.n	8000d40 <HAL_ADC_IRQHandler+0x1c4>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	685a      	ldr	r2, [r3, #4]
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8000d18:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d112      	bne.n	8000d58 <HAL_ADC_IRQHandler+0x1dc>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d36:	f043 0201 	orr.w	r2, r3, #1
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d3e:	e00b      	b.n	8000d58 <HAL_ADC_IRQHandler+0x1dc>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d44:	f043 0210 	orr.w	r2, r3, #16
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d50:	f043 0201 	orr.w	r2, r3, #1
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8000d58:	6878      	ldr	r0, [r7, #4]
 8000d5a:	f000 f8b1 	bl	8000ec0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	2260      	movs	r2, #96	@ 0x60
 8000d64:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d011      	beq.n	8000d94 <HAL_ADC_IRQHandler+0x218>
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00c      	beq.n	8000d94 <HAL_ADC_IRQHandler+0x218>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d7e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f7ff fd5e 	bl	8000848 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	2280      	movs	r2, #128	@ 0x80
 8000d92:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d012      	beq.n	8000dc4 <HAL_ADC_IRQHandler+0x248>
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d00d      	beq.n	8000dc4 <HAL_ADC_IRQHandler+0x248>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dac:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8000db4:	6878      	ldr	r0, [r7, #4]
 8000db6:	f000 f897 	bl	8000ee8 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000dc2:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8000dc4:	693b      	ldr	r3, [r7, #16]
 8000dc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d012      	beq.n	8000df4 <HAL_ADC_IRQHandler+0x278>
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d00d      	beq.n	8000df4 <HAL_ADC_IRQHandler+0x278>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8000de4:	6878      	ldr	r0, [r7, #4]
 8000de6:	f000 f889 	bl	8000efc <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000df2:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	f003 0310 	and.w	r3, r3, #16
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d03b      	beq.n	8000e76 <HAL_ADC_IRQHandler+0x2fa>
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d036      	beq.n	8000e76 <HAL_ADC_IRQHandler+0x2fa>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d102      	bne.n	8000e16 <HAL_ADC_IRQHandler+0x29a>
    {
      overrun_error = 1U;
 8000e10:	2301      	movs	r3, #1
 8000e12:	61fb      	str	r3, [r7, #28]
 8000e14:	e019      	b.n	8000e4a <HAL_ADC_IRQHandler+0x2ce>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e16:	4b29      	ldr	r3, [pc, #164]	@ (8000ebc <HAL_ADC_IRQHandler+0x340>)
 8000e18:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 031f 	and.w	r3, r3, #31
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d109      	bne.n	8000e3a <HAL_ADC_IRQHandler+0x2be>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d10a      	bne.n	8000e4a <HAL_ADC_IRQHandler+0x2ce>
        {
          overrun_error = 1U;  
 8000e34:	2301      	movs	r3, #1
 8000e36:	61fb      	str	r3, [r7, #28]
 8000e38:	e007      	b.n	8000e4a <HAL_ADC_IRQHandler+0x2ce>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8000e3a:	68bb      	ldr	r3, [r7, #8]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d001      	beq.n	8000e4a <HAL_ADC_IRQHandler+0x2ce>
        {
          overrun_error = 1U;  
 8000e46:	2301      	movs	r3, #1
 8000e48:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d10e      	bne.n	8000e6e <HAL_ADC_IRQHandler+0x2f2>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e54:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e60:	f043 0202 	orr.w	r2, r3, #2
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8000e68:	6878      	ldr	r0, [r7, #4]
 8000e6a:	f7ff fcf7 	bl	800085c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	2210      	movs	r2, #16
 8000e74:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8000e76:	693b      	ldr	r3, [r7, #16]
 8000e78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d018      	beq.n	8000eb2 <HAL_ADC_IRQHandler+0x336>
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d013      	beq.n	8000eb2 <HAL_ADC_IRQHandler+0x336>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e8e:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f043 0208 	orr.w	r2, r3, #8
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000eaa:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 f811 	bl	8000ed4 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 8000eb2:	bf00      	nop
 8000eb4:	3720      	adds	r7, #32
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	50000300 	.word	0x50000300

08000ec0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 8000edc:	bf00      	nop
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b083      	sub	sp, #12
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 8000ef0:	bf00      	nop
 8000ef2:	370c      	adds	r7, #12
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b09b      	sub	sp, #108	@ 0x6c
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000f20:	2300      	movs	r3, #0
 8000f22:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d101      	bne.n	8000f32 <HAL_ADC_ConfigChannel+0x22>
 8000f2e:	2302      	movs	r3, #2
 8000f30:	e295      	b.n	800145e <HAL_ADC_ConfigChannel+0x54e>
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2201      	movs	r2, #1
 8000f36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689b      	ldr	r3, [r3, #8]
 8000f40:	f003 0304 	and.w	r3, r3, #4
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	f040 8279 	bne.w	800143c <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	d81c      	bhi.n	8000f8c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	685a      	ldr	r2, [r3, #4]
 8000f5c:	4613      	mov	r3, r2
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	4413      	add	r3, r2
 8000f62:	005b      	lsls	r3, r3, #1
 8000f64:	461a      	mov	r2, r3
 8000f66:	231f      	movs	r3, #31
 8000f68:	4093      	lsls	r3, r2
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	4019      	ands	r1, r3
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	6818      	ldr	r0, [r3, #0]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	685a      	ldr	r2, [r3, #4]
 8000f76:	4613      	mov	r3, r2
 8000f78:	005b      	lsls	r3, r3, #1
 8000f7a:	4413      	add	r3, r2
 8000f7c:	005b      	lsls	r3, r3, #1
 8000f7e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	631a      	str	r2, [r3, #48]	@ 0x30
 8000f8a:	e063      	b.n	8001054 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000f8c:	683b      	ldr	r3, [r7, #0]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b09      	cmp	r3, #9
 8000f92:	d81e      	bhi.n	8000fd2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	4413      	add	r3, r2
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	3b1e      	subs	r3, #30
 8000fa8:	221f      	movs	r2, #31
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	4019      	ands	r1, r3
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	6818      	ldr	r0, [r3, #0]
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685a      	ldr	r2, [r3, #4]
 8000fba:	4613      	mov	r3, r2
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4413      	add	r3, r2
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	3b1e      	subs	r3, #30
 8000fc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fd0:	e040      	b.n	8001054 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	2b0e      	cmp	r3, #14
 8000fd8:	d81e      	bhi.n	8001018 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685a      	ldr	r2, [r3, #4]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	4413      	add	r3, r2
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	3b3c      	subs	r3, #60	@ 0x3c
 8000fee:	221f      	movs	r2, #31
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	4019      	ands	r1, r3
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	6818      	ldr	r0, [r3, #0]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685a      	ldr	r2, [r3, #4]
 8001000:	4613      	mov	r3, r2
 8001002:	005b      	lsls	r3, r3, #1
 8001004:	4413      	add	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	3b3c      	subs	r3, #60	@ 0x3c
 800100a:	fa00 f203 	lsl.w	r2, r0, r3
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	639a      	str	r2, [r3, #56]	@ 0x38
 8001016:	e01d      	b.n	8001054 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	3b5a      	subs	r3, #90	@ 0x5a
 800102c:	221f      	movs	r2, #31
 800102e:	fa02 f303 	lsl.w	r3, r2, r3
 8001032:	43db      	mvns	r3, r3
 8001034:	4019      	ands	r1, r3
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	6818      	ldr	r0, [r3, #0]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	3b5a      	subs	r3, #90	@ 0x5a
 8001048:	fa00 f203 	lsl.w	r2, r0, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	430a      	orrs	r2, r1
 8001052:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f003 030c 	and.w	r3, r3, #12
 800105e:	2b00      	cmp	r3, #0
 8001060:	f040 80e5 	bne.w	800122e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b09      	cmp	r3, #9
 800106a:	d91c      	bls.n	80010a6 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6999      	ldr	r1, [r3, #24]
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	3b1e      	subs	r3, #30
 800107e:	2207      	movs	r2, #7
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	4019      	ands	r1, r3
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	6898      	ldr	r0, [r3, #8]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	3b1e      	subs	r3, #30
 8001098:	fa00 f203 	lsl.w	r2, r0, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	619a      	str	r2, [r3, #24]
 80010a4:	e019      	b.n	80010da <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	6959      	ldr	r1, [r3, #20]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681a      	ldr	r2, [r3, #0]
 80010b0:	4613      	mov	r3, r2
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	4413      	add	r3, r2
 80010b6:	2207      	movs	r2, #7
 80010b8:	fa02 f303 	lsl.w	r3, r2, r3
 80010bc:	43db      	mvns	r3, r3
 80010be:	4019      	ands	r1, r3
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	6898      	ldr	r0, [r3, #8]
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	fa00 f203 	lsl.w	r2, r0, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	430a      	orrs	r2, r1
 80010d8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	695a      	ldr	r2, [r3, #20]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	f003 0303 	and.w	r3, r3, #3
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	3b01      	subs	r3, #1
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d84f      	bhi.n	800119c <HAL_ADC_ConfigChannel+0x28c>
 80010fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001104 <HAL_ADC_ConfigChannel+0x1f4>)
 80010fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001102:	bf00      	nop
 8001104:	08001115 	.word	0x08001115
 8001108:	08001137 	.word	0x08001137
 800110c:	08001159 	.word	0x08001159
 8001110:	0800117b 	.word	0x0800117b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800111a:	4b97      	ldr	r3, [pc, #604]	@ (8001378 <HAL_ADC_ConfigChannel+0x468>)
 800111c:	4013      	ands	r3, r2
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	6812      	ldr	r2, [r2, #0]
 8001122:	0691      	lsls	r1, r2, #26
 8001124:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001126:	430a      	orrs	r2, r1
 8001128:	431a      	orrs	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001132:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001134:	e07b      	b.n	800122e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800113c:	4b8e      	ldr	r3, [pc, #568]	@ (8001378 <HAL_ADC_ConfigChannel+0x468>)
 800113e:	4013      	ands	r3, r2
 8001140:	683a      	ldr	r2, [r7, #0]
 8001142:	6812      	ldr	r2, [r2, #0]
 8001144:	0691      	lsls	r1, r2, #26
 8001146:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001148:	430a      	orrs	r2, r1
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001154:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001156:	e06a      	b.n	800122e <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800115e:	4b86      	ldr	r3, [pc, #536]	@ (8001378 <HAL_ADC_ConfigChannel+0x468>)
 8001160:	4013      	ands	r3, r2
 8001162:	683a      	ldr	r2, [r7, #0]
 8001164:	6812      	ldr	r2, [r2, #0]
 8001166:	0691      	lsls	r1, r2, #26
 8001168:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800116a:	430a      	orrs	r2, r1
 800116c:	431a      	orrs	r2, r3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001176:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001178:	e059      	b.n	800122e <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001180:	4b7d      	ldr	r3, [pc, #500]	@ (8001378 <HAL_ADC_ConfigChannel+0x468>)
 8001182:	4013      	ands	r3, r2
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	6812      	ldr	r2, [r2, #0]
 8001188:	0691      	lsls	r1, r2, #26
 800118a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800118c:	430a      	orrs	r2, r1
 800118e:	431a      	orrs	r2, r3
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001198:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800119a:	e048      	b.n	800122e <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80011a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	069b      	lsls	r3, r3, #26
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d107      	bne.n	80011c0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80011be:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80011c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	069b      	lsls	r3, r3, #26
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d107      	bne.n	80011e4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80011e2:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80011ea:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	069b      	lsls	r3, r3, #26
 80011f4:	429a      	cmp	r2, r3
 80011f6:	d107      	bne.n	8001208 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001206:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800120e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001212:	683b      	ldr	r3, [r7, #0]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	069b      	lsls	r3, r3, #26
 8001218:	429a      	cmp	r2, r3
 800121a:	d107      	bne.n	800122c <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800122a:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 800122c:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 0303 	and.w	r3, r3, #3
 8001238:	2b01      	cmp	r3, #1
 800123a:	d108      	bne.n	800124e <HAL_ADC_ConfigChannel+0x33e>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b01      	cmp	r3, #1
 8001248:	d101      	bne.n	800124e <HAL_ADC_ConfigChannel+0x33e>
 800124a:	2301      	movs	r3, #1
 800124c:	e000      	b.n	8001250 <HAL_ADC_ConfigChannel+0x340>
 800124e:	2300      	movs	r3, #0
 8001250:	2b00      	cmp	r3, #0
 8001252:	f040 80fe 	bne.w	8001452 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	68db      	ldr	r3, [r3, #12]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d00f      	beq.n	800127e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	2201      	movs	r2, #1
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43da      	mvns	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	400a      	ands	r2, r1
 8001278:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 800127c:	e049      	b.n	8001312 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2201      	movs	r2, #1
 800128c:	409a      	lsls	r2, r3
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b09      	cmp	r3, #9
 800129e:	d91c      	bls.n	80012da <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	6999      	ldr	r1, [r3, #24]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	3b1b      	subs	r3, #27
 80012b2:	2207      	movs	r2, #7
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	4019      	ands	r1, r3
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	6898      	ldr	r0, [r3, #8]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4613      	mov	r3, r2
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	4413      	add	r3, r2
 80012ca:	3b1b      	subs	r3, #27
 80012cc:	fa00 f203 	lsl.w	r2, r0, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	619a      	str	r2, [r3, #24]
 80012d8:	e01b      	b.n	8001312 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6959      	ldr	r1, [r3, #20]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	2207      	movs	r2, #7
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	4019      	ands	r1, r3
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	6898      	ldr	r0, [r3, #8]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	1c5a      	adds	r2, r3, #1
 8001300:	4613      	mov	r3, r2
 8001302:	005b      	lsls	r3, r3, #1
 8001304:	4413      	add	r3, r2
 8001306:	fa00 f203 	lsl.w	r2, r0, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001312:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <HAL_ADC_ConfigChannel+0x46c>)
 8001314:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	2b10      	cmp	r3, #16
 800131c:	d105      	bne.n	800132a <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800131e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001326:	2b00      	cmp	r3, #0
 8001328:	d014      	beq.n	8001354 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800132e:	2b11      	cmp	r3, #17
 8001330:	d105      	bne.n	800133e <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001332:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800133a:	2b00      	cmp	r3, #0
 800133c:	d00a      	beq.n	8001354 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001342:	2b12      	cmp	r3, #18
 8001344:	f040 8085 	bne.w	8001452 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001348:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001350:	2b00      	cmp	r3, #0
 8001352:	d17e      	bne.n	8001452 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001354:	2300      	movs	r3, #0
 8001356:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 0303 	and.w	r3, r3, #3
 8001362:	2b01      	cmp	r3, #1
 8001364:	d10c      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x470>
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b01      	cmp	r3, #1
 8001372:	d105      	bne.n	8001380 <HAL_ADC_ConfigChannel+0x470>
 8001374:	2301      	movs	r3, #1
 8001376:	e004      	b.n	8001382 <HAL_ADC_ConfigChannel+0x472>
 8001378:	83fff000 	.word	0x83fff000
 800137c:	50000300 	.word	0x50000300
 8001380:	2300      	movs	r3, #0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d150      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001386:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001388:	2b00      	cmp	r3, #0
 800138a:	d010      	beq.n	80013ae <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	689b      	ldr	r3, [r3, #8]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b01      	cmp	r3, #1
 8001396:	d107      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x498>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x498>
 80013a4:	2301      	movs	r3, #1
 80013a6:	e000      	b.n	80013aa <HAL_ADC_ConfigChannel+0x49a>
 80013a8:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d13c      	bne.n	8001428 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b10      	cmp	r3, #16
 80013b4:	d11d      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x4e2>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013be:	d118      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80013c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80013c8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80013ca:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013cc:	4b27      	ldr	r3, [pc, #156]	@ (800146c <HAL_ADC_ConfigChannel+0x55c>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a27      	ldr	r2, [pc, #156]	@ (8001470 <HAL_ADC_ConfigChannel+0x560>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9a      	lsrs	r2, r3, #18
 80013d8:	4613      	mov	r3, r2
 80013da:	009b      	lsls	r3, r3, #2
 80013dc:	4413      	add	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013e2:	e002      	b.n	80013ea <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013ea:	68bb      	ldr	r3, [r7, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f9      	bne.n	80013e4 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013f0:	e02e      	b.n	8001450 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2b11      	cmp	r3, #17
 80013f8:	d10b      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x502>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001402:	d106      	bne.n	8001412 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001404:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800140c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800140e:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001410:	e01e      	b.n	8001450 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b12      	cmp	r3, #18
 8001418:	d11a      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800141a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001422:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001424:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001426:	e013      	b.n	8001450 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800142c:	f043 0220 	orr.w	r2, r3, #32
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800143a:	e00a      	b.n	8001452 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001440:	f043 0220 	orr.w	r2, r3, #32
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800144e:	e000      	b.n	8001452 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001450:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2200      	movs	r2, #0
 8001456:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800145a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800145e:	4618      	mov	r0, r3
 8001460:	376c      	adds	r7, #108	@ 0x6c
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000000 	.word	0x20000000
 8001470:	431bde83 	.word	0x431bde83

08001474 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800147c:	2300      	movs	r3, #0
 800147e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b01      	cmp	r3, #1
 800148c:	d108      	bne.n	80014a0 <ADC_Disable+0x2c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0301 	and.w	r3, r3, #1
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <ADC_Disable+0x2c>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <ADC_Disable+0x2e>
 80014a0:	2300      	movs	r3, #0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d047      	beq.n	8001536 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	f003 030d 	and.w	r3, r3, #13
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d10f      	bne.n	80014d4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	689a      	ldr	r2, [r3, #8]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f042 0202 	orr.w	r2, r2, #2
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2203      	movs	r2, #3
 80014ca:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80014cc:	f7ff f9a6 	bl	800081c <HAL_GetTick>
 80014d0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80014d2:	e029      	b.n	8001528 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d8:	f043 0210 	orr.w	r2, r3, #16
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e4:	f043 0201 	orr.w	r2, r3, #1
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	e023      	b.n	8001538 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80014f0:	f7ff f994 	bl	800081c <HAL_GetTick>
 80014f4:	4602      	mov	r2, r0
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	1ad3      	subs	r3, r2, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d914      	bls.n	8001528 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 0301 	and.w	r3, r3, #1
 8001508:	2b01      	cmp	r3, #1
 800150a:	d10d      	bne.n	8001528 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001510:	f043 0210 	orr.w	r2, r3, #16
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151c:	f043 0201 	orr.w	r2, r3, #1
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8001524:	2301      	movs	r3, #1
 8001526:	e007      	b.n	8001538 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b01      	cmp	r3, #1
 8001534:	d0dc      	beq.n	80014f0 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3710      	adds	r7, #16
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	@ (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	@ (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4907      	ldr	r1, [pc, #28]	@ (80015dc <__NVIC_EnableIRQ+0x38>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	@ (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	@ (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	@ 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016ac:	d301      	bcc.n	80016b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b2:	4a0a      	ldr	r2, [pc, #40]	@ (80016dc <SysTick_Config+0x40>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ba:	210f      	movs	r1, #15
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f7ff ff8e 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	@ (80016dc <SysTick_Config+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	@ (80016dc <SysTick_Config+0x40>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff29 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff3e 	bl	8001588 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff8e 	bl	8001634 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5d 	bl	80015e0 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff31 	bl	80015a4 <__NVIC_EnableIRQ>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffa2 	bl	800169c <SysTick_Config>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}

08001762 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001762:	b580      	push	{r7, lr}
 8001764:	b084      	sub	sp, #16
 8001766:	af00      	add	r7, sp, #0
 8001768:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800176a:	2300      	movs	r3, #0
 800176c:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d101      	bne.n	8001778 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e037      	b.n	80017e8 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2202      	movs	r2, #2
 800177c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800178e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001792:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800179c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	68db      	ldr	r3, [r3, #12]
 80017a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80017a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	695b      	ldr	r3, [r3, #20]
 80017ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69db      	ldr	r3, [r3, #28]
 80017ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017bc:	68fa      	ldr	r2, [r7, #12]
 80017be:	4313      	orrs	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 f8b4 	bl	8001938 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2200      	movs	r2, #0
 80017d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b084      	sub	sp, #16
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180c:	2204      	movs	r2, #4
 800180e:	409a      	lsls	r2, r3
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	4013      	ands	r3, r2
 8001814:	2b00      	cmp	r3, #0
 8001816:	d024      	beq.n	8001862 <HAL_DMA_IRQHandler+0x72>
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	f003 0304 	and.w	r3, r3, #4
 800181e:	2b00      	cmp	r3, #0
 8001820:	d01f      	beq.n	8001862 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0320 	and.w	r3, r3, #32
 800182c:	2b00      	cmp	r3, #0
 800182e:	d107      	bne.n	8001840 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f022 0204 	bic.w	r2, r2, #4
 800183e:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001848:	2104      	movs	r1, #4
 800184a:	fa01 f202 	lsl.w	r2, r1, r2
 800184e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001854:	2b00      	cmp	r3, #0
 8001856:	d06a      	beq.n	800192e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001860:	e065      	b.n	800192e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	2202      	movs	r2, #2
 8001868:	409a      	lsls	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	4013      	ands	r3, r2
 800186e:	2b00      	cmp	r3, #0
 8001870:	d02c      	beq.n	80018cc <HAL_DMA_IRQHandler+0xdc>
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	f003 0302 	and.w	r3, r3, #2
 8001878:	2b00      	cmp	r3, #0
 800187a:	d027      	beq.n	80018cc <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b00      	cmp	r3, #0
 8001888:	d10b      	bne.n	80018a2 <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 020a 	bic.w	r2, r2, #10
 8001898:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018aa:	2102      	movs	r1, #2
 80018ac:	fa01 f202 	lsl.w	r2, r1, r2
 80018b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2200      	movs	r2, #0
 80018b6:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d035      	beq.n	800192e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80018ca:	e030      	b.n	800192e <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	2208      	movs	r2, #8
 80018d2:	409a      	lsls	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4013      	ands	r3, r2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d028      	beq.n	800192e <HAL_DMA_IRQHandler+0x13e>
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	f003 0308 	and.w	r3, r3, #8
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d023      	beq.n	800192e <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f022 020e 	bic.w	r2, r2, #14
 80018f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018fe:	2101      	movs	r1, #1
 8001900:	fa01 f202 	lsl.w	r2, r1, r2
 8001904:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2201      	movs	r2, #1
 800190a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2201      	movs	r2, #1
 8001910:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2200      	movs	r2, #0
 8001918:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001920:	2b00      	cmp	r3, #0
 8001922:	d004      	beq.n	800192e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	4798      	blx	r3
    }
  }
}
 800192c:	e7ff      	b.n	800192e <HAL_DMA_IRQHandler+0x13e>
 800192e:	bf00      	nop
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
	...

08001938 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001938:	b480      	push	{r7}
 800193a:	b083      	sub	sp, #12
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	461a      	mov	r2, r3
 8001946:	4b09      	ldr	r3, [pc, #36]	@ (800196c <DMA_CalcBaseAndBitshift+0x34>)
 8001948:	4413      	add	r3, r2
 800194a:	4a09      	ldr	r2, [pc, #36]	@ (8001970 <DMA_CalcBaseAndBitshift+0x38>)
 800194c:	fba2 2303 	umull	r2, r3, r2, r3
 8001950:	091b      	lsrs	r3, r3, #4
 8001952:	009a      	lsls	r2, r3, #2
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	4a06      	ldr	r2, [pc, #24]	@ (8001974 <DMA_CalcBaseAndBitshift+0x3c>)
 800195c:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	bffdfff8 	.word	0xbffdfff8
 8001970:	cccccccd 	.word	0xcccccccd
 8001974:	40020000 	.word	0x40020000

08001978 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001986:	e14e      	b.n	8001c26 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	2101      	movs	r1, #1
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	fa01 f303 	lsl.w	r3, r1, r3
 8001994:	4013      	ands	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8140 	beq.w	8001c20 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	d005      	beq.n	80019b8 <HAL_GPIO_Init+0x40>
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d130      	bne.n	8001a1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	005b      	lsls	r3, r3, #1
 80019c2:	2203      	movs	r2, #3
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	4013      	ands	r3, r2
 80019ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	68da      	ldr	r2, [r3, #12]
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4313      	orrs	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	693a      	ldr	r2, [r7, #16]
 80019e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80019ee:	2201      	movs	r2, #1
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	fa02 f303 	lsl.w	r3, r2, r3
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	091b      	lsrs	r3, r3, #4
 8001a04:	f003 0201 	and.w	r2, r3, #1
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	f003 0303 	and.w	r3, r3, #3
 8001a22:	2b03      	cmp	r3, #3
 8001a24:	d017      	beq.n	8001a56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001a2c:	697b      	ldr	r3, [r7, #20]
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	2203      	movs	r2, #3
 8001a32:	fa02 f303 	lsl.w	r3, r2, r3
 8001a36:	43db      	mvns	r3, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d123      	bne.n	8001aaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	08da      	lsrs	r2, r3, #3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	3208      	adds	r2, #8
 8001a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	f003 0307 	and.w	r3, r3, #7
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	220f      	movs	r2, #15
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 0307 	and.w	r3, r3, #7
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	08da      	lsrs	r2, r3, #3
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3208      	adds	r2, #8
 8001aa4:	6939      	ldr	r1, [r7, #16]
 8001aa6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	2203      	movs	r2, #3
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43db      	mvns	r3, r3
 8001abc:	693a      	ldr	r2, [r7, #16]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f003 0203 	and.w	r2, r3, #3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 809a 	beq.w	8001c20 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aec:	4b55      	ldr	r3, [pc, #340]	@ (8001c44 <HAL_GPIO_Init+0x2cc>)
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	4a54      	ldr	r2, [pc, #336]	@ (8001c44 <HAL_GPIO_Init+0x2cc>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b52      	ldr	r3, [pc, #328]	@ (8001c44 <HAL_GPIO_Init+0x2cc>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b04:	4a50      	ldr	r2, [pc, #320]	@ (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3302      	adds	r3, #2
 8001b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0303 	and.w	r3, r3, #3
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b2e:	d013      	beq.n	8001b58 <HAL_GPIO_Init+0x1e0>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4a46      	ldr	r2, [pc, #280]	@ (8001c4c <HAL_GPIO_Init+0x2d4>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d00d      	beq.n	8001b54 <HAL_GPIO_Init+0x1dc>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	4a45      	ldr	r2, [pc, #276]	@ (8001c50 <HAL_GPIO_Init+0x2d8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d007      	beq.n	8001b50 <HAL_GPIO_Init+0x1d8>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a44      	ldr	r2, [pc, #272]	@ (8001c54 <HAL_GPIO_Init+0x2dc>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_GPIO_Init+0x1d4>
 8001b48:	2303      	movs	r3, #3
 8001b4a:	e006      	b.n	8001b5a <HAL_GPIO_Init+0x1e2>
 8001b4c:	2305      	movs	r3, #5
 8001b4e:	e004      	b.n	8001b5a <HAL_GPIO_Init+0x1e2>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e002      	b.n	8001b5a <HAL_GPIO_Init+0x1e2>
 8001b54:	2301      	movs	r3, #1
 8001b56:	e000      	b.n	8001b5a <HAL_GPIO_Init+0x1e2>
 8001b58:	2300      	movs	r3, #0
 8001b5a:	697a      	ldr	r2, [r7, #20]
 8001b5c:	f002 0203 	and.w	r2, r2, #3
 8001b60:	0092      	lsls	r2, r2, #2
 8001b62:	4093      	lsls	r3, r2
 8001b64:	693a      	ldr	r2, [r7, #16]
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b6a:	4937      	ldr	r1, [pc, #220]	@ (8001c48 <HAL_GPIO_Init+0x2d0>)
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	089b      	lsrs	r3, r3, #2
 8001b70:	3302      	adds	r3, #2
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b78:	4b37      	ldr	r3, [pc, #220]	@ (8001c58 <HAL_GPIO_Init+0x2e0>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	43db      	mvns	r3, r3
 8001b82:	693a      	ldr	r2, [r7, #16]
 8001b84:	4013      	ands	r3, r2
 8001b86:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d003      	beq.n	8001b9c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b9c:	4a2e      	ldr	r2, [pc, #184]	@ (8001c58 <HAL_GPIO_Init+0x2e0>)
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ba2:	4b2d      	ldr	r3, [pc, #180]	@ (8001c58 <HAL_GPIO_Init+0x2e0>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	43db      	mvns	r3, r3
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001bc6:	4a24      	ldr	r2, [pc, #144]	@ (8001c58 <HAL_GPIO_Init+0x2e0>)
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001bcc:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <HAL_GPIO_Init+0x2e0>)
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d003      	beq.n	8001bf0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	4313      	orrs	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001bf0:	4a19      	ldr	r2, [pc, #100]	@ (8001c58 <HAL_GPIO_Init+0x2e0>)
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	@ (8001c58 <HAL_GPIO_Init+0x2e0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	43db      	mvns	r3, r3
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	4013      	ands	r3, r2
 8001c04:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001c1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001c58 <HAL_GPIO_Init+0x2e0>)
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	3301      	adds	r3, #1
 8001c24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f47f aea9 	bne.w	8001988 <HAL_GPIO_Init+0x10>
  }
}
 8001c36:	bf00      	nop
 8001c38:	bf00      	nop
 8001c3a:	371c      	adds	r7, #28
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr
 8001c44:	40021000 	.word	0x40021000
 8001c48:	40010000 	.word	0x40010000
 8001c4c:	48000400 	.word	0x48000400
 8001c50:	48000800 	.word	0x48000800
 8001c54:	48000c00 	.word	0x48000c00
 8001c58:	40010400 	.word	0x40010400

08001c5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c6c:	787b      	ldrb	r3, [r7, #1]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c78:	e002      	b.n	8001c80 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c7a:	887a      	ldrh	r2, [r7, #2]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c98:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001c9c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c9e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	f001 b823 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cb2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 817d 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001cc8:	4bbc      	ldr	r3, [pc, #752]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	d00c      	beq.n	8001cee <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001cd4:	4bb9      	ldr	r3, [pc, #740]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 030c 	and.w	r3, r3, #12
 8001cdc:	2b08      	cmp	r3, #8
 8001cde:	d15c      	bne.n	8001d9a <HAL_RCC_OscConfig+0x10e>
 8001ce0:	4bb6      	ldr	r3, [pc, #728]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ce8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cec:	d155      	bne.n	8001d9a <HAL_RCC_OscConfig+0x10e>
 8001cee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001cf2:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf6:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8001cfa:	fa93 f3a3 	rbit	r3, r3
 8001cfe:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001d02:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d06:	fab3 f383 	clz	r3, r3
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	095b      	lsrs	r3, r3, #5
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d102      	bne.n	8001d20 <HAL_RCC_OscConfig+0x94>
 8001d1a:	4ba8      	ldr	r3, [pc, #672]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	e015      	b.n	8001d4c <HAL_RCC_OscConfig+0xc0>
 8001d20:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d24:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d28:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001d2c:	fa93 f3a3 	rbit	r3, r3
 8001d30:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001d34:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001d38:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001d3c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 8001d48:	4b9c      	ldr	r3, [pc, #624]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d4c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001d50:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 8001d54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001d58:	fa92 f2a2 	rbit	r2, r2
 8001d5c:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 8001d60:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 8001d64:	fab2 f282 	clz	r2, r2
 8001d68:	b2d2      	uxtb	r2, r2
 8001d6a:	f042 0220 	orr.w	r2, r2, #32
 8001d6e:	b2d2      	uxtb	r2, r2
 8001d70:	f002 021f 	and.w	r2, r2, #31
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 811f 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x334>
 8001d82:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d86:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	f040 8116 	bne.w	8001fc0 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	f000 bfaf 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001daa:	d106      	bne.n	8001dba <HAL_RCC_OscConfig+0x12e>
 8001dac:	4b83      	ldr	r3, [pc, #524]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a82      	ldr	r2, [pc, #520]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001db6:	6013      	str	r3, [r2, #0]
 8001db8:	e036      	b.n	8001e28 <HAL_RCC_OscConfig+0x19c>
 8001dba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001dbe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0x158>
 8001dca:	4b7c      	ldr	r3, [pc, #496]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a7b      	ldr	r2, [pc, #492]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001dd0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b79      	ldr	r3, [pc, #484]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a78      	ldr	r2, [pc, #480]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001ddc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e021      	b.n	8001e28 <HAL_RCC_OscConfig+0x19c>
 8001de4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001de8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCC_OscConfig+0x184>
 8001df6:	4b71      	ldr	r3, [pc, #452]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a70      	ldr	r2, [pc, #448]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001dfc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e00:	6013      	str	r3, [r2, #0]
 8001e02:	4b6e      	ldr	r3, [pc, #440]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6d      	ldr	r2, [pc, #436]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e08:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0c:	6013      	str	r3, [r2, #0]
 8001e0e:	e00b      	b.n	8001e28 <HAL_RCC_OscConfig+0x19c>
 8001e10:	4b6a      	ldr	r3, [pc, #424]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a69      	ldr	r2, [pc, #420]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e16:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e1a:	6013      	str	r3, [r2, #0]
 8001e1c:	4b67      	ldr	r3, [pc, #412]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a66      	ldr	r2, [pc, #408]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e22:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e26:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e28:	4b64      	ldr	r3, [pc, #400]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e2c:	f023 020f 	bic.w	r2, r3, #15
 8001e30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e34:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	495f      	ldr	r1, [pc, #380]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e46:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d059      	beq.n	8001f06 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7fe fce3 	bl	800081c <HAL_GetTick>
 8001e56:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e5c:	f7fe fcde 	bl	800081c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b64      	cmp	r3, #100	@ 0x64
 8001e6a:	d902      	bls.n	8001e72 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	f000 bf43 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8001e72:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e76:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8001e7e:	fa93 f3a3 	rbit	r3, r3
 8001e82:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8001e86:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x218>
 8001e9e:	4b47      	ldr	r3, [pc, #284]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	e015      	b.n	8001ed0 <HAL_RCC_OscConfig+0x244>
 8001ea4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ea8:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eac:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001eb0:	fa93 f3a3 	rbit	r3, r3
 8001eb4:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001eb8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001ebc:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001ec0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001ecc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ed4:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8001ed8:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001edc:	fa92 f2a2 	rbit	r2, r2
 8001ee0:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001ee4:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8001ee8:	fab2 f282 	clz	r2, r2
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	f042 0220 	orr.w	r2, r2, #32
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	f002 021f 	and.w	r2, r2, #31
 8001ef8:	2101      	movs	r1, #1
 8001efa:	fa01 f202 	lsl.w	r2, r1, r2
 8001efe:	4013      	ands	r3, r2
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0ab      	beq.n	8001e5c <HAL_RCC_OscConfig+0x1d0>
 8001f04:	e05d      	b.n	8001fc2 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f06:	f7fe fc89 	bl	800081c <HAL_GetTick>
 8001f0a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f0e:	e00a      	b.n	8001f26 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f10:	f7fe fc84 	bl	800081c <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b64      	cmp	r3, #100	@ 0x64
 8001f1e:	d902      	bls.n	8001f26 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	f000 bee9 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8001f26:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f2a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f2e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001f32:	fa93 f3a3 	rbit	r3, r3
 8001f36:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8001f3a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	095b      	lsrs	r3, r3, #5
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d102      	bne.n	8001f58 <HAL_RCC_OscConfig+0x2cc>
 8001f52:	4b1a      	ldr	r3, [pc, #104]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	e015      	b.n	8001f84 <HAL_RCC_OscConfig+0x2f8>
 8001f58:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f5c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f60:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8001f64:	fa93 f3a3 	rbit	r3, r3
 8001f68:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001f6c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f70:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001f74:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8001f80:	4b0e      	ldr	r3, [pc, #56]	@ (8001fbc <HAL_RCC_OscConfig+0x330>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f84:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001f88:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8001f8c:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8001f90:	fa92 f2a2 	rbit	r2, r2
 8001f94:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8001f98:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8001f9c:	fab2 f282 	clz	r2, r2
 8001fa0:	b2d2      	uxtb	r2, r2
 8001fa2:	f042 0220 	orr.w	r2, r2, #32
 8001fa6:	b2d2      	uxtb	r2, r2
 8001fa8:	f002 021f 	and.w	r2, r2, #31
 8001fac:	2101      	movs	r1, #1
 8001fae:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1ab      	bne.n	8001f10 <HAL_RCC_OscConfig+0x284>
 8001fb8:	e003      	b.n	8001fc2 <HAL_RCC_OscConfig+0x336>
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 0302 	and.w	r3, r3, #2
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	f000 817d 	beq.w	80022d2 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fd8:	4ba6      	ldr	r3, [pc, #664]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f003 030c 	and.w	r3, r3, #12
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d00b      	beq.n	8001ffc <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fe4:	4ba3      	ldr	r3, [pc, #652]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 030c 	and.w	r3, r3, #12
 8001fec:	2b08      	cmp	r3, #8
 8001fee:	d172      	bne.n	80020d6 <HAL_RCC_OscConfig+0x44a>
 8001ff0:	4ba0      	ldr	r3, [pc, #640]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d16c      	bne.n	80020d6 <HAL_RCC_OscConfig+0x44a>
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002002:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002006:	fa93 f3a3 	rbit	r3, r3
 800200a:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 800200e:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002012:	fab3 f383 	clz	r3, r3
 8002016:	b2db      	uxtb	r3, r3
 8002018:	095b      	lsrs	r3, r3, #5
 800201a:	b2db      	uxtb	r3, r3
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	b2db      	uxtb	r3, r3
 8002022:	2b01      	cmp	r3, #1
 8002024:	d102      	bne.n	800202c <HAL_RCC_OscConfig+0x3a0>
 8002026:	4b93      	ldr	r3, [pc, #588]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	e013      	b.n	8002054 <HAL_RCC_OscConfig+0x3c8>
 800202c:	2302      	movs	r3, #2
 800202e:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002032:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002036:	fa93 f3a3 	rbit	r3, r3
 800203a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800203e:	2302      	movs	r3, #2
 8002040:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002044:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002050:	4b88      	ldr	r3, [pc, #544]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8002052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002054:	2202      	movs	r2, #2
 8002056:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 800205a:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800205e:	fa92 f2a2 	rbit	r2, r2
 8002062:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002066:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 800206a:	fab2 f282 	clz	r2, r2
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	f042 0220 	orr.w	r2, r2, #32
 8002074:	b2d2      	uxtb	r2, r2
 8002076:	f002 021f 	and.w	r2, r2, #31
 800207a:	2101      	movs	r1, #1
 800207c:	fa01 f202 	lsl.w	r2, r1, r2
 8002080:	4013      	ands	r3, r2
 8002082:	2b00      	cmp	r3, #0
 8002084:	d00a      	beq.n	800209c <HAL_RCC_OscConfig+0x410>
 8002086:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800208a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d002      	beq.n	800209c <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	f000 be2e 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800209c:	4b75      	ldr	r3, [pc, #468]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020a4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020a8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	21f8      	movs	r1, #248	@ 0xf8
 80020b2:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80020ba:	fa91 f1a1 	rbit	r1, r1
 80020be:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 80020c2:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 80020c6:	fab1 f181 	clz	r1, r1
 80020ca:	b2c9      	uxtb	r1, r1
 80020cc:	408b      	lsls	r3, r1
 80020ce:	4969      	ldr	r1, [pc, #420]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80020d4:	e0fd      	b.n	80022d2 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 8088 	beq.w	80021f8 <HAL_RCC_OscConfig+0x56c>
 80020e8:	2301      	movs	r3, #1
 80020ea:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ee:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 80020f2:	fa93 f3a3 	rbit	r3, r3
 80020f6:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 80020fa:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020fe:	fab3 f383 	clz	r3, r3
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002108:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	461a      	mov	r2, r3
 8002110:	2301      	movs	r3, #1
 8002112:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002114:	f7fe fb82 	bl	800081c <HAL_GetTick>
 8002118:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800211c:	e00a      	b.n	8002134 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800211e:	f7fe fb7d 	bl	800081c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d902      	bls.n	8002134 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	f000 bde2 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8002134:	2302      	movs	r3, #2
 8002136:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213a:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002146:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	095b      	lsrs	r3, r3, #5
 8002152:	b2db      	uxtb	r3, r3
 8002154:	f043 0301 	orr.w	r3, r3, #1
 8002158:	b2db      	uxtb	r3, r3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d102      	bne.n	8002164 <HAL_RCC_OscConfig+0x4d8>
 800215e:	4b45      	ldr	r3, [pc, #276]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	e013      	b.n	800218c <HAL_RCC_OscConfig+0x500>
 8002164:	2302      	movs	r3, #2
 8002166:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800216e:	fa93 f3a3 	rbit	r3, r3
 8002172:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002176:	2302      	movs	r3, #2
 8002178:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800217c:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002188:	4b3a      	ldr	r3, [pc, #232]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 800218a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800218c:	2202      	movs	r2, #2
 800218e:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002192:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002196:	fa92 f2a2 	rbit	r2, r2
 800219a:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 800219e:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80021a2:	fab2 f282 	clz	r2, r2
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	f042 0220 	orr.w	r2, r2, #32
 80021ac:	b2d2      	uxtb	r2, r2
 80021ae:	f002 021f 	and.w	r2, r2, #31
 80021b2:	2101      	movs	r1, #1
 80021b4:	fa01 f202 	lsl.w	r2, r1, r2
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d0af      	beq.n	800211e <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	4b2d      	ldr	r3, [pc, #180]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ca:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695b      	ldr	r3, [r3, #20]
 80021d2:	21f8      	movs	r1, #248	@ 0xf8
 80021d4:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80021dc:	fa91 f1a1 	rbit	r1, r1
 80021e0:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 80021e4:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 80021e8:	fab1 f181 	clz	r1, r1
 80021ec:	b2c9      	uxtb	r1, r1
 80021ee:	408b      	lsls	r3, r1
 80021f0:	4920      	ldr	r1, [pc, #128]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
 80021f6:	e06c      	b.n	80022d2 <HAL_RCC_OscConfig+0x646>
 80021f8:	2301      	movs	r3, #1
 80021fa:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fe:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002202:	fa93 f3a3 	rbit	r3, r3
 8002206:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 800220a:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002218:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	461a      	mov	r2, r3
 8002220:	2300      	movs	r3, #0
 8002222:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe fafa 	bl	800081c <HAL_GetTick>
 8002228:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800222e:	f7fe faf5 	bl	800081c <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	2b02      	cmp	r3, #2
 800223c:	d902      	bls.n	8002244 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	f000 bd5a 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8002244:	2302      	movs	r3, #2
 8002246:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002256:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225a:	fab3 f383 	clz	r3, r3
 800225e:	b2db      	uxtb	r3, r3
 8002260:	095b      	lsrs	r3, r3, #5
 8002262:	b2db      	uxtb	r3, r3
 8002264:	f043 0301 	orr.w	r3, r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b01      	cmp	r3, #1
 800226c:	d104      	bne.n	8002278 <HAL_RCC_OscConfig+0x5ec>
 800226e:	4b01      	ldr	r3, [pc, #4]	@ (8002274 <HAL_RCC_OscConfig+0x5e8>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	e015      	b.n	80022a0 <HAL_RCC_OscConfig+0x614>
 8002274:	40021000 	.word	0x40021000
 8002278:	2302      	movs	r3, #2
 800227a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002282:	fa93 f3a3 	rbit	r3, r3
 8002286:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800228a:	2302      	movs	r3, #2
 800228c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002290:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002294:	fa93 f3a3 	rbit	r3, r3
 8002298:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 800229c:	4bc8      	ldr	r3, [pc, #800]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	2202      	movs	r2, #2
 80022a2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 80022a6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80022aa:	fa92 f2a2 	rbit	r2, r2
 80022ae:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 80022b2:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 80022b6:	fab2 f282 	clz	r2, r2
 80022ba:	b2d2      	uxtb	r2, r2
 80022bc:	f042 0220 	orr.w	r2, r2, #32
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	f002 021f 	and.w	r2, r2, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f202 	lsl.w	r2, r1, r2
 80022cc:	4013      	ands	r3, r2
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1ad      	bne.n	800222e <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0308 	and.w	r3, r3, #8
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 8110 	beq.w	8002508 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	699b      	ldr	r3, [r3, #24]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d079      	beq.n	80023ec <HAL_RCC_OscConfig+0x760>
 80022f8:	2301      	movs	r3, #1
 80022fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002302:	fa93 f3a3 	rbit	r3, r3
 8002306:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 800230a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800230e:	fab3 f383 	clz	r3, r3
 8002312:	b2db      	uxtb	r3, r3
 8002314:	461a      	mov	r2, r3
 8002316:	4bab      	ldr	r3, [pc, #684]	@ (80025c4 <HAL_RCC_OscConfig+0x938>)
 8002318:	4413      	add	r3, r2
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	461a      	mov	r2, r3
 800231e:	2301      	movs	r3, #1
 8002320:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002322:	f7fe fa7b 	bl	800081c <HAL_GetTick>
 8002326:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800232c:	f7fe fa76 	bl	800081c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d902      	bls.n	8002342 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	f000 bcdb 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8002342:	2302      	movs	r3, #2
 8002344:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002348:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002354:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002358:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800235c:	2202      	movs	r2, #2
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002364:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	fa93 f2a3 	rbit	r2, r3
 800236e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002372:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800237c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002380:	2202      	movs	r2, #2
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002388:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	fa93 f2a3 	rbit	r2, r3
 8002392:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002396:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800239a:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800239c:	4b88      	ldr	r3, [pc, #544]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 800239e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80023a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023a4:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80023a8:	2102      	movs	r1, #2
 80023aa:	6019      	str	r1, [r3, #0]
 80023ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023b0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	fa93 f1a3 	rbit	r1, r3
 80023ba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023be:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023c2:	6019      	str	r1, [r3, #0]
  return result;
 80023c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023c8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	fab3 f383 	clz	r3, r3
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	f003 031f 	and.w	r3, r3, #31
 80023de:	2101      	movs	r1, #1
 80023e0:	fa01 f303 	lsl.w	r3, r1, r3
 80023e4:	4013      	ands	r3, r2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d0a0      	beq.n	800232c <HAL_RCC_OscConfig+0x6a0>
 80023ea:	e08d      	b.n	8002508 <HAL_RCC_OscConfig+0x87c>
 80023ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023f0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80023f4:	2201      	movs	r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023fc:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	fa93 f2a3 	rbit	r2, r3
 8002406:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800240a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800240e:	601a      	str	r2, [r3, #0]
  return result;
 8002410:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002414:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002418:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241a:	fab3 f383 	clz	r3, r3
 800241e:	b2db      	uxtb	r3, r3
 8002420:	461a      	mov	r2, r3
 8002422:	4b68      	ldr	r3, [pc, #416]	@ (80025c4 <HAL_RCC_OscConfig+0x938>)
 8002424:	4413      	add	r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	461a      	mov	r2, r3
 800242a:	2300      	movs	r3, #0
 800242c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800242e:	f7fe f9f5 	bl	800081c <HAL_GetTick>
 8002432:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002436:	e00a      	b.n	800244e <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002438:	f7fe f9f0 	bl	800081c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d902      	bls.n	800244e <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	f000 bc55 	b.w	8002cf8 <HAL_RCC_OscConfig+0x106c>
 800244e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002452:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002456:	2202      	movs	r2, #2
 8002458:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800245e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	fa93 f2a3 	rbit	r2, r3
 8002468:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002470:	601a      	str	r2, [r3, #0]
 8002472:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002476:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800247a:	2202      	movs	r2, #2
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002482:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	fa93 f2a3 	rbit	r2, r3
 800248c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002490:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800249a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800249e:	2202      	movs	r2, #2
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a6:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	fa93 f2a3 	rbit	r2, r3
 80024b0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024b4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80024b8:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ba:	4b41      	ldr	r3, [pc, #260]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 80024bc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024be:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024c2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024c6:	2102      	movs	r1, #2
 80024c8:	6019      	str	r1, [r3, #0]
 80024ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024ce:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	fa93 f1a3 	rbit	r1, r3
 80024d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024dc:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024e0:	6019      	str	r1, [r3, #0]
  return result;
 80024e2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024e6:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	fab3 f383 	clz	r3, r3
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80024f6:	b2db      	uxtb	r3, r3
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2101      	movs	r1, #1
 80024fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002502:	4013      	ands	r3, r2
 8002504:	2b00      	cmp	r3, #0
 8002506:	d197      	bne.n	8002438 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002508:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800250c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0304 	and.w	r3, r3, #4
 8002518:	2b00      	cmp	r3, #0
 800251a:	f000 81a1 	beq.w	8002860 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800251e:	2300      	movs	r3, #0
 8002520:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002524:	4b26      	ldr	r3, [pc, #152]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 8002526:	69db      	ldr	r3, [r3, #28]
 8002528:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d116      	bne.n	800255e <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002530:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	4a22      	ldr	r2, [pc, #136]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 8002536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800253a:	61d3      	str	r3, [r2, #28]
 800253c:	4b20      	ldr	r3, [pc, #128]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 800253e:	69db      	ldr	r3, [r3, #28]
 8002540:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8002544:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002548:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 800254c:	601a      	str	r2, [r3, #0]
 800254e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002552:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8002556:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002558:	2301      	movs	r3, #1
 800255a:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800255e:	4b1a      	ldr	r3, [pc, #104]	@ (80025c8 <HAL_RCC_OscConfig+0x93c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d11a      	bne.n	80025a0 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256a:	4b17      	ldr	r3, [pc, #92]	@ (80025c8 <HAL_RCC_OscConfig+0x93c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a16      	ldr	r2, [pc, #88]	@ (80025c8 <HAL_RCC_OscConfig+0x93c>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002574:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7fe f951 	bl	800081c <HAL_GetTick>
 800257a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800257e:	e009      	b.n	8002594 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002580:	f7fe f94c 	bl	800081c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800258a:	1ad3      	subs	r3, r2, r3
 800258c:	2b64      	cmp	r3, #100	@ 0x64
 800258e:	d901      	bls.n	8002594 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e3b1      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <HAL_RCC_OscConfig+0x93c>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800259c:	2b00      	cmp	r3, #0
 800259e:	d0ef      	beq.n	8002580 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025a4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d10d      	bne.n	80025cc <HAL_RCC_OscConfig+0x940>
 80025b0:	4b03      	ldr	r3, [pc, #12]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 80025b2:	6a1b      	ldr	r3, [r3, #32]
 80025b4:	4a02      	ldr	r2, [pc, #8]	@ (80025c0 <HAL_RCC_OscConfig+0x934>)
 80025b6:	f043 0301 	orr.w	r3, r3, #1
 80025ba:	6213      	str	r3, [r2, #32]
 80025bc:	e03c      	b.n	8002638 <HAL_RCC_OscConfig+0x9ac>
 80025be:	bf00      	nop
 80025c0:	40021000 	.word	0x40021000
 80025c4:	10908120 	.word	0x10908120
 80025c8:	40007000 	.word	0x40007000
 80025cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025d0:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x96a>
 80025dc:	4bc1      	ldr	r3, [pc, #772]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	4ac0      	ldr	r2, [pc, #768]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	6213      	str	r3, [r2, #32]
 80025e8:	4bbe      	ldr	r3, [pc, #760]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80025ea:	6a1b      	ldr	r3, [r3, #32]
 80025ec:	4abd      	ldr	r2, [pc, #756]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80025ee:	f023 0304 	bic.w	r3, r3, #4
 80025f2:	6213      	str	r3, [r2, #32]
 80025f4:	e020      	b.n	8002638 <HAL_RCC_OscConfig+0x9ac>
 80025f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80025fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	2b05      	cmp	r3, #5
 8002604:	d10c      	bne.n	8002620 <HAL_RCC_OscConfig+0x994>
 8002606:	4bb7      	ldr	r3, [pc, #732]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	4ab6      	ldr	r2, [pc, #728]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 800260c:	f043 0304 	orr.w	r3, r3, #4
 8002610:	6213      	str	r3, [r2, #32]
 8002612:	4bb4      	ldr	r3, [pc, #720]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4ab3      	ldr	r2, [pc, #716]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002618:	f043 0301 	orr.w	r3, r3, #1
 800261c:	6213      	str	r3, [r2, #32]
 800261e:	e00b      	b.n	8002638 <HAL_RCC_OscConfig+0x9ac>
 8002620:	4bb0      	ldr	r3, [pc, #704]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002622:	6a1b      	ldr	r3, [r3, #32]
 8002624:	4aaf      	ldr	r2, [pc, #700]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	6213      	str	r3, [r2, #32]
 800262c:	4bad      	ldr	r3, [pc, #692]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	4aac      	ldr	r2, [pc, #688]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002632:	f023 0304 	bic.w	r3, r3, #4
 8002636:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800263c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	2b00      	cmp	r3, #0
 8002646:	f000 8081 	beq.w	800274c <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800264a:	f7fe f8e7 	bl	800081c <HAL_GetTick>
 800264e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002652:	e00b      	b.n	800266c <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002654:	f7fe f8e2 	bl	800081c <HAL_GetTick>
 8002658:	4602      	mov	r2, r0
 800265a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800265e:	1ad3      	subs	r3, r2, r3
 8002660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002664:	4293      	cmp	r3, r2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e345      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
 800266c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002670:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002674:	2202      	movs	r2, #2
 8002676:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002678:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800267c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	fa93 f2a3 	rbit	r2, r3
 8002686:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800268a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002694:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8002698:	2202      	movs	r2, #2
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026a0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	fa93 f2a3 	rbit	r2, r3
 80026aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026ae:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80026b2:	601a      	str	r2, [r3, #0]
  return result;
 80026b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026b8:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80026bc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026be:	fab3 f383 	clz	r3, r3
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	f043 0302 	orr.w	r3, r3, #2
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d102      	bne.n	80026d8 <HAL_RCC_OscConfig+0xa4c>
 80026d2:	4b84      	ldr	r3, [pc, #528]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	e013      	b.n	8002700 <HAL_RCC_OscConfig+0xa74>
 80026d8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026dc:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026e0:	2202      	movs	r2, #2
 80026e2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026e8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	fa93 f2a3 	rbit	r2, r3
 80026f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80026f6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80026fa:	601a      	str	r2, [r3, #0]
 80026fc:	4b79      	ldr	r3, [pc, #484]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80026fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002700:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002704:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002708:	2102      	movs	r1, #2
 800270a:	6011      	str	r1, [r2, #0]
 800270c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002710:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8002714:	6812      	ldr	r2, [r2, #0]
 8002716:	fa92 f1a2 	rbit	r1, r2
 800271a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800271e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002722:	6011      	str	r1, [r2, #0]
  return result;
 8002724:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002728:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800272c:	6812      	ldr	r2, [r2, #0]
 800272e:	fab2 f282 	clz	r2, r2
 8002732:	b2d2      	uxtb	r2, r2
 8002734:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002738:	b2d2      	uxtb	r2, r2
 800273a:	f002 021f 	and.w	r2, r2, #31
 800273e:	2101      	movs	r1, #1
 8002740:	fa01 f202 	lsl.w	r2, r1, r2
 8002744:	4013      	ands	r3, r2
 8002746:	2b00      	cmp	r3, #0
 8002748:	d084      	beq.n	8002654 <HAL_RCC_OscConfig+0x9c8>
 800274a:	e07f      	b.n	800284c <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800274c:	f7fe f866 	bl	800081c <HAL_GetTick>
 8002750:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002754:	e00b      	b.n	800276e <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002756:	f7fe f861 	bl	800081c <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e2c4      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
 800276e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002772:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002776:	2202      	movs	r2, #2
 8002778:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800277e:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	fa93 f2a3 	rbit	r2, r3
 8002788:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800278c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002796:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800279a:	2202      	movs	r2, #2
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027a2:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	fa93 f2a3 	rbit	r2, r3
 80027ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027b0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027b4:	601a      	str	r2, [r3, #0]
  return result;
 80027b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ba:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80027be:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027c0:	fab3 f383 	clz	r3, r3
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	f043 0302 	orr.w	r3, r3, #2
 80027ce:	b2db      	uxtb	r3, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d102      	bne.n	80027da <HAL_RCC_OscConfig+0xb4e>
 80027d4:	4b43      	ldr	r3, [pc, #268]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	e013      	b.n	8002802 <HAL_RCC_OscConfig+0xb76>
 80027da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027de:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027e2:	2202      	movs	r2, #2
 80027e4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027ea:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	fa93 f2a3 	rbit	r2, r3
 80027f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80027f8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	4b39      	ldr	r3, [pc, #228]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002802:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002806:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800280a:	2102      	movs	r1, #2
 800280c:	6011      	str	r1, [r2, #0]
 800280e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002812:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8002816:	6812      	ldr	r2, [r2, #0]
 8002818:	fa92 f1a2 	rbit	r1, r2
 800281c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002820:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002824:	6011      	str	r1, [r2, #0]
  return result;
 8002826:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800282a:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800282e:	6812      	ldr	r2, [r2, #0]
 8002830:	fab2 f282 	clz	r2, r2
 8002834:	b2d2      	uxtb	r2, r2
 8002836:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	f002 021f 	and.w	r2, r2, #31
 8002840:	2101      	movs	r1, #1
 8002842:	fa01 f202 	lsl.w	r2, r1, r2
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d184      	bne.n	8002756 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800284c:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 8002850:	2b01      	cmp	r3, #1
 8002852:	d105      	bne.n	8002860 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002854:	4b23      	ldr	r3, [pc, #140]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002856:	69db      	ldr	r3, [r3, #28]
 8002858:	4a22      	ldr	r2, [pc, #136]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 800285a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800285e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002860:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002864:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	69db      	ldr	r3, [r3, #28]
 800286c:	2b00      	cmp	r3, #0
 800286e:	f000 8242 	beq.w	8002cf6 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002872:	4b1c      	ldr	r3, [pc, #112]	@ (80028e4 <HAL_RCC_OscConfig+0xc58>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b08      	cmp	r3, #8
 800287c:	f000 8213 	beq.w	8002ca6 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002880:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002884:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	2b02      	cmp	r3, #2
 800288e:	f040 8162 	bne.w	8002b56 <HAL_RCC_OscConfig+0xeca>
 8002892:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002896:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 800289a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800289e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028a4:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	fa93 f2a3 	rbit	r2, r3
 80028ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028b2:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028b6:	601a      	str	r2, [r3, #0]
  return result;
 80028b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80028bc:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80028c0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c2:	fab3 f383 	clz	r3, r3
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80028cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	461a      	mov	r2, r3
 80028d4:	2300      	movs	r3, #0
 80028d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7fd ffa0 	bl	800081c <HAL_GetTick>
 80028dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e0:	e00c      	b.n	80028fc <HAL_RCC_OscConfig+0xc70>
 80028e2:	bf00      	nop
 80028e4:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e8:	f7fd ff98 	bl	800081c <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e1fd      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
 80028fc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002900:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002904:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002908:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800290a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	fa93 f2a3 	rbit	r2, r3
 8002918:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800291c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002920:	601a      	str	r2, [r3, #0]
  return result;
 8002922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002926:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800292a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800292c:	fab3 f383 	clz	r3, r3
 8002930:	b2db      	uxtb	r3, r3
 8002932:	095b      	lsrs	r3, r3, #5
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b01      	cmp	r3, #1
 800293e:	d102      	bne.n	8002946 <HAL_RCC_OscConfig+0xcba>
 8002940:	4bb0      	ldr	r3, [pc, #704]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	e027      	b.n	8002996 <HAL_RCC_OscConfig+0xd0a>
 8002946:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800294a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800294e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002952:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002954:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002958:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	fa93 f2a3 	rbit	r2, r3
 8002962:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002966:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002970:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002974:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800297e:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	fa93 f2a3 	rbit	r2, r3
 8002988:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800298c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002990:	601a      	str	r2, [r3, #0]
 8002992:	4b9c      	ldr	r3, [pc, #624]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800299a:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 800299e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80029a2:	6011      	str	r1, [r2, #0]
 80029a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029a8:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80029ac:	6812      	ldr	r2, [r2, #0]
 80029ae:	fa92 f1a2 	rbit	r1, r2
 80029b2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029b6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80029ba:	6011      	str	r1, [r2, #0]
  return result;
 80029bc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80029c0:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	fab2 f282 	clz	r2, r2
 80029ca:	b2d2      	uxtb	r2, r2
 80029cc:	f042 0220 	orr.w	r2, r2, #32
 80029d0:	b2d2      	uxtb	r2, r2
 80029d2:	f002 021f 	and.w	r2, r2, #31
 80029d6:	2101      	movs	r1, #1
 80029d8:	fa01 f202 	lsl.w	r2, r1, r2
 80029dc:	4013      	ands	r3, r2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d182      	bne.n	80028e8 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029e2:	4b88      	ldr	r3, [pc, #544]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80029ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ee:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80029f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029fa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	430b      	orrs	r3, r1
 8002a04:	497f      	ldr	r1, [pc, #508]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 8002a06:	4313      	orrs	r3, r2
 8002a08:	604b      	str	r3, [r1, #4]
 8002a0a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a0e:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a12:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002a16:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a1c:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	fa93 f2a3 	rbit	r2, r3
 8002a26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a2a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a2e:	601a      	str	r2, [r3, #0]
  return result;
 8002a30:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a34:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002a38:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a3a:	fab3 f383 	clz	r3, r3
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002a44:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fd fee4 	bl	800081c <HAL_GetTick>
 8002a54:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a58:	e009      	b.n	8002a6e <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7fd fedf 	bl	800081c <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e144      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8002a6e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a72:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a76:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a7a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a80:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	fa93 f2a3 	rbit	r2, r3
 8002a8a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a8e:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a92:	601a      	str	r2, [r3, #0]
  return result;
 8002a94:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002a98:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002a9c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a9e:	fab3 f383 	clz	r3, r3
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	095b      	lsrs	r3, r3, #5
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d102      	bne.n	8002ab8 <HAL_RCC_OscConfig+0xe2c>
 8002ab2:	4b54      	ldr	r3, [pc, #336]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	e027      	b.n	8002b08 <HAL_RCC_OscConfig+0xe7c>
 8002ab8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002abc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ac0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002ac4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ac6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002aca:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	fa93 f2a3 	rbit	r2, r3
 8002ad4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ad8:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002adc:	601a      	str	r2, [r3, #0]
 8002ade:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ae2:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002ae6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002af0:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	fa93 f2a3 	rbit	r2, r3
 8002afa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002afe:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	4b3f      	ldr	r3, [pc, #252]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 8002b06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b08:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b0c:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b10:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002b14:	6011      	str	r1, [r2, #0]
 8002b16:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b1a:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	fa92 f1a2 	rbit	r1, r2
 8002b24:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b28:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b2c:	6011      	str	r1, [r2, #0]
  return result;
 8002b2e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002b32:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002b36:	6812      	ldr	r2, [r2, #0]
 8002b38:	fab2 f282 	clz	r2, r2
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	f042 0220 	orr.w	r2, r2, #32
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	f002 021f 	and.w	r2, r2, #31
 8002b48:	2101      	movs	r1, #1
 8002b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d082      	beq.n	8002a5a <HAL_RCC_OscConfig+0xdce>
 8002b54:	e0cf      	b.n	8002cf6 <HAL_RCC_OscConfig+0x106a>
 8002b56:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b5a:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b5e:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b68:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	fa93 f2a3 	rbit	r2, r3
 8002b72:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b76:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b7a:	601a      	str	r2, [r3, #0]
  return result;
 8002b7c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b80:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002b84:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b86:	fab3 f383 	clz	r3, r3
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	461a      	mov	r2, r3
 8002b98:	2300      	movs	r3, #0
 8002b9a:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9c:	f7fd fe3e 	bl	800081c <HAL_GetTick>
 8002ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ba4:	e009      	b.n	8002bba <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba6:	f7fd fe39 	bl	800081c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e09e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
 8002bba:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bbe:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002bc2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bcc:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	fa93 f2a3 	rbit	r2, r3
 8002bd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002bda:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002bde:	601a      	str	r2, [r3, #0]
  return result;
 8002be0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002be4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002be8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bea:	fab3 f383 	clz	r3, r3
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	095b      	lsrs	r3, r3, #5
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	f043 0301 	orr.w	r3, r3, #1
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d104      	bne.n	8002c08 <HAL_RCC_OscConfig+0xf7c>
 8002bfe:	4b01      	ldr	r3, [pc, #4]	@ (8002c04 <HAL_RCC_OscConfig+0xf78>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	e029      	b.n	8002c58 <HAL_RCC_OscConfig+0xfcc>
 8002c04:	40021000 	.word	0x40021000
 8002c08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c0c:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c1a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	fa93 f2a3 	rbit	r2, r3
 8002c24:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c28:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c32:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c36:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c3a:	601a      	str	r2, [r3, #0]
 8002c3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c40:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	fa93 f2a3 	rbit	r2, r3
 8002c4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c4e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	4b2b      	ldr	r3, [pc, #172]	@ (8002d04 <HAL_RCC_OscConfig+0x1078>)
 8002c56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c58:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c5c:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c60:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c64:	6011      	str	r1, [r2, #0]
 8002c66:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c6a:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	fa92 f1a2 	rbit	r1, r2
 8002c74:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c78:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c7c:	6011      	str	r1, [r2, #0]
  return result;
 8002c7e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002c82:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002c86:	6812      	ldr	r2, [r2, #0]
 8002c88:	fab2 f282 	clz	r2, r2
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	f042 0220 	orr.w	r2, r2, #32
 8002c92:	b2d2      	uxtb	r2, r2
 8002c94:	f002 021f 	and.w	r2, r2, #31
 8002c98:	2101      	movs	r1, #1
 8002c9a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d180      	bne.n	8002ba6 <HAL_RCC_OscConfig+0xf1a>
 8002ca4:	e027      	b.n	8002cf6 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ca6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002caa:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e01e      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002cba:	4b12      	ldr	r3, [pc, #72]	@ (8002d04 <HAL_RCC_OscConfig+0x1078>)
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cc2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cc6:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002cca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002cce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6a1b      	ldr	r3, [r3, #32]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d10b      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002cda:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002cde:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002ce2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ce6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d001      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e000      	b.n	8002cf8 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002cf6:	2300      	movs	r3, #0
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}
 8002d02:	bf00      	nop
 8002d04:	40021000 	.word	0x40021000

08002d08 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b09e      	sub	sp, #120	@ 0x78
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e162      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d20:	4b90      	ldr	r3, [pc, #576]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f003 0307 	and.w	r3, r3, #7
 8002d28:	683a      	ldr	r2, [r7, #0]
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d910      	bls.n	8002d50 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d2e:	4b8d      	ldr	r3, [pc, #564]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 0207 	bic.w	r2, r3, #7
 8002d36:	498b      	ldr	r1, [pc, #556]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d3e:	4b89      	ldr	r3, [pc, #548]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0307 	and.w	r3, r3, #7
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e14a      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d008      	beq.n	8002d6e <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d5c:	4b82      	ldr	r3, [pc, #520]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	497f      	ldr	r1, [pc, #508]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80dc 	beq.w	8002f34 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d13c      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xf6>
 8002d84:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002d88:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002d8c:	fa93 f3a3 	rbit	r3, r3
 8002d90:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002d92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d94:	fab3 f383 	clz	r3, r3
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	f043 0301 	orr.w	r3, r3, #1
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d102      	bne.n	8002dae <HAL_RCC_ClockConfig+0xa6>
 8002da8:	4b6f      	ldr	r3, [pc, #444]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	e00f      	b.n	8002dce <HAL_RCC_ClockConfig+0xc6>
 8002dae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002db2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002db6:	fa93 f3a3 	rbit	r3, r3
 8002dba:	667b      	str	r3, [r7, #100]	@ 0x64
 8002dbc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002dc0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002dc2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002dc4:	fa93 f3a3 	rbit	r3, r3
 8002dc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002dca:	4b67      	ldr	r3, [pc, #412]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dce:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002dd2:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002dd4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002dd6:	fa92 f2a2 	rbit	r2, r2
 8002dda:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002ddc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002dde:	fab2 f282 	clz	r2, r2
 8002de2:	b2d2      	uxtb	r2, r2
 8002de4:	f042 0220 	orr.w	r2, r2, #32
 8002de8:	b2d2      	uxtb	r2, r2
 8002dea:	f002 021f 	and.w	r2, r2, #31
 8002dee:	2101      	movs	r1, #1
 8002df0:	fa01 f202 	lsl.w	r2, r1, r2
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d17b      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0f3      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d13c      	bne.n	8002e80 <HAL_RCC_ClockConfig+0x178>
 8002e06:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e0a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e0e:	fa93 f3a3 	rbit	r3, r3
 8002e12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	095b      	lsrs	r3, r3, #5
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	f043 0301 	orr.w	r3, r3, #1
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b01      	cmp	r3, #1
 8002e28:	d102      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x128>
 8002e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	e00f      	b.n	8002e50 <HAL_RCC_ClockConfig+0x148>
 8002e30:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e34:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002e38:	fa93 f3a3 	rbit	r3, r3
 8002e3c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e42:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e4c:	4b46      	ldr	r3, [pc, #280]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e54:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002e56:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002e58:	fa92 f2a2 	rbit	r2, r2
 8002e5c:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002e5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e60:	fab2 f282 	clz	r2, r2
 8002e64:	b2d2      	uxtb	r2, r2
 8002e66:	f042 0220 	orr.w	r2, r2, #32
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	f002 021f 	and.w	r2, r2, #31
 8002e70:	2101      	movs	r1, #1
 8002e72:	fa01 f202 	lsl.w	r2, r1, r2
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d13a      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e0b2      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
 8002e80:	2302      	movs	r3, #2
 8002e82:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e86:	fa93 f3a3 	rbit	r3, r3
 8002e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e8e:	fab3 f383 	clz	r3, r3
 8002e92:	b2db      	uxtb	r3, r3
 8002e94:	095b      	lsrs	r3, r3, #5
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	f043 0301 	orr.w	r3, r3, #1
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b01      	cmp	r3, #1
 8002ea0:	d102      	bne.n	8002ea8 <HAL_RCC_ClockConfig+0x1a0>
 8002ea2:	4b31      	ldr	r3, [pc, #196]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	e00d      	b.n	8002ec4 <HAL_RCC_ClockConfig+0x1bc>
 8002ea8:	2302      	movs	r3, #2
 8002eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002eae:	fa93 f3a3 	rbit	r3, r3
 8002eb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002eb4:	2302      	movs	r3, #2
 8002eb6:	623b      	str	r3, [r7, #32]
 8002eb8:	6a3b      	ldr	r3, [r7, #32]
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	61fb      	str	r3, [r7, #28]
 8002ec0:	4b29      	ldr	r3, [pc, #164]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	2202      	movs	r2, #2
 8002ec6:	61ba      	str	r2, [r7, #24]
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	fa92 f2a2 	rbit	r2, r2
 8002ece:	617a      	str	r2, [r7, #20]
  return result;
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	fab2 f282 	clz	r2, r2
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	f042 0220 	orr.w	r2, r2, #32
 8002edc:	b2d2      	uxtb	r2, r2
 8002ede:	f002 021f 	and.w	r2, r2, #31
 8002ee2:	2101      	movs	r1, #1
 8002ee4:	fa01 f202 	lsl.w	r2, r1, r2
 8002ee8:	4013      	ands	r3, r2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e079      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ef2:	4b1d      	ldr	r3, [pc, #116]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	f023 0203 	bic.w	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	491a      	ldr	r1, [pc, #104]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f04:	f7fd fc8a 	bl	800081c <HAL_GetTick>
 8002f08:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f0a:	e00a      	b.n	8002f22 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f0c:	f7fd fc86 	bl	800081c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d901      	bls.n	8002f22 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	e061      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f22:	4b11      	ldr	r3, [pc, #68]	@ (8002f68 <HAL_RCC_ClockConfig+0x260>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 020c 	and.w	r2, r3, #12
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	429a      	cmp	r2, r3
 8002f32:	d1eb      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f34:	4b0b      	ldr	r3, [pc, #44]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	429a      	cmp	r2, r3
 8002f40:	d214      	bcs.n	8002f6c <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f42:	4b08      	ldr	r3, [pc, #32]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f023 0207 	bic.w	r2, r3, #7
 8002f4a:	4906      	ldr	r1, [pc, #24]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f52:	4b04      	ldr	r3, [pc, #16]	@ (8002f64 <HAL_RCC_ClockConfig+0x25c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	683a      	ldr	r2, [r7, #0]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	d005      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e040      	b.n	8002fe6 <HAL_RCC_ClockConfig+0x2de>
 8002f64:	40022000 	.word	0x40022000
 8002f68:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f78:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	68db      	ldr	r3, [r3, #12]
 8002f84:	491a      	ldr	r1, [pc, #104]	@ (8002ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0308 	and.w	r3, r3, #8
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f96:	4b16      	ldr	r3, [pc, #88]	@ (8002ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	00db      	lsls	r3, r3, #3
 8002fa4:	4912      	ldr	r1, [pc, #72]	@ (8002ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002faa:	f000 f829 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 8002fae:	4601      	mov	r1, r0
 8002fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8002ff0 <HAL_RCC_ClockConfig+0x2e8>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fb8:	22f0      	movs	r2, #240	@ 0xf0
 8002fba:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fbc:	693a      	ldr	r2, [r7, #16]
 8002fbe:	fa92 f2a2 	rbit	r2, r2
 8002fc2:	60fa      	str	r2, [r7, #12]
  return result;
 8002fc4:	68fa      	ldr	r2, [r7, #12]
 8002fc6:	fab2 f282 	clz	r2, r2
 8002fca:	b2d2      	uxtb	r2, r2
 8002fcc:	40d3      	lsrs	r3, r2
 8002fce:	4a09      	ldr	r2, [pc, #36]	@ (8002ff4 <HAL_RCC_ClockConfig+0x2ec>)
 8002fd0:	5cd3      	ldrb	r3, [r2, r3]
 8002fd2:	fa21 f303 	lsr.w	r3, r1, r3
 8002fd6:	4a08      	ldr	r2, [pc, #32]	@ (8002ff8 <HAL_RCC_ClockConfig+0x2f0>)
 8002fd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002fda:	4b08      	ldr	r3, [pc, #32]	@ (8002ffc <HAL_RCC_ClockConfig+0x2f4>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fbd8 	bl	8000794 <HAL_InitTick>
  
  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3778      	adds	r7, #120	@ 0x78
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	080038f8 	.word	0x080038f8
 8002ff8:	20000000 	.word	0x20000000
 8002ffc:	20000004 	.word	0x20000004

08003000 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003000:	b480      	push	{r7}
 8003002:	b087      	sub	sp, #28
 8003004:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003006:	2300      	movs	r3, #0
 8003008:	60fb      	str	r3, [r7, #12]
 800300a:	2300      	movs	r3, #0
 800300c:	60bb      	str	r3, [r7, #8]
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	2300      	movs	r3, #0
 8003014:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800301a:	4b1e      	ldr	r3, [pc, #120]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x94>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	f003 030c 	and.w	r3, r3, #12
 8003026:	2b04      	cmp	r3, #4
 8003028:	d002      	beq.n	8003030 <HAL_RCC_GetSysClockFreq+0x30>
 800302a:	2b08      	cmp	r3, #8
 800302c:	d003      	beq.n	8003036 <HAL_RCC_GetSysClockFreq+0x36>
 800302e:	e026      	b.n	800307e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003030:	4b19      	ldr	r3, [pc, #100]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 8003032:	613b      	str	r3, [r7, #16]
      break;
 8003034:	e026      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	0c9b      	lsrs	r3, r3, #18
 800303a:	f003 030f 	and.w	r3, r3, #15
 800303e:	4a17      	ldr	r2, [pc, #92]	@ (800309c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003040:	5cd3      	ldrb	r3, [r2, r3]
 8003042:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003044:	4b13      	ldr	r3, [pc, #76]	@ (8003094 <HAL_RCC_GetSysClockFreq+0x94>)
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	f003 030f 	and.w	r3, r3, #15
 800304c:	4a14      	ldr	r2, [pc, #80]	@ (80030a0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800304e:	5cd3      	ldrb	r3, [r2, r3]
 8003050:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d008      	beq.n	800306e <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800305c:	4a0e      	ldr	r2, [pc, #56]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	fbb2 f2f3 	udiv	r2, r2, r3
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	fb02 f303 	mul.w	r3, r2, r3
 800306a:	617b      	str	r3, [r7, #20]
 800306c:	e004      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a0c      	ldr	r2, [pc, #48]	@ (80030a4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003072:	fb02 f303 	mul.w	r3, r2, r3
 8003076:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	613b      	str	r3, [r7, #16]
      break;
 800307c:	e002      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800307e:	4b06      	ldr	r3, [pc, #24]	@ (8003098 <HAL_RCC_GetSysClockFreq+0x98>)
 8003080:	613b      	str	r3, [r7, #16]
      break;
 8003082:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003084:	693b      	ldr	r3, [r7, #16]
}
 8003086:	4618      	mov	r0, r3
 8003088:	371c      	adds	r7, #28
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	40021000 	.word	0x40021000
 8003098:	007a1200 	.word	0x007a1200
 800309c:	08003910 	.word	0x08003910
 80030a0:	08003920 	.word	0x08003920
 80030a4:	003d0900 	.word	0x003d0900

080030a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030ac:	4b03      	ldr	r3, [pc, #12]	@ (80030bc <HAL_RCC_GetHCLKFreq+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000000 	.word	0x20000000

080030c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80030c6:	f7ff ffef 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 80030ca:	4601      	mov	r1, r0
 80030cc:	4b0b      	ldr	r3, [pc, #44]	@ (80030fc <HAL_RCC_GetPCLK1Freq+0x3c>)
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80030d4:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80030d8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	fa92 f2a2 	rbit	r2, r2
 80030e0:	603a      	str	r2, [r7, #0]
  return result;
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	fab2 f282 	clz	r2, r2
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	40d3      	lsrs	r3, r2
 80030ec:	4a04      	ldr	r2, [pc, #16]	@ (8003100 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030ee:	5cd3      	ldrb	r3, [r2, r3]
 80030f0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030f4:	4618      	mov	r0, r3
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	40021000 	.word	0x40021000
 8003100:	08003908 	.word	0x08003908

08003104 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800310a:	f7ff ffcd 	bl	80030a8 <HAL_RCC_GetHCLKFreq>
 800310e:	4601      	mov	r1, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	@ (8003140 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003118:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800311c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	fa92 f2a2 	rbit	r2, r2
 8003124:	603a      	str	r2, [r7, #0]
  return result;
 8003126:	683a      	ldr	r2, [r7, #0]
 8003128:	fab2 f282 	clz	r2, r2
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	40d3      	lsrs	r3, r2
 8003130:	4a04      	ldr	r2, [pc, #16]	@ (8003144 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003138:	4618      	mov	r0, r3
 800313a:	3708      	adds	r7, #8
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000
 8003144:	08003908 	.word	0x08003908

08003148 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e040      	b.n	80031dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fd fa3a 	bl	80005e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2224      	movs	r2, #36	@ 0x24
 8003174:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 0201 	bic.w	r2, r2, #1
 8003184:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 f95e 	bl	8003450 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f825 	bl	80031e4 <UART_SetConfig>
 800319a:	4603      	mov	r3, r0
 800319c:	2b01      	cmp	r3, #1
 800319e:	d101      	bne.n	80031a4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	e01b      	b.n	80031dc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	685a      	ldr	r2, [r3, #4]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80031b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80031c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f042 0201 	orr.w	r2, r2, #1
 80031d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031d4:	6878      	ldr	r0, [r7, #4]
 80031d6:	f000 f9dd 	bl	8003594 <UART_CheckIdleState>
 80031da:	4603      	mov	r3, r0
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3708      	adds	r7, #8
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bd80      	pop	{r7, pc}

080031e4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b088      	sub	sp, #32
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4313      	orrs	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	4b8a      	ldr	r3, [pc, #552]	@ (8003438 <UART_SetConfig+0x254>)
 8003210:	4013      	ands	r3, r2
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	6812      	ldr	r2, [r2, #0]
 8003216:	6979      	ldr	r1, [r7, #20]
 8003218:	430b      	orrs	r3, r1
 800321a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	430a      	orrs	r2, r1
 8003230:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	699b      	ldr	r3, [r3, #24]
 8003236:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	697a      	ldr	r2, [r7, #20]
 800323e:	4313      	orrs	r3, r2
 8003240:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	430a      	orrs	r2, r1
 8003254:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a78      	ldr	r2, [pc, #480]	@ (800343c <UART_SetConfig+0x258>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d120      	bne.n	80032a2 <UART_SetConfig+0xbe>
 8003260:	4b77      	ldr	r3, [pc, #476]	@ (8003440 <UART_SetConfig+0x25c>)
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	f003 0303 	and.w	r3, r3, #3
 8003268:	2b03      	cmp	r3, #3
 800326a:	d817      	bhi.n	800329c <UART_SetConfig+0xb8>
 800326c:	a201      	add	r2, pc, #4	@ (adr r2, 8003274 <UART_SetConfig+0x90>)
 800326e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003272:	bf00      	nop
 8003274:	08003285 	.word	0x08003285
 8003278:	08003291 	.word	0x08003291
 800327c:	08003297 	.word	0x08003297
 8003280:	0800328b 	.word	0x0800328b
 8003284:	2300      	movs	r3, #0
 8003286:	77fb      	strb	r3, [r7, #31]
 8003288:	e01d      	b.n	80032c6 <UART_SetConfig+0xe2>
 800328a:	2302      	movs	r3, #2
 800328c:	77fb      	strb	r3, [r7, #31]
 800328e:	e01a      	b.n	80032c6 <UART_SetConfig+0xe2>
 8003290:	2304      	movs	r3, #4
 8003292:	77fb      	strb	r3, [r7, #31]
 8003294:	e017      	b.n	80032c6 <UART_SetConfig+0xe2>
 8003296:	2308      	movs	r3, #8
 8003298:	77fb      	strb	r3, [r7, #31]
 800329a:	e014      	b.n	80032c6 <UART_SetConfig+0xe2>
 800329c:	2310      	movs	r3, #16
 800329e:	77fb      	strb	r3, [r7, #31]
 80032a0:	e011      	b.n	80032c6 <UART_SetConfig+0xe2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a67      	ldr	r2, [pc, #412]	@ (8003444 <UART_SetConfig+0x260>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d102      	bne.n	80032b2 <UART_SetConfig+0xce>
 80032ac:	2300      	movs	r3, #0
 80032ae:	77fb      	strb	r3, [r7, #31]
 80032b0:	e009      	b.n	80032c6 <UART_SetConfig+0xe2>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a64      	ldr	r2, [pc, #400]	@ (8003448 <UART_SetConfig+0x264>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d102      	bne.n	80032c2 <UART_SetConfig+0xde>
 80032bc:	2300      	movs	r3, #0
 80032be:	77fb      	strb	r3, [r7, #31]
 80032c0:	e001      	b.n	80032c6 <UART_SetConfig+0xe2>
 80032c2:	2310      	movs	r3, #16
 80032c4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80032ce:	d15a      	bne.n	8003386 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80032d0:	7ffb      	ldrb	r3, [r7, #31]
 80032d2:	2b08      	cmp	r3, #8
 80032d4:	d827      	bhi.n	8003326 <UART_SetConfig+0x142>
 80032d6:	a201      	add	r2, pc, #4	@ (adr r2, 80032dc <UART_SetConfig+0xf8>)
 80032d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032dc:	08003301 	.word	0x08003301
 80032e0:	08003309 	.word	0x08003309
 80032e4:	08003311 	.word	0x08003311
 80032e8:	08003327 	.word	0x08003327
 80032ec:	08003317 	.word	0x08003317
 80032f0:	08003327 	.word	0x08003327
 80032f4:	08003327 	.word	0x08003327
 80032f8:	08003327 	.word	0x08003327
 80032fc:	0800331f 	.word	0x0800331f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003300:	f7ff fede 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 8003304:	61b8      	str	r0, [r7, #24]
        break;
 8003306:	e013      	b.n	8003330 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003308:	f7ff fefc 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 800330c:	61b8      	str	r0, [r7, #24]
        break;
 800330e:	e00f      	b.n	8003330 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003310:	4b4e      	ldr	r3, [pc, #312]	@ (800344c <UART_SetConfig+0x268>)
 8003312:	61bb      	str	r3, [r7, #24]
        break;
 8003314:	e00c      	b.n	8003330 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003316:	f7ff fe73 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 800331a:	61b8      	str	r0, [r7, #24]
        break;
 800331c:	e008      	b.n	8003330 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800331e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003322:	61bb      	str	r3, [r7, #24]
        break;
 8003324:	e004      	b.n	8003330 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	77bb      	strb	r3, [r7, #30]
        break;
 800332e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d074      	beq.n	8003420 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	005a      	lsls	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	441a      	add	r2, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	fbb2 f3f3 	udiv	r3, r2, r3
 800334a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b0f      	cmp	r3, #15
 8003350:	d916      	bls.n	8003380 <UART_SetConfig+0x19c>
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003358:	d212      	bcs.n	8003380 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	b29b      	uxth	r3, r3
 800335e:	f023 030f 	bic.w	r3, r3, #15
 8003362:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	085b      	lsrs	r3, r3, #1
 8003368:	b29b      	uxth	r3, r3
 800336a:	f003 0307 	and.w	r3, r3, #7
 800336e:	b29a      	uxth	r2, r3
 8003370:	89fb      	ldrh	r3, [r7, #14]
 8003372:	4313      	orrs	r3, r2
 8003374:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	89fa      	ldrh	r2, [r7, #14]
 800337c:	60da      	str	r2, [r3, #12]
 800337e:	e04f      	b.n	8003420 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	77bb      	strb	r3, [r7, #30]
 8003384:	e04c      	b.n	8003420 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003386:	7ffb      	ldrb	r3, [r7, #31]
 8003388:	2b08      	cmp	r3, #8
 800338a:	d828      	bhi.n	80033de <UART_SetConfig+0x1fa>
 800338c:	a201      	add	r2, pc, #4	@ (adr r2, 8003394 <UART_SetConfig+0x1b0>)
 800338e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003392:	bf00      	nop
 8003394:	080033b9 	.word	0x080033b9
 8003398:	080033c1 	.word	0x080033c1
 800339c:	080033c9 	.word	0x080033c9
 80033a0:	080033df 	.word	0x080033df
 80033a4:	080033cf 	.word	0x080033cf
 80033a8:	080033df 	.word	0x080033df
 80033ac:	080033df 	.word	0x080033df
 80033b0:	080033df 	.word	0x080033df
 80033b4:	080033d7 	.word	0x080033d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033b8:	f7ff fe82 	bl	80030c0 <HAL_RCC_GetPCLK1Freq>
 80033bc:	61b8      	str	r0, [r7, #24]
        break;
 80033be:	e013      	b.n	80033e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033c0:	f7ff fea0 	bl	8003104 <HAL_RCC_GetPCLK2Freq>
 80033c4:	61b8      	str	r0, [r7, #24]
        break;
 80033c6:	e00f      	b.n	80033e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80033c8:	4b20      	ldr	r3, [pc, #128]	@ (800344c <UART_SetConfig+0x268>)
 80033ca:	61bb      	str	r3, [r7, #24]
        break;
 80033cc:	e00c      	b.n	80033e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80033ce:	f7ff fe17 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 80033d2:	61b8      	str	r0, [r7, #24]
        break;
 80033d4:	e008      	b.n	80033e8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80033da:	61bb      	str	r3, [r7, #24]
        break;
 80033dc:	e004      	b.n	80033e8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	77bb      	strb	r3, [r7, #30]
        break;
 80033e6:	bf00      	nop
    }

    if (pclk != 0U)
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d018      	beq.n	8003420 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	085a      	lsrs	r2, r3, #1
 80033f4:	69bb      	ldr	r3, [r7, #24]
 80033f6:	441a      	add	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685b      	ldr	r3, [r3, #4]
 80033fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003400:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	2b0f      	cmp	r3, #15
 8003406:	d909      	bls.n	800341c <UART_SetConfig+0x238>
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800340e:	d205      	bcs.n	800341c <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	b29a      	uxth	r2, r3
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60da      	str	r2, [r3, #12]
 800341a:	e001      	b.n	8003420 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2200      	movs	r2, #0
 800342a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800342c:	7fbb      	ldrb	r3, [r7, #30]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3720      	adds	r7, #32
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	efff69f3 	.word	0xefff69f3
 800343c:	40013800 	.word	0x40013800
 8003440:	40021000 	.word	0x40021000
 8003444:	40004400 	.word	0x40004400
 8003448:	40004800 	.word	0x40004800
 800344c:	007a1200 	.word	0x007a1200

08003450 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003450:	b480      	push	{r7}
 8003452:	b083      	sub	sp, #12
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034a0:	f003 0302 	and.w	r3, r3, #2
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034c2:	f003 0304 	and.w	r3, r3, #4
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034e4:	f003 0310 	and.w	r3, r3, #16
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003506:	f003 0320 	and.w	r3, r3, #32
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689b      	ldr	r3, [r3, #8]
 8003514:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d01a      	beq.n	8003566 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800354a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800354e:	d10a      	bne.n	8003566 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
  }
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b098      	sub	sp, #96	@ 0x60
 8003598:	af02      	add	r7, sp, #8
 800359a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80035a4:	f7fd f93a 	bl	800081c <HAL_GetTick>
 80035a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 0308 	and.w	r3, r3, #8
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d12e      	bne.n	8003616 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035c0:	2200      	movs	r2, #0
 80035c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f88c 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d021      	beq.n	8003616 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035da:	e853 3f00 	ldrex	r3, [r3]
 80035de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	461a      	mov	r2, r3
 80035ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80035f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80035f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035f8:	e841 2300 	strex	r3, r2, [r1]
 80035fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003600:	2b00      	cmp	r3, #0
 8003602:	d1e6      	bne.n	80035d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2220      	movs	r2, #32
 8003608:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e062      	b.n	80036dc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 0304 	and.w	r3, r3, #4
 8003620:	2b04      	cmp	r3, #4
 8003622:	d149      	bne.n	80036b8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003624:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362c:	2200      	movs	r2, #0
 800362e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f856 	bl	80036e4 <UART_WaitOnFlagUntilTimeout>
 8003638:	4603      	mov	r3, r0
 800363a:	2b00      	cmp	r3, #0
 800363c:	d03c      	beq.n	80036b8 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003646:	e853 3f00 	ldrex	r3, [r3]
 800364a:	623b      	str	r3, [r7, #32]
   return(result);
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003652:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	461a      	mov	r2, r3
 800365a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800365c:	633b      	str	r3, [r7, #48]	@ 0x30
 800365e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003660:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003664:	e841 2300 	strex	r3, r2, [r1]
 8003668:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800366a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1e6      	bne.n	800363e <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3308      	adds	r3, #8
 8003676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0301 	bic.w	r3, r3, #1
 8003686:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3308      	adds	r3, #8
 800368e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003690:	61fa      	str	r2, [r7, #28]
 8003692:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003694:	69b9      	ldr	r1, [r7, #24]
 8003696:	69fa      	ldr	r2, [r7, #28]
 8003698:	e841 2300 	strex	r3, r2, [r1]
 800369c:	617b      	str	r3, [r7, #20]
   return(result);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d1e5      	bne.n	8003670 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2220      	movs	r2, #32
 80036a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e011      	b.n	80036dc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2200      	movs	r2, #0
 80036d6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	3758      	adds	r7, #88	@ 0x58
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036f4:	e04f      	b.n	8003796 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036fc:	d04b      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036fe:	f7fd f88d 	bl	800081c <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	429a      	cmp	r2, r3
 800370c:	d302      	bcc.n	8003714 <UART_WaitOnFlagUntilTimeout+0x30>
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d101      	bne.n	8003718 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003714:	2303      	movs	r3, #3
 8003716:	e04e      	b.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0304 	and.w	r3, r3, #4
 8003722:	2b00      	cmp	r3, #0
 8003724:	d037      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b80      	cmp	r3, #128	@ 0x80
 800372a:	d034      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0xb2>
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b40      	cmp	r3, #64	@ 0x40
 8003730:	d031      	beq.n	8003796 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f003 0308 	and.w	r3, r3, #8
 800373c:	2b08      	cmp	r3, #8
 800373e:	d110      	bne.n	8003762 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2208      	movs	r2, #8
 8003746:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 f838 	bl	80037be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2208      	movs	r2, #8
 8003752:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2200      	movs	r2, #0
 800375a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e029      	b.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	69db      	ldr	r3, [r3, #28]
 8003768:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800376c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003770:	d111      	bne.n	8003796 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800377a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f000 f81e 	bl	80037be <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2220      	movs	r2, #32
 8003786:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003792:	2303      	movs	r3, #3
 8003794:	e00f      	b.n	80037b6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69da      	ldr	r2, [r3, #28]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	68ba      	ldr	r2, [r7, #8]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	bf0c      	ite	eq
 80037a6:	2301      	moveq	r3, #1
 80037a8:	2300      	movne	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d0a0      	beq.n	80036f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037be:	b480      	push	{r7}
 80037c0:	b095      	sub	sp, #84	@ 0x54
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	461a      	mov	r2, r3
 80037e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037e4:	643b      	str	r3, [r7, #64]	@ 0x40
 80037e6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e6      	bne.n	80037c6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	3308      	adds	r3, #8
 80037fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	e853 3f00 	ldrex	r3, [r3]
 8003806:	61fb      	str	r3, [r7, #28]
   return(result);
 8003808:	69fb      	ldr	r3, [r7, #28]
 800380a:	f023 0301 	bic.w	r3, r3, #1
 800380e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3308      	adds	r3, #8
 8003816:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003818:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800381a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800381c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800381e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003820:	e841 2300 	strex	r3, r2, [r1]
 8003824:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1e5      	bne.n	80037f8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003830:	2b01      	cmp	r3, #1
 8003832:	d118      	bne.n	8003866 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	e853 3f00 	ldrex	r3, [r3]
 8003840:	60bb      	str	r3, [r7, #8]
   return(result);
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	f023 0310 	bic.w	r3, r3, #16
 8003848:	647b      	str	r3, [r7, #68]	@ 0x44
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	461a      	mov	r2, r3
 8003850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003852:	61bb      	str	r3, [r7, #24]
 8003854:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003856:	6979      	ldr	r1, [r7, #20]
 8003858:	69ba      	ldr	r2, [r7, #24]
 800385a:	e841 2300 	strex	r3, r2, [r1]
 800385e:	613b      	str	r3, [r7, #16]
   return(result);
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1e6      	bne.n	8003834 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2220      	movs	r2, #32
 800386a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800387a:	bf00      	nop
 800387c:	3754      	adds	r7, #84	@ 0x54
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <memset>:
 8003886:	4402      	add	r2, r0
 8003888:	4603      	mov	r3, r0
 800388a:	4293      	cmp	r3, r2
 800388c:	d100      	bne.n	8003890 <memset+0xa>
 800388e:	4770      	bx	lr
 8003890:	f803 1b01 	strb.w	r1, [r3], #1
 8003894:	e7f9      	b.n	800388a <memset+0x4>
	...

08003898 <__libc_init_array>:
 8003898:	b570      	push	{r4, r5, r6, lr}
 800389a:	4d0d      	ldr	r5, [pc, #52]	@ (80038d0 <__libc_init_array+0x38>)
 800389c:	4c0d      	ldr	r4, [pc, #52]	@ (80038d4 <__libc_init_array+0x3c>)
 800389e:	1b64      	subs	r4, r4, r5
 80038a0:	10a4      	asrs	r4, r4, #2
 80038a2:	2600      	movs	r6, #0
 80038a4:	42a6      	cmp	r6, r4
 80038a6:	d109      	bne.n	80038bc <__libc_init_array+0x24>
 80038a8:	4d0b      	ldr	r5, [pc, #44]	@ (80038d8 <__libc_init_array+0x40>)
 80038aa:	4c0c      	ldr	r4, [pc, #48]	@ (80038dc <__libc_init_array+0x44>)
 80038ac:	f000 f818 	bl	80038e0 <_init>
 80038b0:	1b64      	subs	r4, r4, r5
 80038b2:	10a4      	asrs	r4, r4, #2
 80038b4:	2600      	movs	r6, #0
 80038b6:	42a6      	cmp	r6, r4
 80038b8:	d105      	bne.n	80038c6 <__libc_init_array+0x2e>
 80038ba:	bd70      	pop	{r4, r5, r6, pc}
 80038bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80038c0:	4798      	blx	r3
 80038c2:	3601      	adds	r6, #1
 80038c4:	e7ee      	b.n	80038a4 <__libc_init_array+0xc>
 80038c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80038ca:	4798      	blx	r3
 80038cc:	3601      	adds	r6, #1
 80038ce:	e7f2      	b.n	80038b6 <__libc_init_array+0x1e>
 80038d0:	08003930 	.word	0x08003930
 80038d4:	08003930 	.word	0x08003930
 80038d8:	08003930 	.word	0x08003930
 80038dc:	08003934 	.word	0x08003934

080038e0 <_init>:
 80038e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038e2:	bf00      	nop
 80038e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038e6:	bc08      	pop	{r3}
 80038e8:	469e      	mov	lr, r3
 80038ea:	4770      	bx	lr

080038ec <_fini>:
 80038ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038ee:	bf00      	nop
 80038f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038f2:	bc08      	pop	{r3}
 80038f4:	469e      	mov	lr, r3
 80038f6:	4770      	bx	lr
