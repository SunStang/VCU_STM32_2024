
Testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08007238  08007238  00017238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072f0  080072f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080072f0  080072f0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080072f0  080072f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072f0  080072f0  000172f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072f4  080072f4  000172f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080072f8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a0  20000070  08007368  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08007368  00020410  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000df76  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000208b  00000000  00000000  0002e059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a90  00000000  00000000  000300e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000081a  00000000  00000000  00030b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c328  00000000  00000000  00031392  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e329  00000000  00000000  0004d6ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5bf4  00000000  00000000  0005b9e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000034e0  00000000  00000000  001015d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00104ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007220 	.word	0x08007220

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007220 	.word	0x08007220

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2f>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b60:	bf24      	itt	cs
 8000b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6a:	d90d      	bls.n	8000b88 <__aeabi_d2f+0x30>
 8000b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b8c:	d121      	bne.n	8000bd2 <__aeabi_d2f+0x7a>
 8000b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b92:	bfbc      	itt	lt
 8000b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	4770      	bxlt	lr
 8000b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba2:	f1c2 0218 	rsb	r2, r2, #24
 8000ba6:	f1c2 0c20 	rsb	ip, r2, #32
 8000baa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bae:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	f040 0001 	orrne.w	r0, r0, #1
 8000bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc4:	ea40 000c 	orr.w	r0, r0, ip
 8000bc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd0:	e7cc      	b.n	8000b6c <__aeabi_d2f+0x14>
 8000bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd6:	d107      	bne.n	8000be8 <__aeabi_d2f+0x90>
 8000bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bdc:	bf1e      	ittt	ne
 8000bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000be6:	4770      	bxne	lr
 8000be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <HAL_CAN_RxFifo1MsgPendingCallback>:

  	uint32_t TxMailbox;
  	uint32_t DriveMB;
  	uint32_t PowerMB;

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan){
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO1, &RxHeader, RxData);
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <HAL_CAN_RxFifo1MsgPendingCallback+0x30>)
 8000c02:	4a0a      	ldr	r2, [pc, #40]	; (8000c2c <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000c04:	2101      	movs	r1, #1
 8000c06:	6878      	ldr	r0, [r7, #4]
 8000c08:	f001 ff1d 	bl	8002a46 <HAL_CAN_GetRxMessage>
	* bit mask back in the code for what the flag says it needs to do
	* Reason: msgs can come in quicker than code execution
	* Don't want overwrite of actions for only 1 action
	*/
	//Will also need to add in switch case for the RxHeader.StdId
	if(RxHeader.StdId == 0x403){
 8000c0c:	4b07      	ldr	r3, [pc, #28]	; (8000c2c <HAL_CAN_RxFifo1MsgPendingCallback+0x34>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f240 4203 	movw	r2, #1027	; 0x403
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d102      	bne.n	8000c1e <HAL_CAN_RxFifo1MsgPendingCallback+0x26>
	//new msg about speed
		datacheck = 1;
 8000c18:	4b05      	ldr	r3, [pc, #20]	; (8000c30 <HAL_CAN_RxFifo1MsgPendingCallback+0x38>)
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
	}
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	20000284 	.word	0x20000284
 8000c2c:	20000268 	.word	0x20000268
 8000c30:	20000228 	.word	0x20000228
 8000c34:	00000000 	.word	0x00000000

08000c38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b088      	sub	sp, #32
 8000c3c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c3e:	f000 fdab 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c42:	f000 f9ef 	bl	8001024 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c46:	f000 fb4d 	bl	80012e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c4a:	f000 fb2d 	bl	80012a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c4e:	f000 fafb 	bl	8001248 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c52:	f000 fa3f 	bl	80010d4 <MX_ADC1_Init>
  MX_CAN_Init();
 8000c56:	f000 faa7 	bl	80011a8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  HAL_CAN_Start(&hcan);
 8000c5a:	4891      	ldr	r0, [pc, #580]	; (8000ea0 <main+0x268>)
 8000c5c:	f001 fddf 	bl	800281e <HAL_CAN_Start>

  TxHeaderData.DLC = 8;
 8000c60:	4b90      	ldr	r3, [pc, #576]	; (8000ea4 <main+0x26c>)
 8000c62:	2208      	movs	r2, #8
 8000c64:	611a      	str	r2, [r3, #16]
  TxHeaderData.IDE = CAN_ID_STD;
 8000c66:	4b8f      	ldr	r3, [pc, #572]	; (8000ea4 <main+0x26c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  TxHeaderData.RTR = CAN_RTR_DATA;
 8000c6c:	4b8d      	ldr	r3, [pc, #564]	; (8000ea4 <main+0x26c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  TxHeaderData.StdId = 0x500; //set the ID of the VCU
 8000c72:	4b8c      	ldr	r3, [pc, #560]	; (8000ea4 <main+0x26c>)
 8000c74:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000c78:	601a      	str	r2, [r3, #0]

  TxHeaderRequest.DLC = 8;
 8000c7a:	4b8b      	ldr	r3, [pc, #556]	; (8000ea8 <main+0x270>)
 8000c7c:	2208      	movs	r2, #8
 8000c7e:	611a      	str	r2, [r3, #16]
  TxHeaderRequest.IDE = CAN_ID_STD;
 8000c80:	4b89      	ldr	r3, [pc, #548]	; (8000ea8 <main+0x270>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	609a      	str	r2, [r3, #8]
  TxHeaderRequest.RTR = CAN_RTR_REMOTE;
 8000c86:	4b88      	ldr	r3, [pc, #544]	; (8000ea8 <main+0x270>)
 8000c88:	2202      	movs	r2, #2
 8000c8a:	60da      	str	r2, [r3, #12]
  TxHeaderRequest.StdId = 0x500; //Set the ID of VCU
 8000c8c:	4b86      	ldr	r3, [pc, #536]	; (8000ea8 <main+0x270>)
 8000c8e:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 8000c92:	601a      	str	r2, [r3, #0]

  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000c94:	2110      	movs	r1, #16
 8000c96:	4882      	ldr	r0, [pc, #520]	; (8000ea0 <main+0x268>)
 8000c98:	f001 fff7 	bl	8002c8a <HAL_CAN_ActivateNotification>
  /* USER CODE BEGIN WHILE */
  while (1)
    {
  	  /* USER CODE END WHILE */
  	  //Set the current time
  	  currTick = HAL_GetTick();
 8000c9c:	f000 fdd6 	bl	800184c <HAL_GetTick>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a82      	ldr	r2, [pc, #520]	; (8000eac <main+0x274>)
 8000ca4:	6013      	str	r3, [r2, #0]
  	  //HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
  	   */


  	  //ADC readings with DMA help
  	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adcResults, adcChannelCount);
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	461a      	mov	r2, r3
 8000caa:	4981      	ldr	r1, [pc, #516]	; (8000eb0 <main+0x278>)
 8000cac:	4881      	ldr	r0, [pc, #516]	; (8000eb4 <main+0x27c>)
 8000cae:	f000 ff73 	bl	8001b98 <HAL_ADC_Start_DMA>
  	  while(adcConversionComplete == 0){
 8000cb2:	bf00      	nop
 8000cb4:	4b80      	ldr	r3, [pc, #512]	; (8000eb8 <main+0x280>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d0fb      	beq.n	8000cb4 <main+0x7c>
  	  } //waiting for conversion to complete
  	  adcConversionComplete = 0;
 8000cbc:	4b7e      	ldr	r3, [pc, #504]	; (8000eb8 <main+0x280>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	601a      	str	r2, [r3, #0]
  	  HAL_ADC_Start(&hadc1);
  	  HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
  	  num = HAL_ADC_GetValue(&hadc1);
  	  */
  	  //set wait
  	  wait = 250;
 8000cc2:	4b7e      	ldr	r3, [pc, #504]	; (8000ebc <main+0x284>)
 8000cc4:	22fa      	movs	r2, #250	; 0xfa
 8000cc6:	601a      	str	r2, [r3, #0]
  	  acel = adcResults[0];
 8000cc8:	4b79      	ldr	r3, [pc, #484]	; (8000eb0 <main+0x278>)
 8000cca:	881b      	ldrh	r3, [r3, #0]
 8000ccc:	b29a      	uxth	r2, r3
 8000cce:	4b7c      	ldr	r3, [pc, #496]	; (8000ec0 <main+0x288>)
 8000cd0:	801a      	strh	r2, [r3, #0]
  	  brake = adcResults[1];
 8000cd2:	4b77      	ldr	r3, [pc, #476]	; (8000eb0 <main+0x278>)
 8000cd4:	885b      	ldrh	r3, [r3, #2]
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	4b7a      	ldr	r3, [pc, #488]	; (8000ec4 <main+0x28c>)
 8000cda:	801a      	strh	r2, [r3, #0]

  	  //toggle a GPIO pin with the time delay from the potentiometer
  	  if(currTick - prevTickOp > wait) {
 8000cdc:	4b73      	ldr	r3, [pc, #460]	; (8000eac <main+0x274>)
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	4b79      	ldr	r3, [pc, #484]	; (8000ec8 <main+0x290>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	1ad2      	subs	r2, r2, r3
 8000ce6:	4b75      	ldr	r3, [pc, #468]	; (8000ebc <main+0x284>)
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	429a      	cmp	r2, r3
 8000cec:	d91e      	bls.n	8000d2c <main+0xf4>

  		  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_13);
 8000cee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf2:	4876      	ldr	r0, [pc, #472]	; (8000ecc <main+0x294>)
 8000cf4:	f002 fe50 	bl	8003998 <HAL_GPIO_TogglePin>

  		  // -- Debugging
  		  sprintf(buf, "Acel: %u  Brake: %u \r\n", adcResults[0], adcResults[1]);
 8000cf8:	4b6d      	ldr	r3, [pc, #436]	; (8000eb0 <main+0x278>)
 8000cfa:	881b      	ldrh	r3, [r3, #0]
 8000cfc:	b29b      	uxth	r3, r3
 8000cfe:	461a      	mov	r2, r3
 8000d00:	4b6b      	ldr	r3, [pc, #428]	; (8000eb0 <main+0x278>)
 8000d02:	885b      	ldrh	r3, [r3, #2]
 8000d04:	b29b      	uxth	r3, r3
 8000d06:	4972      	ldr	r1, [pc, #456]	; (8000ed0 <main+0x298>)
 8000d08:	4872      	ldr	r0, [pc, #456]	; (8000ed4 <main+0x29c>)
 8000d0a:	f004 fead 	bl	8005a68 <siprintf>
  		  HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
 8000d0e:	4871      	ldr	r0, [pc, #452]	; (8000ed4 <main+0x29c>)
 8000d10:	f7ff fa5e 	bl	80001d0 <strlen>
 8000d14:	4603      	mov	r3, r0
 8000d16:	b29a      	uxth	r2, r3
 8000d18:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1c:	496d      	ldr	r1, [pc, #436]	; (8000ed4 <main+0x29c>)
 8000d1e:	486e      	ldr	r0, [pc, #440]	; (8000ed8 <main+0x2a0>)
 8000d20:	f004 facc 	bl	80052bc <HAL_UART_Transmit>


  		  prevTickOp = currTick;
 8000d24:	4b61      	ldr	r3, [pc, #388]	; (8000eac <main+0x274>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a67      	ldr	r2, [pc, #412]	; (8000ec8 <main+0x290>)
 8000d2a:	6013      	str	r3, [r2, #0]
  	  }

  	  //create a delay to send CAN messages THIS IS TEST
  	  if(currTick - prevTickCAN > CANWait){
 8000d2c:	4b5f      	ldr	r3, [pc, #380]	; (8000eac <main+0x274>)
 8000d2e:	681a      	ldr	r2, [r3, #0]
 8000d30:	4b6a      	ldr	r3, [pc, #424]	; (8000edc <main+0x2a4>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	4a6a      	ldr	r2, [pc, #424]	; (8000ee0 <main+0x2a8>)
 8000d38:	7812      	ldrb	r2, [r2, #0]
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d92b      	bls.n	8000d96 <main+0x15e>
  		  //set the CAN message to send
  		  //uint8_t Tx[] = {50, 0xAA};
  		  TxData.f = wait;
 8000d3e:	4b5f      	ldr	r3, [pc, #380]	; (8000ebc <main+0x284>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	ee07 3a90 	vmov	s15, r3
 8000d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d4a:	4b66      	ldr	r3, [pc, #408]	; (8000ee4 <main+0x2ac>)
 8000d4c:	edc3 7a00 	vstr	s15, [r3]

  		  //Must Assemble the bytes in the union to get an array,
  		  uint8_t Tx[] = {TxData.byte[0], TxData.byte[1], TxData.byte[2], TxData.byte[3], 0, 0, 0, 0};
 8000d50:	4b64      	ldr	r3, [pc, #400]	; (8000ee4 <main+0x2ac>)
 8000d52:	781b      	ldrb	r3, [r3, #0]
 8000d54:	753b      	strb	r3, [r7, #20]
 8000d56:	4b63      	ldr	r3, [pc, #396]	; (8000ee4 <main+0x2ac>)
 8000d58:	785b      	ldrb	r3, [r3, #1]
 8000d5a:	757b      	strb	r3, [r7, #21]
 8000d5c:	4b61      	ldr	r3, [pc, #388]	; (8000ee4 <main+0x2ac>)
 8000d5e:	789b      	ldrb	r3, [r3, #2]
 8000d60:	75bb      	strb	r3, [r7, #22]
 8000d62:	4b60      	ldr	r3, [pc, #384]	; (8000ee4 <main+0x2ac>)
 8000d64:	78db      	ldrb	r3, [r3, #3]
 8000d66:	75fb      	strb	r3, [r7, #23]
 8000d68:	2300      	movs	r3, #0
 8000d6a:	763b      	strb	r3, [r7, #24]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	767b      	strb	r3, [r7, #25]
 8000d70:	2300      	movs	r3, #0
 8000d72:	76bb      	strb	r3, [r7, #26]
 8000d74:	2300      	movs	r3, #0
 8000d76:	76fb      	strb	r3, [r7, #27]

  		  //Alter address to send to
  		  TxHeaderData.StdId = 0x800;
 8000d78:	4b4a      	ldr	r3, [pc, #296]	; (8000ea4 <main+0x26c>)
 8000d7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d7e:	601a      	str	r2, [r3, #0]

  		  //send a message through CAN as data
  		  HAL_CAN_AddTxMessage(&hcan, &TxHeaderData, Tx, &TxMailbox);
 8000d80:	f107 0214 	add.w	r2, r7, #20
 8000d84:	4b58      	ldr	r3, [pc, #352]	; (8000ee8 <main+0x2b0>)
 8000d86:	4947      	ldr	r1, [pc, #284]	; (8000ea4 <main+0x26c>)
 8000d88:	4845      	ldr	r0, [pc, #276]	; (8000ea0 <main+0x268>)
 8000d8a:	f001 fd8c 	bl	80028a6 <HAL_CAN_AddTxMessage>

  		  prevTickCAN = currTick;
 8000d8e:	4b47      	ldr	r3, [pc, #284]	; (8000eac <main+0x274>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a52      	ldr	r2, [pc, #328]	; (8000edc <main+0x2a4>)
 8000d94:	6013      	str	r3, [r2, #0]
  	  }

  	  //send the motor drive command frame, 50ms delay
  	  if(currTick - prevTickDrive > DrivePeriod){
 8000d96:	4b45      	ldr	r3, [pc, #276]	; (8000eac <main+0x274>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	4b54      	ldr	r3, [pc, #336]	; (8000eec <main+0x2b4>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	4a53      	ldr	r2, [pc, #332]	; (8000ef0 <main+0x2b8>)
 8000da2:	7812      	ldrb	r2, [r2, #0]
 8000da4:	4293      	cmp	r3, r2
 8000da6:	f240 80da 	bls.w	8000f5e <main+0x326>

  		  //If we are not braking
  		  if(brake == 0){
 8000daa:	4b46      	ldr	r3, [pc, #280]	; (8000ec4 <main+0x28c>)
 8000dac:	881b      	ldrh	r3, [r3, #0]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d132      	bne.n	8000e18 <main+0x1e0>
  			  //And not accelerating
			  if(acel == 0){
 8000db2:	4b43      	ldr	r3, [pc, #268]	; (8000ec0 <main+0x288>)
 8000db4:	881b      	ldrh	r3, [r3, #0]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d108      	bne.n	8000dcc <main+0x194>
				  //Set to coast
				  Velocity.f = 0;
 8000dba:	4b4e      	ldr	r3, [pc, #312]	; (8000ef4 <main+0x2bc>)
 8000dbc:	f04f 0200 	mov.w	r2, #0
 8000dc0:	601a      	str	r2, [r3, #0]
				  Current.f = 0;
 8000dc2:	4b4d      	ldr	r3, [pc, #308]	; (8000ef8 <main+0x2c0>)
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	e0a1      	b.n	8000f10 <main+0x2d8>
			  }
			  //And accelerating
			  else{
				  //Set high velocity, and scale the current
				  Velocity.f = 1000;
 8000dcc:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <main+0x2bc>)
 8000dce:	4a4b      	ldr	r2, [pc, #300]	; (8000efc <main+0x2c4>)
 8000dd0:	601a      	str	r2, [r3, #0]
		  		  //convert the int to float for the current percent
		  		  //Current.f = (float)acel/4096;
				  Current.f = 0.00000006*(pow((float)acel, 2));
 8000dd2:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <main+0x288>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	ee07 3a90 	vmov	s15, r3
 8000dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000dde:	ee17 0a90 	vmov	r0, s15
 8000de2:	f7ff fbb1 	bl	8000548 <__aeabi_f2d>
 8000de6:	4602      	mov	r2, r0
 8000de8:	460b      	mov	r3, r1
 8000dea:	ed9f 1b27 	vldr	d1, [pc, #156]	; 8000e88 <main+0x250>
 8000dee:	ec43 2b10 	vmov	d0, r2, r3
 8000df2:	f005 fadd 	bl	80063b0 <pow>
 8000df6:	ec51 0b10 	vmov	r0, r1, d0
 8000dfa:	a325      	add	r3, pc, #148	; (adr r3, 8000e90 <main+0x258>)
 8000dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e00:	f7ff fbfa 	bl	80005f8 <__aeabi_dmul>
 8000e04:	4602      	mov	r2, r0
 8000e06:	460b      	mov	r3, r1
 8000e08:	4610      	mov	r0, r2
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	f7ff fea4 	bl	8000b58 <__aeabi_d2f>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a39      	ldr	r2, [pc, #228]	; (8000ef8 <main+0x2c0>)
 8000e14:	6013      	str	r3, [r2, #0]
 8000e16:	e07b      	b.n	8000f10 <main+0x2d8>
			  }
		  //If we are braking
  		  } else {
  			  //Set velocity to 0
  			  Velocity.f = 0;
 8000e18:	4b36      	ldr	r3, [pc, #216]	; (8000ef4 <main+0x2bc>)
 8000e1a:	f04f 0200 	mov.w	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
  			  //And if we are not pressing accelerator
  			  if(acel == 0){
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <main+0x288>)
 8000e22:	881b      	ldrh	r3, [r3, #0]
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d16f      	bne.n	8000f08 <main+0x2d0>
  				  //Scale re-gen current with brake until rpm is below a set point
  				  if(RPM.f > 200){
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <main+0x2c8>)
 8000e2a:	edd3 7a00 	vldr	s15, [r3]
 8000e2e:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8000f04 <main+0x2cc>
 8000e32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3a:	dd69      	ble.n	8000f10 <main+0x2d8>
  					  //Current.f = (float)brake/4096;
  					  Current.f = 0.00000002*(pow((float)brake, 2));
 8000e3c:	4b21      	ldr	r3, [pc, #132]	; (8000ec4 <main+0x28c>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	ee07 3a90 	vmov	s15, r3
 8000e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e48:	ee17 0a90 	vmov	r0, s15
 8000e4c:	f7ff fb7c 	bl	8000548 <__aeabi_f2d>
 8000e50:	4602      	mov	r2, r0
 8000e52:	460b      	mov	r3, r1
 8000e54:	ed9f 1b0c 	vldr	d1, [pc, #48]	; 8000e88 <main+0x250>
 8000e58:	ec43 2b10 	vmov	d0, r2, r3
 8000e5c:	f005 faa8 	bl	80063b0 <pow>
 8000e60:	ec51 0b10 	vmov	r0, r1, d0
 8000e64:	a30c      	add	r3, pc, #48	; (adr r3, 8000e98 <main+0x260>)
 8000e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6a:	f7ff fbc5 	bl	80005f8 <__aeabi_dmul>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	460b      	mov	r3, r1
 8000e72:	4610      	mov	r0, r2
 8000e74:	4619      	mov	r1, r3
 8000e76:	f7ff fe6f 	bl	8000b58 <__aeabi_d2f>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4a1e      	ldr	r2, [pc, #120]	; (8000ef8 <main+0x2c0>)
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e046      	b.n	8000f10 <main+0x2d8>
 8000e82:	bf00      	nop
 8000e84:	f3af 8000 	nop.w
 8000e88:	00000000 	.word	0x00000000
 8000e8c:	40000000 	.word	0x40000000
 8000e90:	29a4692b 	.word	0x29a4692b
 8000e94:	3e701b2b 	.word	0x3e701b2b
 8000e98:	e2308c3a 	.word	0xe2308c3a
 8000e9c:	3e55798e 	.word	0x3e55798e
 8000ea0:	20000120 	.word	0x20000120
 8000ea4:	20000238 	.word	0x20000238
 8000ea8:	20000250 	.word	0x20000250
 8000eac:	20000214 	.word	0x20000214
 8000eb0:	2000022c 	.word	0x2000022c
 8000eb4:	2000008c 	.word	0x2000008c
 8000eb8:	20000230 	.word	0x20000230
 8000ebc:	20000210 	.word	0x20000210
 8000ec0:	20000234 	.word	0x20000234
 8000ec4:	20000236 	.word	0x20000236
 8000ec8:	20000218 	.word	0x20000218
 8000ecc:	48000400 	.word	0x48000400
 8000ed0:	08007238 	.word	0x08007238
 8000ed4:	200001d0 	.word	0x200001d0
 8000ed8:	20000148 	.word	0x20000148
 8000edc:	2000021c 	.word	0x2000021c
 8000ee0:	20000000 	.word	0x20000000
 8000ee4:	2000028c 	.word	0x2000028c
 8000ee8:	200002b4 	.word	0x200002b4
 8000eec:	20000220 	.word	0x20000220
 8000ef0:	20000001 	.word	0x20000001
 8000ef4:	2000029c 	.word	0x2000029c
 8000ef8:	20000294 	.word	0x20000294
 8000efc:	447a0000 	.word	0x447a0000
 8000f00:	200002ac 	.word	0x200002ac
 8000f04:	43480000 	.word	0x43480000
  				  }
  			  //If we are pressing both pedals at same time
  			  } else {
  				  //in addition to velocity set to 0, current set to 0
  				  Current.f = 0;
 8000f08:	4b38      	ldr	r3, [pc, #224]	; (8000fec <main+0x3b4>)
 8000f0a:	f04f 0200 	mov.w	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
  			  }
  		  }

  		  //Assemble frame
  		  uint8_t DriveTx[] = {Velocity.byte[0], Velocity.byte[1], Velocity.byte[2], Velocity.byte[3], Current.byte[0], Current.byte[1], Current.byte[2], Current.byte[3]};
 8000f10:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <main+0x3b8>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	733b      	strb	r3, [r7, #12]
 8000f16:	4b36      	ldr	r3, [pc, #216]	; (8000ff0 <main+0x3b8>)
 8000f18:	785b      	ldrb	r3, [r3, #1]
 8000f1a:	737b      	strb	r3, [r7, #13]
 8000f1c:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <main+0x3b8>)
 8000f1e:	789b      	ldrb	r3, [r3, #2]
 8000f20:	73bb      	strb	r3, [r7, #14]
 8000f22:	4b33      	ldr	r3, [pc, #204]	; (8000ff0 <main+0x3b8>)
 8000f24:	78db      	ldrb	r3, [r3, #3]
 8000f26:	73fb      	strb	r3, [r7, #15]
 8000f28:	4b30      	ldr	r3, [pc, #192]	; (8000fec <main+0x3b4>)
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	743b      	strb	r3, [r7, #16]
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	; (8000fec <main+0x3b4>)
 8000f30:	785b      	ldrb	r3, [r3, #1]
 8000f32:	747b      	strb	r3, [r7, #17]
 8000f34:	4b2d      	ldr	r3, [pc, #180]	; (8000fec <main+0x3b4>)
 8000f36:	789b      	ldrb	r3, [r3, #2]
 8000f38:	74bb      	strb	r3, [r7, #18]
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	; (8000fec <main+0x3b4>)
 8000f3c:	78db      	ldrb	r3, [r3, #3]
 8000f3e:	74fb      	strb	r3, [r7, #19]

  		  //Alter address to send to
  		  TxHeaderData.StdId = 0x501;
 8000f40:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <main+0x3bc>)
 8000f42:	f240 5201 	movw	r2, #1281	; 0x501
 8000f46:	601a      	str	r2, [r3, #0]

  		  //Send frame
  		  HAL_CAN_AddTxMessage(&hcan, &TxHeaderData, DriveTx, &DriveMB);
 8000f48:	f107 020c 	add.w	r2, r7, #12
 8000f4c:	4b2a      	ldr	r3, [pc, #168]	; (8000ff8 <main+0x3c0>)
 8000f4e:	4929      	ldr	r1, [pc, #164]	; (8000ff4 <main+0x3bc>)
 8000f50:	482a      	ldr	r0, [pc, #168]	; (8000ffc <main+0x3c4>)
 8000f52:	f001 fca8 	bl	80028a6 <HAL_CAN_AddTxMessage>

  		  //reset Time
  		  prevTickDrive = currTick;
 8000f56:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <main+0x3c8>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a2a      	ldr	r2, [pc, #168]	; (8001004 <main+0x3cc>)
 8000f5c:	6013      	str	r3, [r2, #0]
  	  }

  	  //send the motor drive command frame, 80ms delay
  	  if(currTick - prevTickPower > PowerPeriod){
 8000f5e:	4b28      	ldr	r3, [pc, #160]	; (8001000 <main+0x3c8>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	4b29      	ldr	r3, [pc, #164]	; (8001008 <main+0x3d0>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	4a28      	ldr	r2, [pc, #160]	; (800100c <main+0x3d4>)
 8000f6a:	7812      	ldrb	r2, [r2, #0]
 8000f6c:	4293      	cmp	r3, r2
 8000f6e:	d925      	bls.n	8000fbc <main+0x384>

  		  //Set percent to 100
  		  Power.f = 1.0;
 8000f70:	4b27      	ldr	r3, [pc, #156]	; (8001010 <main+0x3d8>)
 8000f72:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8000f76:	601a      	str	r2, [r3, #0]

  		  //Assemble frame
  		  uint8_t PowerTx[] = {0, 0, 0, 0, Power.byte[0], Power.byte[1], Power.byte[2], Power.byte[3]};
 8000f78:	2300      	movs	r3, #0
 8000f7a:	713b      	strb	r3, [r7, #4]
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	717b      	strb	r3, [r7, #5]
 8000f80:	2300      	movs	r3, #0
 8000f82:	71bb      	strb	r3, [r7, #6]
 8000f84:	2300      	movs	r3, #0
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4b21      	ldr	r3, [pc, #132]	; (8001010 <main+0x3d8>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	723b      	strb	r3, [r7, #8]
 8000f8e:	4b20      	ldr	r3, [pc, #128]	; (8001010 <main+0x3d8>)
 8000f90:	785b      	ldrb	r3, [r3, #1]
 8000f92:	727b      	strb	r3, [r7, #9]
 8000f94:	4b1e      	ldr	r3, [pc, #120]	; (8001010 <main+0x3d8>)
 8000f96:	789b      	ldrb	r3, [r3, #2]
 8000f98:	72bb      	strb	r3, [r7, #10]
 8000f9a:	4b1d      	ldr	r3, [pc, #116]	; (8001010 <main+0x3d8>)
 8000f9c:	78db      	ldrb	r3, [r3, #3]
 8000f9e:	72fb      	strb	r3, [r7, #11]

  		  //Alter address to send to
  		  TxHeaderData.StdId = 0x502;
 8000fa0:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <main+0x3bc>)
 8000fa2:	f240 5202 	movw	r2, #1282	; 0x502
 8000fa6:	601a      	str	r2, [r3, #0]

  		  //Send frame
  		  HAL_CAN_AddTxMessage(&hcan, &TxHeaderData, PowerTx, &PowerMB);
 8000fa8:	1d3a      	adds	r2, r7, #4
 8000faa:	4b1a      	ldr	r3, [pc, #104]	; (8001014 <main+0x3dc>)
 8000fac:	4911      	ldr	r1, [pc, #68]	; (8000ff4 <main+0x3bc>)
 8000fae:	4813      	ldr	r0, [pc, #76]	; (8000ffc <main+0x3c4>)
 8000fb0:	f001 fc79 	bl	80028a6 <HAL_CAN_AddTxMessage>

  		  //reset Time
  		  prevTickPower = currTick;
 8000fb4:	4b12      	ldr	r3, [pc, #72]	; (8001000 <main+0x3c8>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a13      	ldr	r2, [pc, #76]	; (8001008 <main+0x3d0>)
 8000fba:	6013      	str	r3, [r2, #0]
  	  }

  	  //if the data flag is set, do something then reset the flag
  	  if(datacheck){
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <main+0x3e0>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f43f ae6b 	beq.w	8000c9c <main+0x64>
  		  HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
  		  */
  		  /*sprintf(buf, "In receive \r\n");
  		  HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
  		  */
  		  for(char i = 0; i <= 8; i++){
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	77fb      	strb	r3, [r7, #31]
 8000fca:	e008      	b.n	8000fde <main+0x3a6>
  			  RPM.byte[i] = RxData[i];
 8000fcc:	7ffa      	ldrb	r2, [r7, #31]
 8000fce:	7ffb      	ldrb	r3, [r7, #31]
 8000fd0:	4912      	ldr	r1, [pc, #72]	; (800101c <main+0x3e4>)
 8000fd2:	5c89      	ldrb	r1, [r1, r2]
 8000fd4:	4a12      	ldr	r2, [pc, #72]	; (8001020 <main+0x3e8>)
 8000fd6:	54d1      	strb	r1, [r2, r3]
  		  for(char i = 0; i <= 8; i++){
 8000fd8:	7ffb      	ldrb	r3, [r7, #31]
 8000fda:	3301      	adds	r3, #1
 8000fdc:	77fb      	strb	r3, [r7, #31]
 8000fde:	7ffb      	ldrb	r3, [r7, #31]
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d9f3      	bls.n	8000fcc <main+0x394>

  		  /*sprintf(buf, "%x: Velocity: %e m/s RPM: %e \r\n", RxHeader.StdId, ByteToFloat(RPM.byte[4], RPM.byte[5], RPM.byte[6], RPM.byte[7]),
  				ByteToFloat(RPM.byte[3], RPM.byte[2], RPM.byte[1], RPM.byte[0]));
  		  HAL_UART_Transmit(&huart2, buf, strlen(buf), HAL_MAX_DELAY);
		  */
  		  datacheck = 0; //reset
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	; (8001018 <main+0x3e0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
  	  currTick = HAL_GetTick();
 8000fea:	e657      	b.n	8000c9c <main+0x64>
 8000fec:	20000294 	.word	0x20000294
 8000ff0:	2000029c 	.word	0x2000029c
 8000ff4:	20000238 	.word	0x20000238
 8000ff8:	200002b8 	.word	0x200002b8
 8000ffc:	20000120 	.word	0x20000120
 8001000:	20000214 	.word	0x20000214
 8001004:	20000220 	.word	0x20000220
 8001008:	20000224 	.word	0x20000224
 800100c:	20000002 	.word	0x20000002
 8001010:	200002a4 	.word	0x200002a4
 8001014:	200002bc 	.word	0x200002bc
 8001018:	20000228 	.word	0x20000228
 800101c:	20000284 	.word	0x20000284
 8001020:	200002ac 	.word	0x200002ac

08001024 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b09c      	sub	sp, #112	; 0x70
 8001028:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800102a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800102e:	2228      	movs	r2, #40	; 0x28
 8001030:	2100      	movs	r1, #0
 8001032:	4618      	mov	r0, r3
 8001034:	f004 fd38 	bl	8005aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001038:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
 8001046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001048:	463b      	mov	r3, r7
 800104a:	2234      	movs	r2, #52	; 0x34
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f004 fd2a 	bl	8005aa8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001054:	2302      	movs	r3, #2
 8001056:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001058:	2301      	movs	r3, #1
 800105a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800105c:	2310      	movs	r3, #16
 800105e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001060:	2302      	movs	r3, #2
 8001062:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001064:	2300      	movs	r3, #0
 8001066:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001068:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800106c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800106e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001072:	4618      	mov	r0, r3
 8001074:	f002 fcce 	bl	8003a14 <HAL_RCC_OscConfig>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800107e:	f000 f9b1 	bl	80013e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001082:	230f      	movs	r3, #15
 8001084:	637b      	str	r3, [r7, #52]	; 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001086:	2302      	movs	r3, #2
 8001088:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108a:	2300      	movs	r3, #0
 800108c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800108e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001092:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001094:	2300      	movs	r3, #0
 8001096:	647b      	str	r3, [r7, #68]	; 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001098:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800109c:	2101      	movs	r1, #1
 800109e:	4618      	mov	r0, r3
 80010a0:	f003 fcf6 	bl	8004a90 <HAL_RCC_ClockConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80010aa:	f000 f99b 	bl	80013e4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 80010ae:	2380      	movs	r3, #128	; 0x80
 80010b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 80010b2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010b8:	463b      	mov	r3, r7
 80010ba:	4618      	mov	r0, r3
 80010bc:	f003 ff1e 	bl	8004efc <HAL_RCCEx_PeriphCLKConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80010c6:	f000 f98d 	bl	80013e4 <Error_Handler>
  }
}
 80010ca:	bf00      	nop
 80010cc:	3770      	adds	r7, #112	; 0x70
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
	...

080010d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010da:	463b      	mov	r3, r7
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
 80010e8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010ea:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <MX_ADC1_Init+0xd0>)
 80010ec:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010f0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010f2:	4b2c      	ldr	r3, [pc, #176]	; (80011a4 <MX_ADC1_Init+0xd0>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010f8:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <MX_ADC1_Init+0xd0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010fe:	4b29      	ldr	r3, [pc, #164]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001100:	2201      	movs	r2, #1
 8001102:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001106:	2201      	movs	r2, #1
 8001108:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110a:	4b26      	ldr	r3, [pc, #152]	; (80011a4 <MX_ADC1_Init+0xd0>)
 800110c:	2200      	movs	r2, #0
 800110e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001114:	2200      	movs	r2, #0
 8001116:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001118:	4b22      	ldr	r3, [pc, #136]	; (80011a4 <MX_ADC1_Init+0xd0>)
 800111a:	2201      	movs	r2, #1
 800111c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001120:	2200      	movs	r2, #0
 8001122:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001126:	2202      	movs	r2, #2
 8001128:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <MX_ADC1_Init+0xd0>)
 800112c:	2200      	movs	r2, #0
 800112e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001132:	4b1c      	ldr	r3, [pc, #112]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001134:	2204      	movs	r2, #4
 8001136:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001138:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_ADC1_Init+0xd0>)
 800113a:	2200      	movs	r2, #0
 800113c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800113e:	4b19      	ldr	r3, [pc, #100]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001140:	2200      	movs	r2, #0
 8001142:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001144:	4817      	ldr	r0, [pc, #92]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001146:	f000 fba1 	bl	800188c <HAL_ADC_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8001150:	f000 f948 	bl	80013e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001154:	2301      	movs	r3, #1
 8001156:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001158:	2301      	movs	r3, #1
 800115a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800115c:	2300      	movs	r3, #0
 800115e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001160:	2300      	movs	r3, #0
 8001162:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001164:	2300      	movs	r3, #0
 8001166:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116c:	463b      	mov	r3, r7
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_ADC1_Init+0xd0>)
 8001172:	f000 fdad 	bl	8001cd0 <HAL_ADC_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800117c:	f000 f932 	bl	80013e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001180:	2305      	movs	r3, #5
 8001182:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001184:	2302      	movs	r3, #2
 8001186:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001188:	463b      	mov	r3, r7
 800118a:	4619      	mov	r1, r3
 800118c:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_ADC1_Init+0xd0>)
 800118e:	f000 fd9f 	bl	8001cd0 <HAL_ADC_ConfigChannel>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001198:	f000 f924 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800119c:	bf00      	nop
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000008c 	.word	0x2000008c

080011a8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN;
 80011ae:	4b24      	ldr	r3, [pc, #144]	; (8001240 <MX_CAN_Init+0x98>)
 80011b0:	4a24      	ldr	r2, [pc, #144]	; (8001244 <MX_CAN_Init+0x9c>)
 80011b2:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 9;
 80011b4:	4b22      	ldr	r3, [pc, #136]	; (8001240 <MX_CAN_Init+0x98>)
 80011b6:	2209      	movs	r2, #9
 80011b8:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80011ba:	4b21      	ldr	r3, [pc, #132]	; (8001240 <MX_CAN_Init+0x98>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80011c0:	4b1f      	ldr	r3, [pc, #124]	; (8001240 <MX_CAN_Init+0x98>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_2TQ;
 80011c6:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <MX_CAN_Init+0x98>)
 80011c8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011cc:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80011ce:	4b1c      	ldr	r3, [pc, #112]	; (8001240 <MX_CAN_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80011d4:	4b1a      	ldr	r3, [pc, #104]	; (8001240 <MX_CAN_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80011da:	4b19      	ldr	r3, [pc, #100]	; (8001240 <MX_CAN_Init+0x98>)
 80011dc:	2200      	movs	r2, #0
 80011de:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 80011e0:	4b17      	ldr	r3, [pc, #92]	; (8001240 <MX_CAN_Init+0x98>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80011e6:	4b16      	ldr	r3, [pc, #88]	; (8001240 <MX_CAN_Init+0x98>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80011ec:	4b14      	ldr	r3, [pc, #80]	; (8001240 <MX_CAN_Init+0x98>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80011f2:	4b13      	ldr	r3, [pc, #76]	; (8001240 <MX_CAN_Init+0x98>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80011f8:	4811      	ldr	r0, [pc, #68]	; (8001240 <MX_CAN_Init+0x98>)
 80011fa:	f001 f94b 	bl	8002494 <HAL_CAN_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8001204:	f000 f8ee 	bl	80013e4 <Error_Handler>
  /* USER CODE BEGIN CAN_Init 2 */

  	//Set a up a filter
    //Allow all messages to pass through from any ID
    CAN_FilterTypeDef cf1;
    cf1.FilterActivation = CAN_FILTER_ENABLE;
 8001208:	2301      	movs	r3, #1
 800120a:	623b      	str	r3, [r7, #32]
    cf1.FilterBank = 0;
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]
    cf1.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 8001210:	2301      	movs	r3, #1
 8001212:	613b      	str	r3, [r7, #16]
    cf1.FilterMode = CAN_FILTERMODE_IDMASK;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]
    cf1.FilterScale = CAN_FILTERSCALE_32BIT;
 8001218:	2301      	movs	r3, #1
 800121a:	61fb      	str	r3, [r7, #28]
    cf1.FilterIdLow = 0x0;
 800121c:	2300      	movs	r3, #0
 800121e:	607b      	str	r3, [r7, #4]
    cf1.FilterIdHigh = 0x0<<5;
 8001220:	2300      	movs	r3, #0
 8001222:	603b      	str	r3, [r7, #0]
    cf1.FilterMaskIdLow = 0x0;
 8001224:	2300      	movs	r3, #0
 8001226:	60fb      	str	r3, [r7, #12]
    cf1.FilterMaskIdHigh = 0x0<<5;
 8001228:	2300      	movs	r3, #0
 800122a:	60bb      	str	r3, [r7, #8]

    HAL_CAN_ConfigFilter(&hcan, &cf1);
 800122c:	463b      	mov	r3, r7
 800122e:	4619      	mov	r1, r3
 8001230:	4803      	ldr	r0, [pc, #12]	; (8001240 <MX_CAN_Init+0x98>)
 8001232:	f001 fa2a 	bl	800268a <HAL_CAN_ConfigFilter>


  /* USER CODE END CAN_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	3728      	adds	r7, #40	; 0x28
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000120 	.word	0x20000120
 8001244:	40006400 	.word	0x40006400

08001248 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800124c:	4b14      	ldr	r3, [pc, #80]	; (80012a0 <MX_USART2_UART_Init+0x58>)
 800124e:	4a15      	ldr	r2, [pc, #84]	; (80012a4 <MX_USART2_UART_Init+0x5c>)
 8001250:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001252:	4b13      	ldr	r3, [pc, #76]	; (80012a0 <MX_USART2_UART_Init+0x58>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b11      	ldr	r3, [pc, #68]	; (80012a0 <MX_USART2_UART_Init+0x58>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0f      	ldr	r3, [pc, #60]	; (80012a0 <MX_USART2_UART_Init+0x58>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0e      	ldr	r3, [pc, #56]	; (80012a0 <MX_USART2_UART_Init+0x58>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b0c      	ldr	r3, [pc, #48]	; (80012a0 <MX_USART2_UART_Init+0x58>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b0b      	ldr	r3, [pc, #44]	; (80012a0 <MX_USART2_UART_Init+0x58>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b09      	ldr	r3, [pc, #36]	; (80012a0 <MX_USART2_UART_Init+0x58>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127e:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <MX_USART2_UART_Init+0x58>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001284:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <MX_USART2_UART_Init+0x58>)
 8001286:	2200      	movs	r2, #0
 8001288:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <MX_USART2_UART_Init+0x58>)
 800128c:	f003 ffc8 	bl	8005220 <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001296:	f000 f8a5 	bl	80013e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	20000148 	.word	0x20000148
 80012a4:	40004400 	.word	0x40004400

080012a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b082      	sub	sp, #8
 80012ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012ae:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <MX_DMA_Init+0x38>)
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	4a0b      	ldr	r2, [pc, #44]	; (80012e0 <MX_DMA_Init+0x38>)
 80012b4:	f043 0301 	orr.w	r3, r3, #1
 80012b8:	6153      	str	r3, [r2, #20]
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <MX_DMA_Init+0x38>)
 80012bc:	695b      	ldr	r3, [r3, #20]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80012c6:	2200      	movs	r2, #0
 80012c8:	2100      	movs	r1, #0
 80012ca:	200b      	movs	r0, #11
 80012cc:	f002 f80d 	bl	80032ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012d0:	200b      	movs	r0, #11
 80012d2:	f002 f826 	bl	8003322 <HAL_NVIC_EnableIRQ>

}
 80012d6:	bf00      	nop
 80012d8:	3708      	adds	r7, #8
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40021000 	.word	0x40021000

080012e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	; 0x28
 80012e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ea:	f107 0314 	add.w	r3, r7, #20
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <MX_GPIO_Init+0xd4>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	4a2e      	ldr	r2, [pc, #184]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001300:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001304:	6153      	str	r3, [r2, #20]
 8001306:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001308:	695b      	ldr	r3, [r3, #20]
 800130a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001312:	4b29      	ldr	r3, [pc, #164]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001314:	695b      	ldr	r3, [r3, #20]
 8001316:	4a28      	ldr	r2, [pc, #160]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001318:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800131c:	6153      	str	r3, [r2, #20]
 800131e:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <MX_GPIO_Init+0xd4>)
 800132c:	695b      	ldr	r3, [r3, #20]
 800132e:	4a22      	ldr	r2, [pc, #136]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001330:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001334:	6153      	str	r3, [r2, #20]
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800133e:	60bb      	str	r3, [r7, #8]
 8001340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001344:	695b      	ldr	r3, [r3, #20]
 8001346:	4a1c      	ldr	r2, [pc, #112]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6153      	str	r3, [r2, #20]
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_GPIO_Init+0xd4>)
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800135a:	2200      	movs	r2, #0
 800135c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001360:	4816      	ldr	r0, [pc, #88]	; (80013bc <MX_GPIO_Init+0xd8>)
 8001362:	f002 fb01 	bl	8003968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001366:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800136a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800136c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001370:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 0314 	add.w	r3, r7, #20
 800137a:	4619      	mov	r1, r3
 800137c:	4810      	ldr	r0, [pc, #64]	; (80013c0 <MX_GPIO_Init+0xdc>)
 800137e:	f002 f981 	bl	8003684 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001382:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001386:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001388:	2301      	movs	r3, #1
 800138a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	4808      	ldr	r0, [pc, #32]	; (80013bc <MX_GPIO_Init+0xd8>)
 800139c:	f002 f972 	bl	8003684 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2028      	movs	r0, #40	; 0x28
 80013a6:	f001 ffa0 	bl	80032ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013aa:	2028      	movs	r0, #40	; 0x28
 80013ac:	f001 ffb9 	bl	8003322 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40021000 	.word	0x40021000
 80013bc:	48000400 	.word	0x48000400
 80013c0:	48000800 	.word	0x48000800

080013c4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
	adcConversionComplete = 1;
 80013cc:	4b04      	ldr	r3, [pc, #16]	; (80013e0 <HAL_ADC_ConvCpltCallback+0x1c>)
 80013ce:	2201      	movs	r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	20000230 	.word	0x20000230

080013e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013e8:	b672      	cpsid	i
}
 80013ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ec:	e7fe      	b.n	80013ec <Error_Handler+0x8>
	...

080013f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_MspInit+0x44>)
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <HAL_MspInit+0x44>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6193      	str	r3, [r2, #24]
 8001402:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <HAL_MspInit+0x44>)
 8001404:	699b      	ldr	r3, [r3, #24]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <HAL_MspInit+0x44>)
 8001410:	69db      	ldr	r3, [r3, #28]
 8001412:	4a08      	ldr	r2, [pc, #32]	; (8001434 <HAL_MspInit+0x44>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	61d3      	str	r3, [r2, #28]
 800141a:	4b06      	ldr	r3, [pc, #24]	; (8001434 <HAL_MspInit+0x44>)
 800141c:	69db      	ldr	r3, [r3, #28]
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	603b      	str	r3, [r7, #0]
 8001424:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001426:	2007      	movs	r0, #7
 8001428:	f001 ff54 	bl	80032d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40021000 	.word	0x40021000

08001438 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	2200      	movs	r2, #0
 8001446:	601a      	str	r2, [r3, #0]
 8001448:	605a      	str	r2, [r3, #4]
 800144a:	609a      	str	r2, [r3, #8]
 800144c:	60da      	str	r2, [r3, #12]
 800144e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001458:	d14d      	bne.n	80014f6 <HAL_ADC_MspInit+0xbe>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800145a:	4b29      	ldr	r3, [pc, #164]	; (8001500 <HAL_ADC_MspInit+0xc8>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4a28      	ldr	r2, [pc, #160]	; (8001500 <HAL_ADC_MspInit+0xc8>)
 8001460:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001464:	6153      	str	r3, [r2, #20]
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <HAL_ADC_MspInit+0xc8>)
 8001468:	695b      	ldr	r3, [r3, #20]
 800146a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001472:	4b23      	ldr	r3, [pc, #140]	; (8001500 <HAL_ADC_MspInit+0xc8>)
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	4a22      	ldr	r2, [pc, #136]	; (8001500 <HAL_ADC_MspInit+0xc8>)
 8001478:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800147c:	6153      	str	r3, [r2, #20]
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <HAL_ADC_MspInit+0xc8>)
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA4     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = IN_Pot_Pin|Brake_POT_Pin;
 800148a:	2311      	movs	r3, #17
 800148c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800148e:	2303      	movs	r3, #3
 8001490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001496:	f107 0314 	add.w	r3, r7, #20
 800149a:	4619      	mov	r1, r3
 800149c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014a0:	f002 f8f0 	bl	8003684 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80014a4:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_ADC_MspInit+0xcc>)
 80014a6:	4a18      	ldr	r2, [pc, #96]	; (8001508 <HAL_ADC_MspInit+0xd0>)
 80014a8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014aa:	4b16      	ldr	r3, [pc, #88]	; (8001504 <HAL_ADC_MspInit+0xcc>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_ADC_MspInit+0xcc>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80014b6:	4b13      	ldr	r3, [pc, #76]	; (8001504 <HAL_ADC_MspInit+0xcc>)
 80014b8:	2280      	movs	r2, #128	; 0x80
 80014ba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80014bc:	4b11      	ldr	r3, [pc, #68]	; (8001504 <HAL_ADC_MspInit+0xcc>)
 80014be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014c2:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_ADC_MspInit+0xcc>)
 80014c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014ca:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80014cc:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <HAL_ADC_MspInit+0xcc>)
 80014ce:	2220      	movs	r2, #32
 80014d0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_ADC_MspInit+0xcc>)
 80014d4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014d8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80014da:	480a      	ldr	r0, [pc, #40]	; (8001504 <HAL_ADC_MspInit+0xcc>)
 80014dc:	f001 ff3b 	bl	8003356 <HAL_DMA_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_ADC_MspInit+0xb2>
    {
      Error_Handler();
 80014e6:	f7ff ff7d 	bl	80013e4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a05      	ldr	r2, [pc, #20]	; (8001504 <HAL_ADC_MspInit+0xcc>)
 80014ee:	639a      	str	r2, [r3, #56]	; 0x38
 80014f0:	4a04      	ldr	r2, [pc, #16]	; (8001504 <HAL_ADC_MspInit+0xcc>)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3728      	adds	r7, #40	; 0x28
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	200000dc 	.word	0x200000dc
 8001508:	40020008 	.word	0x40020008

0800150c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b08a      	sub	sp, #40	; 0x28
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	2200      	movs	r2, #0
 800151a:	601a      	str	r2, [r3, #0]
 800151c:	605a      	str	r2, [r3, #4]
 800151e:	609a      	str	r2, [r3, #8]
 8001520:	60da      	str	r2, [r3, #12]
 8001522:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1c      	ldr	r2, [pc, #112]	; (800159c <HAL_CAN_MspInit+0x90>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d131      	bne.n	8001592 <HAL_CAN_MspInit+0x86>
  {
  /* USER CODE BEGIN CAN_MspInit 0 */

  /* USER CODE END CAN_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_CAN_MspInit+0x94>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	4a1b      	ldr	r2, [pc, #108]	; (80015a0 <HAL_CAN_MspInit+0x94>)
 8001534:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001538:	61d3      	str	r3, [r2, #28]
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_CAN_MspInit+0x94>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_CAN_MspInit+0x94>)
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <HAL_CAN_MspInit+0x94>)
 800154c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001550:	6153      	str	r3, [r2, #20]
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_CAN_MspInit+0x94>)
 8001554:	695b      	ldr	r3, [r3, #20]
 8001556:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800155e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001564:	2302      	movs	r3, #2
 8001566:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001568:	2300      	movs	r3, #0
 800156a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800156c:	2303      	movs	r3, #3
 800156e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM1;
 8001570:	2309      	movs	r3, #9
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	4619      	mov	r1, r3
 800157a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157e:	f002 f881 	bl	8003684 <HAL_GPIO_Init>

    /* CAN interrupt Init */
    HAL_NVIC_SetPriority(CAN_RX1_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2015      	movs	r0, #21
 8001588:	f001 feaf 	bl	80032ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN_RX1_IRQn);
 800158c:	2015      	movs	r0, #21
 800158e:	f001 fec8 	bl	8003322 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN_MspInit 1 */

  /* USER CODE END CAN_MspInit 1 */
  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	; 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40006400 	.word	0x40006400
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a17      	ldr	r2, [pc, #92]	; (8001620 <HAL_UART_MspInit+0x7c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d128      	bne.n	8001618 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_UART_MspInit+0x80>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a16      	ldr	r2, [pc, #88]	; (8001624 <HAL_UART_MspInit+0x80>)
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b14      	ldr	r3, [pc, #80]	; (8001624 <HAL_UART_MspInit+0x80>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015de:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_UART_MspInit+0x80>)
 80015e0:	695b      	ldr	r3, [r3, #20]
 80015e2:	4a10      	ldr	r2, [pc, #64]	; (8001624 <HAL_UART_MspInit+0x80>)
 80015e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015e8:	6153      	str	r3, [r2, #20]
 80015ea:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_UART_MspInit+0x80>)
 80015ec:	695b      	ldr	r3, [r3, #20]
 80015ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f6:	230c      	movs	r3, #12
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001606:	2307      	movs	r3, #7
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001614:	f002 f836 	bl	8003684 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001618:	bf00      	nop
 800161a:	3728      	adds	r7, #40	; 0x28
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40004400 	.word	0x40004400
 8001624:	40021000 	.word	0x40021000

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001674:	f000 f8d6 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001680:	4802      	ldr	r0, [pc, #8]	; (800168c <DMA1_Channel1_IRQHandler+0x10>)
 8001682:	f001 ff0e 	bl	80034a2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	200000dc 	.word	0x200000dc

08001690 <CAN_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN_RX1_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_RX1_IRQn 0 */

  /* USER CODE END CAN_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001694:	4802      	ldr	r0, [pc, #8]	; (80016a0 <CAN_RX1_IRQHandler+0x10>)
 8001696:	f001 fb1e 	bl	8002cd6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN_RX1_IRQn 1 */

  /* USER CODE END CAN_RX1_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000120 	.word	0x20000120

080016a4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80016a8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016ac:	f002 f98e 	bl	80039cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016bc:	4a14      	ldr	r2, [pc, #80]	; (8001710 <_sbrk+0x5c>)
 80016be:	4b15      	ldr	r3, [pc, #84]	; (8001714 <_sbrk+0x60>)
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016c8:	4b13      	ldr	r3, [pc, #76]	; (8001718 <_sbrk+0x64>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d102      	bne.n	80016d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <_sbrk+0x64>)
 80016d2:	4a12      	ldr	r2, [pc, #72]	; (800171c <_sbrk+0x68>)
 80016d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016d6:	4b10      	ldr	r3, [pc, #64]	; (8001718 <_sbrk+0x64>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4413      	add	r3, r2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d207      	bcs.n	80016f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016e4:	f004 f9e8 	bl	8005ab8 <__errno>
 80016e8:	4603      	mov	r3, r0
 80016ea:	220c      	movs	r2, #12
 80016ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295
 80016f2:	e009      	b.n	8001708 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016f4:	4b08      	ldr	r3, [pc, #32]	; (8001718 <_sbrk+0x64>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016fa:	4b07      	ldr	r3, [pc, #28]	; (8001718 <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <_sbrk+0x64>)
 8001704:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20004000 	.word	0x20004000
 8001714:	00000400 	.word	0x00000400
 8001718:	200002c0 	.word	0x200002c0
 800171c:	20000410 	.word	0x20000410

08001720 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001720:	b480      	push	{r7}
 8001722:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <SystemInit+0x20>)
 8001726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800172a:	4a05      	ldr	r2, [pc, #20]	; (8001740 <SystemInit+0x20>)
 800172c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001730:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001748:	f7ff ffea 	bl	8001720 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <LoopForever+0x6>)
  ldr r1, =_edata
 800174e:	490d      	ldr	r1, [pc, #52]	; (8001784 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <LoopForever+0xe>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001764:	4c0a      	ldr	r4, [pc, #40]	; (8001790 <LoopForever+0x16>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001772:	f004 f9a7 	bl	8005ac4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001776:	f7ff fa5f 	bl	8000c38 <main>

0800177a <LoopForever>:

LoopForever:
    b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800177c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001788:	080072f8 	.word	0x080072f8
  ldr r2, =_sbss
 800178c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001790:	20000410 	.word	0x20000410

08001794 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC1_IRQHandler>
	...

08001798 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <HAL_Init+0x28>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a07      	ldr	r2, [pc, #28]	; (80017c0 <HAL_Init+0x28>)
 80017a2:	f043 0310 	orr.w	r3, r3, #16
 80017a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f001 fd93 	bl	80032d4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ae:	2000      	movs	r0, #0
 80017b0:	f000 f808 	bl	80017c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b4:	f7ff fe1c 	bl	80013f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b8:	2300      	movs	r3, #0
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	40022000 	.word	0x40022000

080017c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x54>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	4b12      	ldr	r3, [pc, #72]	; (800181c <HAL_InitTick+0x58>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	4619      	mov	r1, r3
 80017d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017da:	fbb3 f3f1 	udiv	r3, r3, r1
 80017de:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 fdab 	bl	800333e <HAL_SYSTICK_Config>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e00e      	b.n	8001810 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b0f      	cmp	r3, #15
 80017f6:	d80a      	bhi.n	800180e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f8:	2200      	movs	r2, #0
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f001 fd73 	bl	80032ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001804:	4a06      	ldr	r2, [pc, #24]	; (8001820 <HAL_InitTick+0x5c>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800180a:	2300      	movs	r3, #0
 800180c:	e000      	b.n	8001810 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
}
 8001810:	4618      	mov	r0, r3
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	20000004 	.word	0x20000004
 800181c:	2000000c 	.word	0x2000000c
 8001820:	20000008 	.word	0x20000008

08001824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x20>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	461a      	mov	r2, r3
 800182e:	4b06      	ldr	r3, [pc, #24]	; (8001848 <HAL_IncTick+0x24>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4413      	add	r3, r2
 8001834:	4a04      	ldr	r2, [pc, #16]	; (8001848 <HAL_IncTick+0x24>)
 8001836:	6013      	str	r3, [r2, #0]
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	2000000c 	.word	0x2000000c
 8001848:	200002c4 	.word	0x200002c4

0800184c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <HAL_GetTick+0x14>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	4618      	mov	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	200002c4 	.word	0x200002c4

08001864 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001878:	b480      	push	{r7}
 800187a:	b083      	sub	sp, #12
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr

0800188c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b09a      	sub	sp, #104	; 0x68
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001894:	2300      	movs	r3, #0
 8001896:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800189a:	2300      	movs	r3, #0
 800189c:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d101      	bne.n	80018ac <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80018a8:	2301      	movs	r3, #1
 80018aa:	e169      	b.n	8001b80 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	691b      	ldr	r3, [r3, #16]
 80018b0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	f003 0310 	and.w	r3, r3, #16
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d176      	bne.n	80019ac <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d152      	bne.n	800196c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018e0:	6878      	ldr	r0, [r7, #4]
 80018e2:	f7ff fda9 	bl	8001438 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d13b      	bne.n	800196c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80018f4:	6878      	ldr	r0, [r7, #4]
 80018f6:	f000 fd67 	bl	80023c8 <ADC_Disable>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	2b00      	cmp	r3, #0
 800190a:	d12f      	bne.n	800196c <HAL_ADC_Init+0xe0>
 800190c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001910:	2b00      	cmp	r3, #0
 8001912:	d12b      	bne.n	800196c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800191c:	f023 0302 	bic.w	r3, r3, #2
 8001920:	f043 0202 	orr.w	r2, r3, #2
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	689a      	ldr	r2, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001936:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	689a      	ldr	r2, [r3, #8]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001946:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001948:	4b8f      	ldr	r3, [pc, #572]	; (8001b88 <HAL_ADC_Init+0x2fc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a8f      	ldr	r2, [pc, #572]	; (8001b8c <HAL_ADC_Init+0x300>)
 800194e:	fba2 2303 	umull	r2, r3, r2, r3
 8001952:	0c9a      	lsrs	r2, r3, #18
 8001954:	4613      	mov	r3, r2
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	4413      	add	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800195e:	e002      	b.n	8001966 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	3b01      	subs	r3, #1
 8001964:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1f9      	bne.n	8001960 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d007      	beq.n	800198a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001988:	d110      	bne.n	80019ac <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f023 0312 	bic.w	r3, r3, #18
 8001992:	f043 0210 	orr.w	r2, r3, #16
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199e:	f043 0201 	orr.w	r2, r3, #1
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	f003 0310 	and.w	r3, r3, #16
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	f040 80d6 	bne.w	8001b66 <HAL_ADC_Init+0x2da>
 80019ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f040 80d1 	bne.w	8001b66 <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	f040 80c9 	bne.w	8001b66 <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019dc:	f043 0202 	orr.w	r2, r3, #2
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019e4:	4b6a      	ldr	r3, [pc, #424]	; (8001b90 <HAL_ADC_Init+0x304>)
 80019e6:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d108      	bne.n	8001a0c <HAL_ADC_Init+0x180>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f003 0301 	and.w	r3, r3, #1
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d101      	bne.n	8001a0c <HAL_ADC_Init+0x180>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <HAL_ADC_Init+0x182>
 8001a0c:	2300      	movs	r3, #0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d11c      	bne.n	8001a4c <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a12:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d010      	beq.n	8001a3a <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f003 0303 	and.w	r3, r3, #3
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d107      	bne.n	8001a34 <HAL_ADC_Init+0x1a8>
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d101      	bne.n	8001a34 <HAL_ADC_Init+0x1a8>
 8001a30:	2301      	movs	r3, #1
 8001a32:	e000      	b.n	8001a36 <HAL_ADC_Init+0x1aa>
 8001a34:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d108      	bne.n	8001a4c <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001a3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a3c:	689b      	ldr	r3, [r3, #8]
 8001a3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	431a      	orrs	r2, r3
 8001a48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001a4a:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7e5b      	ldrb	r3, [r3, #25]
 8001a50:	035b      	lsls	r3, r3, #13
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a56:	2a01      	cmp	r2, #1
 8001a58:	d002      	beq.n	8001a60 <HAL_ADC_Init+0x1d4>
 8001a5a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a5e:	e000      	b.n	8001a62 <HAL_ADC_Init+0x1d6>
 8001a60:	2200      	movs	r2, #0
 8001a62:	431a      	orrs	r2, r3
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	431a      	orrs	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	4313      	orrs	r3, r2
 8001a70:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001a72:	4313      	orrs	r3, r2
 8001a74:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d11b      	bne.n	8001ab8 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	7e5b      	ldrb	r3, [r3, #25]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d109      	bne.n	8001a9c <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8c:	3b01      	subs	r3, #1
 8001a8e:	045a      	lsls	r2, r3, #17
 8001a90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a92:	4313      	orrs	r3, r2
 8001a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a98:	663b      	str	r3, [r7, #96]	; 0x60
 8001a9a:	e00d      	b.n	8001ab8 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001aa4:	f043 0220 	orr.w	r2, r3, #32
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab0:	f043 0201 	orr.w	r2, r3, #1
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d007      	beq.n	8001ad0 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001acc:	4313      	orrs	r3, r2
 8001ace:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	f003 030c 	and.w	r3, r3, #12
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d114      	bne.n	8001b08 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aec:	f023 0302 	bic.w	r3, r3, #2
 8001af0:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	7e1b      	ldrb	r3, [r3, #24]
 8001af6:	039a      	lsls	r2, r3, #14
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	4313      	orrs	r3, r2
 8001b02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001b04:	4313      	orrs	r3, r2
 8001b06:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	68da      	ldr	r2, [r3, #12]
 8001b0e:	4b21      	ldr	r3, [pc, #132]	; (8001b94 <HAL_ADC_Init+0x308>)
 8001b10:	4013      	ands	r3, r2
 8001b12:	687a      	ldr	r2, [r7, #4]
 8001b14:	6812      	ldr	r2, [r2, #0]
 8001b16:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001b18:	430b      	orrs	r3, r1
 8001b1a:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	691b      	ldr	r3, [r3, #16]
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d10c      	bne.n	8001b3e <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b2a:	f023 010f 	bic.w	r1, r3, #15
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	1e5a      	subs	r2, r3, #1
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8001b3c:	e007      	b.n	8001b4e <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 020f 	bic.w	r2, r2, #15
 8001b4c:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b58:	f023 0303 	bic.w	r3, r3, #3
 8001b5c:	f043 0201 	orr.w	r2, r3, #1
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	641a      	str	r2, [r3, #64]	; 0x40
 8001b64:	e00a      	b.n	8001b7c <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f023 0312 	bic.w	r3, r3, #18
 8001b6e:	f043 0210 	orr.w	r2, r3, #16
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001b76:	2301      	movs	r3, #1
 8001b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001b7c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3768      	adds	r7, #104	; 0x68
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	20000004 	.word	0x20000004
 8001b8c:	431bde83 	.word	0x431bde83
 8001b90:	50000300 	.word	0x50000300
 8001b94:	fff0c007 	.word	0xfff0c007

08001b98 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d17e      	bne.n	8001cb4 <HAL_ADC_Start_DMA+0x11c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d101      	bne.n	8001bc4 <HAL_ADC_Start_DMA+0x2c>
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	e07a      	b.n	8001cba <HAL_ADC_Start_DMA+0x122>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* If multimode is enabled, dedicated function multimode conversion       */
    /* start DMA must be used.                                                */
    if(ADC_COMMON_CCR_MULTI(hadc) == RESET)
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001bcc:	68f8      	ldr	r0, [r7, #12]
 8001bce:	f000 fb97 	bl	8002300 <ADC_Enable>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	75fb      	strb	r3, [r7, #23]
      
      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001bd6:	7dfb      	ldrb	r3, [r7, #23]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d166      	bne.n	8001caa <HAL_ADC_Start_DMA+0x112>
      {
        /* Set ADC state                                                      */
        /* - Clear state bitfield related to regular group conversion results */
        /* - Set state bitfield related to regular operation                  */
        ADC_STATE_CLR_SET(hadc->State,
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001be4:	f023 0301 	bic.w	r3, r3, #1
 8001be8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	641a      	str	r2, [r3, #64]	; 0x40
        /* for all cases of multimode: independent mode, multimode ADC master */
        /* or multimode ADC slave (for devices with several ADCs):            */
        if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
        {
          /* Set ADC state (ADC independent or master) */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* If conversions on group regular are also triggering group injected,*/
          /* update ADC state.                                                  */
          if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d007      	beq.n	8001c1a <HAL_ADC_Start_DMA+0x82>
          {
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c12:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	641a      	str	r2, [r3, #64]	; 0x40
            ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
          }
        }
        
        /* State machine update: Check if an injected conversion is ongoing */
        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c26:	d106      	bne.n	8001c36 <HAL_ADC_Start_DMA+0x9e>
        {
          /* Reset ADC error code fields related to conversions on group regular*/
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2c:	f023 0206 	bic.w	r2, r3, #6
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	645a      	str	r2, [r3, #68]	; 0x44
 8001c34:	e002      	b.n	8001c3c <HAL_ADC_Start_DMA+0xa4>
        }
        else
        {
          /* Reset ADC all error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	645a      	str	r2, [r3, #68]	; 0x44
        }
        
        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        
        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c48:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <HAL_ADC_Start_DMA+0x12c>)
 8001c4a:	629a      	str	r2, [r3, #40]	; 0x28

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c50:	4a1d      	ldr	r2, [pc, #116]	; (8001cc8 <HAL_ADC_Start_DMA+0x130>)
 8001c52:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c58:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <HAL_ADC_Start_DMA+0x134>)
 8001c5a:	631a      	str	r2, [r3, #48]	; 0x30
        /* start (in case of SW start):                                       */
        
        /* Clear regular group conversion flag and overrun flag */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	221c      	movs	r2, #28
 8001c62:	601a      	str	r2, [r3, #0]
        
        /* Enable ADC overrun interrupt */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f042 0210 	orr.w	r2, r2, #16
 8001c72:	605a      	str	r2, [r3, #4]
        
        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	68da      	ldr	r2, [r3, #12]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0201 	orr.w	r2, r2, #1
 8001c82:	60da      	str	r2, [r3, #12]
        
        /* Start the DMA channel */
        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	3340      	adds	r3, #64	; 0x40
 8001c8e:	4619      	mov	r1, r3
 8001c90:	68ba      	ldr	r2, [r7, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f001 fba6 	bl	80033e4 <HAL_DMA_Start_IT>
                 
        /* Enable conversion of regular group.                                */
        /* If software start has been selected, conversion starts immediately.*/
        /* If external trigger has been selected, conversion will start at    */
        /* next trigger event.                                                */
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f042 0204 	orr.w	r2, r2, #4
 8001ca6:	609a      	str	r2, [r3, #8]
 8001ca8:	e006      	b.n	8001cb8 <HAL_ADC_Start_DMA+0x120>
        
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001cb2:	e001      	b.n	8001cb8 <HAL_ADC_Start_DMA+0x120>
      __HAL_UNLOCK(hadc);
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001cb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	08002235 	.word	0x08002235
 8001cc8:	080022af 	.word	0x080022af
 8001ccc:	080022cb 	.word	0x080022cb

08001cd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b09b      	sub	sp, #108	; 0x6c
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
 8001cd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d101      	bne.n	8001cf2 <HAL_ADC_ConfigChannel+0x22>
 8001cee:	2302      	movs	r3, #2
 8001cf0:	e295      	b.n	800221e <HAL_ADC_ConfigChannel+0x54e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 0304 	and.w	r3, r3, #4
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f040 8279 	bne.w	80021fc <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b04      	cmp	r3, #4
 8001d10:	d81c      	bhi.n	8001d4c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4613      	mov	r3, r2
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	4413      	add	r3, r2
 8001d22:	005b      	lsls	r3, r3, #1
 8001d24:	461a      	mov	r2, r3
 8001d26:	231f      	movs	r3, #31
 8001d28:	4093      	lsls	r3, r2
 8001d2a:	43db      	mvns	r3, r3
 8001d2c:	4019      	ands	r1, r3
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	6818      	ldr	r0, [r3, #0]
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	4413      	add	r3, r2
 8001d3c:	005b      	lsls	r3, r3, #1
 8001d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	430a      	orrs	r2, r1
 8001d48:	631a      	str	r2, [r3, #48]	; 0x30
 8001d4a:	e063      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b09      	cmp	r3, #9
 8001d52:	d81e      	bhi.n	8001d92 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	3b1e      	subs	r3, #30
 8001d68:	221f      	movs	r2, #31
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	4019      	ands	r1, r3
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685a      	ldr	r2, [r3, #4]
 8001d7a:	4613      	mov	r3, r2
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	4413      	add	r3, r2
 8001d80:	005b      	lsls	r3, r3, #1
 8001d82:	3b1e      	subs	r3, #30
 8001d84:	fa00 f203 	lsl.w	r2, r0, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	430a      	orrs	r2, r1
 8001d8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d90:	e040      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b0e      	cmp	r3, #14
 8001d98:	d81e      	bhi.n	8001dd8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685a      	ldr	r2, [r3, #4]
 8001da4:	4613      	mov	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	4413      	add	r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	3b3c      	subs	r3, #60	; 0x3c
 8001dae:	221f      	movs	r2, #31
 8001db0:	fa02 f303 	lsl.w	r3, r2, r3
 8001db4:	43db      	mvns	r3, r3
 8001db6:	4019      	ands	r1, r3
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	6818      	ldr	r0, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685a      	ldr	r2, [r3, #4]
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	3b3c      	subs	r3, #60	; 0x3c
 8001dca:	fa00 f203 	lsl.w	r2, r0, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8001dd6:	e01d      	b.n	8001e14 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	005b      	lsls	r3, r3, #1
 8001de6:	4413      	add	r3, r2
 8001de8:	005b      	lsls	r3, r3, #1
 8001dea:	3b5a      	subs	r3, #90	; 0x5a
 8001dec:	221f      	movs	r2, #31
 8001dee:	fa02 f303 	lsl.w	r3, r2, r3
 8001df2:	43db      	mvns	r3, r3
 8001df4:	4019      	ands	r1, r3
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	6818      	ldr	r0, [r3, #0]
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	685a      	ldr	r2, [r3, #4]
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	3b5a      	subs	r3, #90	; 0x5a
 8001e08:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	430a      	orrs	r2, r1
 8001e12:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	f003 030c 	and.w	r3, r3, #12
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f040 80e5 	bne.w	8001fee <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b09      	cmp	r3, #9
 8001e2a:	d91c      	bls.n	8001e66 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	6999      	ldr	r1, [r3, #24]
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	3b1e      	subs	r3, #30
 8001e3e:	2207      	movs	r2, #7
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43db      	mvns	r3, r3
 8001e46:	4019      	ands	r1, r3
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	6898      	ldr	r0, [r3, #8]
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	4613      	mov	r3, r2
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	4413      	add	r3, r2
 8001e56:	3b1e      	subs	r3, #30
 8001e58:	fa00 f203 	lsl.w	r2, r0, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	430a      	orrs	r2, r1
 8001e62:	619a      	str	r2, [r3, #24]
 8001e64:	e019      	b.n	8001e9a <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6959      	ldr	r1, [r3, #20]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	2207      	movs	r2, #7
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	4019      	ands	r1, r3
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6898      	ldr	r0, [r3, #8]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	4613      	mov	r3, r2
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	4413      	add	r3, r2
 8001e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	695a      	ldr	r2, [r3, #20]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68db      	ldr	r3, [r3, #12]
 8001ea4:	08db      	lsrs	r3, r3, #3
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	691b      	ldr	r3, [r3, #16]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d84f      	bhi.n	8001f5c <HAL_ADC_ConfigChannel+0x28c>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <HAL_ADC_ConfigChannel+0x1f4>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08001ef7 	.word	0x08001ef7
 8001ecc:	08001f19 	.word	0x08001f19
 8001ed0:	08001f3b 	.word	0x08001f3b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001eda:	4b97      	ldr	r3, [pc, #604]	; (8002138 <HAL_ADC_ConfigChannel+0x468>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	6812      	ldr	r2, [r2, #0]
 8001ee2:	0691      	lsls	r1, r2, #26
 8001ee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001ef2:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001ef4:	e07b      	b.n	8001fee <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001efc:	4b8e      	ldr	r3, [pc, #568]	; (8002138 <HAL_ADC_ConfigChannel+0x468>)
 8001efe:	4013      	ands	r3, r2
 8001f00:	683a      	ldr	r2, [r7, #0]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	0691      	lsls	r1, r2, #26
 8001f06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f08:	430a      	orrs	r2, r1
 8001f0a:	431a      	orrs	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f14:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f16:	e06a      	b.n	8001fee <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001f1e:	4b86      	ldr	r3, [pc, #536]	; (8002138 <HAL_ADC_ConfigChannel+0x468>)
 8001f20:	4013      	ands	r3, r2
 8001f22:	683a      	ldr	r2, [r7, #0]
 8001f24:	6812      	ldr	r2, [r2, #0]
 8001f26:	0691      	lsls	r1, r2, #26
 8001f28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f36:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f38:	e059      	b.n	8001fee <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001f40:	4b7d      	ldr	r3, [pc, #500]	; (8002138 <HAL_ADC_ConfigChannel+0x468>)
 8001f42:	4013      	ands	r3, r2
 8001f44:	683a      	ldr	r2, [r7, #0]
 8001f46:	6812      	ldr	r2, [r2, #0]
 8001f48:	0691      	lsls	r1, r2, #26
 8001f4a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f58:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001f5a:	e048      	b.n	8001fee <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	069b      	lsls	r3, r3, #26
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	d107      	bne.n	8001f80 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001f7e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f86:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	069b      	lsls	r3, r3, #26
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d107      	bne.n	8001fa4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fa2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001faa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	069b      	lsls	r3, r3, #26
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d107      	bne.n	8001fc8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fc6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	069b      	lsls	r3, r3, #26
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d107      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001fea:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001fec:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d108      	bne.n	800200e <HAL_ADC_ConfigChannel+0x33e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_ADC_ConfigChannel+0x33e>
 800200a:	2301      	movs	r3, #1
 800200c:	e000      	b.n	8002010 <HAL_ADC_ConfigChannel+0x340>
 800200e:	2300      	movs	r3, #0
 8002010:	2b00      	cmp	r3, #0
 8002012:	f040 80fe 	bne.w	8002212 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b01      	cmp	r3, #1
 800201c:	d00f      	beq.n	800203e <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	2201      	movs	r2, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43da      	mvns	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	400a      	ands	r2, r1
 8002038:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800203c:	e049      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2201      	movs	r2, #1
 800204c:	409a      	lsls	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	430a      	orrs	r2, r1
 8002054:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2b09      	cmp	r3, #9
 800205e:	d91c      	bls.n	800209a <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	6999      	ldr	r1, [r3, #24]
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681a      	ldr	r2, [r3, #0]
 800206a:	4613      	mov	r3, r2
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	4413      	add	r3, r2
 8002070:	3b1b      	subs	r3, #27
 8002072:	2207      	movs	r2, #7
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	4019      	ands	r1, r3
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	6898      	ldr	r0, [r3, #8]
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	4613      	mov	r3, r2
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	4413      	add	r3, r2
 800208a:	3b1b      	subs	r3, #27
 800208c:	fa00 f203 	lsl.w	r2, r0, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	430a      	orrs	r2, r1
 8002096:	619a      	str	r2, [r3, #24]
 8002098:	e01b      	b.n	80020d2 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6959      	ldr	r1, [r3, #20]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	4613      	mov	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	4413      	add	r3, r2
 80020ac:	2207      	movs	r2, #7
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	4019      	ands	r1, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	6898      	ldr	r0, [r3, #8]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	1c5a      	adds	r2, r3, #1
 80020c0:	4613      	mov	r3, r2
 80020c2:	005b      	lsls	r3, r3, #1
 80020c4:	4413      	add	r3, r2
 80020c6:	fa00 f203 	lsl.w	r2, r0, r3
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020d2:	4b1a      	ldr	r3, [pc, #104]	; (800213c <HAL_ADC_ConfigChannel+0x46c>)
 80020d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	2b10      	cmp	r3, #16
 80020dc:	d105      	bne.n	80020ea <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d014      	beq.n	8002114 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80020ee:	2b11      	cmp	r3, #17
 80020f0:	d105      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80020f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d00a      	beq.n	8002114 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002102:	2b12      	cmp	r3, #18
 8002104:	f040 8085 	bne.w	8002212 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002108:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002110:	2b00      	cmp	r3, #0
 8002112:	d17e      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002114:	2300      	movs	r3, #0
 8002116:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d10c      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x470>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d105      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x470>
 8002134:	2301      	movs	r3, #1
 8002136:	e004      	b.n	8002142 <HAL_ADC_ConfigChannel+0x472>
 8002138:	83fff000 	.word	0x83fff000
 800213c:	50000300 	.word	0x50000300
 8002140:	2300      	movs	r3, #0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d150      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002146:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002148:	2b00      	cmp	r3, #0
 800214a:	d010      	beq.n	800216e <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b01      	cmp	r3, #1
 8002156:	d107      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x498>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_ADC_ConfigChannel+0x498>
 8002164:	2301      	movs	r3, #1
 8002166:	e000      	b.n	800216a <HAL_ADC_ConfigChannel+0x49a>
 8002168:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800216a:	2b00      	cmp	r3, #0
 800216c:	d13c      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2b10      	cmp	r3, #16
 8002174:	d11d      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x4e2>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800217e:	d118      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002188:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800218a:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <HAL_ADC_ConfigChannel+0x55c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a27      	ldr	r2, [pc, #156]	; (8002230 <HAL_ADC_ConfigChannel+0x560>)
 8002192:	fba2 2303 	umull	r2, r3, r2, r3
 8002196:	0c9a      	lsrs	r2, r3, #18
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021a2:	e002      	b.n	80021aa <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d1f9      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021b0:	e02e      	b.n	8002210 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b11      	cmp	r3, #17
 80021b8:	d10b      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x502>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80021c2:	d106      	bne.n	80021d2 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80021c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80021cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021ce:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021d0:	e01e      	b.n	8002210 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2b12      	cmp	r3, #18
 80021d8:	d11a      	bne.n	8002210 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80021da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80021e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80021e4:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80021e6:	e013      	b.n	8002210 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80021fa:	e00a      	b.n	8002212 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	f043 0220 	orr.w	r2, r3, #32
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800220e:	e000      	b.n	8002212 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002210:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800221a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800221e:	4618      	mov	r0, r3
 8002220:	376c      	adds	r7, #108	; 0x6c
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop
 800222c:	20000004 	.word	0x20000004
 8002230:	431bde83 	.word	0x431bde83

08002234 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002234:	b580      	push	{r7, lr}
 8002236:	b084      	sub	sp, #16
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002240:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800224a:	2b00      	cmp	r3, #0
 800224c:	d126      	bne.n	800229c <ADC_DMAConvCplt+0x68>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F3 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002264:	2b00      	cmp	r3, #0
 8002266:	d115      	bne.n	8002294 <ADC_DMAConvCplt+0x60>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	7e5b      	ldrb	r3, [r3, #25]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800226c:	2b00      	cmp	r3, #0
 800226e:	d111      	bne.n	8002294 <ADC_DMAConvCplt+0x60>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002280:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d105      	bne.n	8002294 <ADC_DMAConvCplt+0x60>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228c:	f043 0201 	orr.w	r2, r3, #1
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002294:	68f8      	ldr	r0, [r7, #12]
 8002296:	f7ff f895 	bl	80013c4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800229a:	e004      	b.n	80022a6 <ADC_DMAConvCplt+0x72>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	6878      	ldr	r0, [r7, #4]
 80022a4:	4798      	blx	r3
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}

080022ae <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80022ae:	b580      	push	{r7, lr}
 80022b0:	b084      	sub	sp, #16
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ba:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80022bc:	68f8      	ldr	r0, [r7, #12]
 80022be:	f7ff fad1 	bl	8001864 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */ 
}
 80022c2:	bf00      	nop
 80022c4:	3710      	adds	r7, #16
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b084      	sub	sp, #16
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d6:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e8:	f043 0204 	orr.w	r2, r3, #4
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80022f0:	68f8      	ldr	r0, [r7, #12]
 80022f2:	f7ff fac1 	bl	8001878 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80022f6:	bf00      	nop
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
	...

08002300 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002308:	2300      	movs	r3, #0
 800230a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b01      	cmp	r3, #1
 8002318:	d108      	bne.n	800232c <ADC_Enable+0x2c>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0301 	and.w	r3, r3, #1
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <ADC_Enable+0x2c>
 8002328:	2301      	movs	r3, #1
 800232a:	e000      	b.n	800232e <ADC_Enable+0x2e>
 800232c:	2300      	movs	r3, #0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d143      	bne.n	80023ba <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	4b22      	ldr	r3, [pc, #136]	; (80023c4 <ADC_Enable+0xc4>)
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00d      	beq.n	800235c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f043 0210 	orr.w	r2, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002350:	f043 0201 	orr.w	r2, r3, #1
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e02f      	b.n	80023bc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 800236c:	f7ff fa6e 	bl	800184c <HAL_GetTick>
 8002370:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002372:	e01b      	b.n	80023ac <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002374:	f7ff fa6a 	bl	800184c <HAL_GetTick>
 8002378:	4602      	mov	r2, r0
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	2b02      	cmp	r3, #2
 8002380:	d914      	bls.n	80023ac <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0301 	and.w	r3, r3, #1
 800238c:	2b01      	cmp	r3, #1
 800238e:	d00d      	beq.n	80023ac <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002394:	f043 0210 	orr.w	r2, r3, #16
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a0:	f043 0201 	orr.w	r2, r3, #1
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e007      	b.n	80023bc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d1dc      	bne.n	8002374 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	8000003f 	.word	0x8000003f

080023c8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 0303 	and.w	r3, r3, #3
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d108      	bne.n	80023f4 <ADC_Disable+0x2c>
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0301 	and.w	r3, r3, #1
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d101      	bne.n	80023f4 <ADC_Disable+0x2c>
 80023f0:	2301      	movs	r3, #1
 80023f2:	e000      	b.n	80023f6 <ADC_Disable+0x2e>
 80023f4:	2300      	movs	r3, #0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d047      	beq.n	800248a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 030d 	and.w	r3, r3, #13
 8002404:	2b01      	cmp	r3, #1
 8002406:	d10f      	bne.n	8002428 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f042 0202 	orr.w	r2, r2, #2
 8002416:	609a      	str	r2, [r3, #8]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2203      	movs	r2, #3
 800241e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002420:	f7ff fa14 	bl	800184c <HAL_GetTick>
 8002424:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002426:	e029      	b.n	800247c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242c:	f043 0210 	orr.w	r2, r3, #16
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002438:	f043 0201 	orr.w	r2, r3, #1
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e023      	b.n	800248c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002444:	f7ff fa02 	bl	800184c <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d914      	bls.n	800247c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 0301 	and.w	r3, r3, #1
 800245c:	2b01      	cmp	r3, #1
 800245e:	d10d      	bne.n	800247c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	f043 0210 	orr.w	r2, r3, #16
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002470:	f043 0201 	orr.w	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e007      	b.n	800248c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b01      	cmp	r3, #1
 8002488:	d0dc      	beq.n	8002444 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3710      	adds	r7, #16
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e0ed      	b.n	8002682 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d102      	bne.n	80024b8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80024b2:	6878      	ldr	r0, [r7, #4]
 80024b4:	f7ff f82a 	bl	800150c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f042 0201 	orr.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024c8:	f7ff f9c0 	bl	800184c <HAL_GetTick>
 80024cc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024ce:	e012      	b.n	80024f6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80024d0:	f7ff f9bc 	bl	800184c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b0a      	cmp	r3, #10
 80024dc:	d90b      	bls.n	80024f6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2205      	movs	r2, #5
 80024ee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e0c5      	b.n	8002682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	685b      	ldr	r3, [r3, #4]
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b00      	cmp	r3, #0
 8002502:	d0e5      	beq.n	80024d0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	681a      	ldr	r2, [r3, #0]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f022 0202 	bic.w	r2, r2, #2
 8002512:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002514:	f7ff f99a 	bl	800184c <HAL_GetTick>
 8002518:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800251a:	e012      	b.n	8002542 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800251c:	f7ff f996 	bl	800184c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b0a      	cmp	r3, #10
 8002528:	d90b      	bls.n	8002542 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2205      	movs	r2, #5
 800253a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	e09f      	b.n	8002682 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0302 	and.w	r3, r3, #2
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1e5      	bne.n	800251c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7e1b      	ldrb	r3, [r3, #24]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d108      	bne.n	800256a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	e007      	b.n	800257a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	7e5b      	ldrb	r3, [r3, #25]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d108      	bne.n	8002594 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002590:	601a      	str	r2, [r3, #0]
 8002592:	e007      	b.n	80025a4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80025a2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	7e9b      	ldrb	r3, [r3, #26]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d108      	bne.n	80025be <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0220 	orr.w	r2, r2, #32
 80025ba:	601a      	str	r2, [r3, #0]
 80025bc:	e007      	b.n	80025ce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0220 	bic.w	r2, r2, #32
 80025cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	7edb      	ldrb	r3, [r3, #27]
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d108      	bne.n	80025e8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f022 0210 	bic.w	r2, r2, #16
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e007      	b.n	80025f8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0210 	orr.w	r2, r2, #16
 80025f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7f1b      	ldrb	r3, [r3, #28]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d108      	bne.n	8002612 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	681a      	ldr	r2, [r3, #0]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f042 0208 	orr.w	r2, r2, #8
 800260e:	601a      	str	r2, [r3, #0]
 8002610:	e007      	b.n	8002622 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f022 0208 	bic.w	r2, r2, #8
 8002620:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7f5b      	ldrb	r3, [r3, #29]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d108      	bne.n	800263c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681a      	ldr	r2, [r3, #0]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f042 0204 	orr.w	r2, r2, #4
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	e007      	b.n	800264c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f022 0204 	bic.w	r2, r2, #4
 800264a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689a      	ldr	r2, [r3, #8]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	431a      	orrs	r2, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691b      	ldr	r3, [r3, #16]
 800265a:	431a      	orrs	r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	ea42 0103 	orr.w	r1, r2, r3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	1e5a      	subs	r2, r3, #1
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	430a      	orrs	r2, r1
 8002670:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002680:	2300      	movs	r3, #0
}
 8002682:	4618      	mov	r0, r3
 8002684:	3710      	adds	r7, #16
 8002686:	46bd      	mov	sp, r7
 8002688:	bd80      	pop	{r7, pc}

0800268a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800268a:	b480      	push	{r7}
 800268c:	b087      	sub	sp, #28
 800268e:	af00      	add	r7, sp, #0
 8002690:	6078      	str	r0, [r7, #4]
 8002692:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026a0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80026a2:	7cfb      	ldrb	r3, [r7, #19]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d003      	beq.n	80026b0 <HAL_CAN_ConfigFilter+0x26>
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	f040 80aa 	bne.w	8002804 <HAL_CAN_ConfigFilter+0x17a>

    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80026b6:	f043 0201 	orr.w	r2, r3, #1
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	695b      	ldr	r3, [r3, #20]
 80026c4:	f003 031f 	and.w	r3, r3, #31
 80026c8:	2201      	movs	r2, #1
 80026ca:	fa02 f303 	lsl.w	r3, r2, r3
 80026ce:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	43db      	mvns	r3, r3
 80026da:	401a      	ands	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d123      	bne.n	8002732 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	43db      	mvns	r3, r3
 80026f4:	401a      	ands	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002708:	683a      	ldr	r2, [r7, #0]
 800270a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800270c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	3248      	adds	r2, #72	; 0x48
 8002712:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002726:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002728:	6979      	ldr	r1, [r7, #20]
 800272a:	3348      	adds	r3, #72	; 0x48
 800272c:	00db      	lsls	r3, r3, #3
 800272e:	440b      	add	r3, r1
 8002730:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	2b01      	cmp	r3, #1
 8002738:	d122      	bne.n	8002780 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	431a      	orrs	r2, r3
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002756:	683a      	ldr	r2, [r7, #0]
 8002758:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800275a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3248      	adds	r2, #72	; 0x48
 8002760:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002774:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002776:	6979      	ldr	r1, [r7, #20]
 8002778:	3348      	adds	r3, #72	; 0x48
 800277a:	00db      	lsls	r3, r3, #3
 800277c:	440b      	add	r3, r1
 800277e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d109      	bne.n	800279c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	43db      	mvns	r3, r3
 8002792:	401a      	ands	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800279a:	e007      	b.n	80027ac <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	691b      	ldr	r3, [r3, #16]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d109      	bne.n	80027c8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	43db      	mvns	r3, r3
 80027be:	401a      	ands	r2, r3
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80027c6:	e007      	b.n	80027d8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	431a      	orrs	r2, r3
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d107      	bne.n	80027f0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80027f6:	f023 0201 	bic.w	r2, r3, #1
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002800:	2300      	movs	r3, #0
 8002802:	e006      	b.n	8002812 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002808:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
  }
}
 8002812:	4618      	mov	r0, r3
 8002814:	371c      	adds	r7, #28
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f893 3020 	ldrb.w	r3, [r3, #32]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	2b01      	cmp	r3, #1
 8002830:	d12e      	bne.n	8002890 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2202      	movs	r2, #2
 8002836:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f022 0201 	bic.w	r2, r2, #1
 8002848:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800284a:	f7fe ffff 	bl	800184c <HAL_GetTick>
 800284e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002850:	e012      	b.n	8002878 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002852:	f7fe fffb 	bl	800184c <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	2b0a      	cmp	r3, #10
 800285e:	d90b      	bls.n	8002878 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2205      	movs	r2, #5
 8002870:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e012      	b.n	800289e <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1e5      	bne.n	8002852 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	e006      	b.n	800289e <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
  }
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b089      	sub	sp, #36	; 0x24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
 80028b2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80028c4:	7ffb      	ldrb	r3, [r7, #31]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d003      	beq.n	80028d2 <HAL_CAN_AddTxMessage+0x2c>
 80028ca:	7ffb      	ldrb	r3, [r7, #31]
 80028cc:	2b02      	cmp	r3, #2
 80028ce:	f040 80ad 	bne.w	8002a2c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10a      	bne.n	80028f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d105      	bne.n	80028f2 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8095 	beq.w	8002a1c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	0e1b      	lsrs	r3, r3, #24
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80028fc:	2201      	movs	r2, #1
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	409a      	lsls	r2, r3
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10d      	bne.n	800292a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002918:	68f9      	ldr	r1, [r7, #12]
 800291a:	6809      	ldr	r1, [r1, #0]
 800291c:	431a      	orrs	r2, r3
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	3318      	adds	r3, #24
 8002922:	011b      	lsls	r3, r3, #4
 8002924:	440b      	add	r3, r1
 8002926:	601a      	str	r2, [r3, #0]
 8002928:	e00f      	b.n	800294a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002934:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800293a:	68f9      	ldr	r1, [r7, #12]
 800293c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800293e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	3318      	adds	r3, #24
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	440b      	add	r3, r1
 8002948:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6819      	ldr	r1, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	691a      	ldr	r2, [r3, #16]
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	3318      	adds	r3, #24
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	440b      	add	r3, r1
 800295a:	3304      	adds	r3, #4
 800295c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	7d1b      	ldrb	r3, [r3, #20]
 8002962:	2b01      	cmp	r3, #1
 8002964:	d111      	bne.n	800298a <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	3318      	adds	r3, #24
 800296e:	011b      	lsls	r3, r3, #4
 8002970:	4413      	add	r3, r2
 8002972:	3304      	adds	r3, #4
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	6811      	ldr	r1, [r2, #0]
 800297a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800297e:	697b      	ldr	r3, [r7, #20]
 8002980:	3318      	adds	r3, #24
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	440b      	add	r3, r1
 8002986:	3304      	adds	r3, #4
 8002988:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	3307      	adds	r3, #7
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	061a      	lsls	r2, r3, #24
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	3306      	adds	r3, #6
 8002996:	781b      	ldrb	r3, [r3, #0]
 8002998:	041b      	lsls	r3, r3, #16
 800299a:	431a      	orrs	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3305      	adds	r3, #5
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	021b      	lsls	r3, r3, #8
 80029a4:	4313      	orrs	r3, r2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	3204      	adds	r2, #4
 80029aa:	7812      	ldrb	r2, [r2, #0]
 80029ac:	4610      	mov	r0, r2
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	6811      	ldr	r1, [r2, #0]
 80029b2:	ea43 0200 	orr.w	r2, r3, r0
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	440b      	add	r3, r1
 80029bc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80029c0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	3303      	adds	r3, #3
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	061a      	lsls	r2, r3, #24
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3302      	adds	r3, #2
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	041b      	lsls	r3, r3, #16
 80029d2:	431a      	orrs	r2, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	3301      	adds	r3, #1
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	021b      	lsls	r3, r3, #8
 80029dc:	4313      	orrs	r3, r2
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	4610      	mov	r0, r2
 80029e4:	68fa      	ldr	r2, [r7, #12]
 80029e6:	6811      	ldr	r1, [r2, #0]
 80029e8:	ea43 0200 	orr.w	r2, r3, r0
 80029ec:	697b      	ldr	r3, [r7, #20]
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	440b      	add	r3, r1
 80029f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80029f6:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3318      	adds	r3, #24
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	4413      	add	r3, r2
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	6811      	ldr	r1, [r2, #0]
 8002a0a:	f043 0201 	orr.w	r2, r3, #1
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	3318      	adds	r3, #24
 8002a12:	011b      	lsls	r3, r3, #4
 8002a14:	440b      	add	r3, r1
 8002a16:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	e00e      	b.n	8002a3a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e006      	b.n	8002a3a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a30:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
  }
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3724      	adds	r7, #36	; 0x24
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr

08002a46 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002a46:	b480      	push	{r7}
 8002a48:	b087      	sub	sp, #28
 8002a4a:	af00      	add	r7, sp, #0
 8002a4c:	60f8      	str	r0, [r7, #12]
 8002a4e:	60b9      	str	r1, [r7, #8]
 8002a50:	607a      	str	r2, [r7, #4]
 8002a52:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a5a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002a5c:	7dfb      	ldrb	r3, [r7, #23]
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d003      	beq.n	8002a6a <HAL_CAN_GetRxMessage+0x24>
 8002a62:	7dfb      	ldrb	r3, [r7, #23]
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	f040 8103 	bne.w	8002c70 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10e      	bne.n	8002a8e <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d116      	bne.n	8002aac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e0f7      	b.n	8002c7e <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d107      	bne.n	8002aac <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e0e8      	b.n	8002c7e <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	331b      	adds	r3, #27
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	4413      	add	r3, r2
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0204 	and.w	r2, r3, #4
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681a      	ldr	r2, [r3, #0]
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	331b      	adds	r3, #27
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	4413      	add	r3, r2
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	0d5b      	lsrs	r3, r3, #21
 8002ada:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e00b      	b.n	8002afc <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	331b      	adds	r3, #27
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	4413      	add	r3, r2
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	08db      	lsrs	r3, r3, #3
 8002af4:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	331b      	adds	r3, #27
 8002b04:	011b      	lsls	r3, r3, #4
 8002b06:	4413      	add	r3, r2
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0202 	and.w	r2, r3, #2
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	331b      	adds	r3, #27
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	4413      	add	r3, r2
 8002b1e:	3304      	adds	r3, #4
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0308 	and.w	r3, r3, #8
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2208      	movs	r2, #8
 8002b2e:	611a      	str	r2, [r3, #16]
 8002b30:	e00b      	b.n	8002b4a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	331b      	adds	r3, #27
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	4413      	add	r3, r2
 8002b3e:	3304      	adds	r3, #4
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 020f 	and.w	r2, r3, #15
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	331b      	adds	r3, #27
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	4413      	add	r3, r2
 8002b56:	3304      	adds	r3, #4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	331b      	adds	r3, #27
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3304      	adds	r3, #4
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	0c1b      	lsrs	r3, r3, #16
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	4413      	add	r3, r2
 8002b9a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	0a1a      	lsrs	r2, r3, #8
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	3301      	adds	r3, #1
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	0c1a      	lsrs	r2, r3, #16
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	3302      	adds	r3, #2
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	011b      	lsls	r3, r3, #4
 8002bcc:	4413      	add	r3, r2
 8002bce:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	0e1a      	lsrs	r2, r3, #24
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	3303      	adds	r3, #3
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	4413      	add	r3, r2
 8002be8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002bec:	681a      	ldr	r2, [r3, #0]
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	3304      	adds	r3, #4
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	0a1a      	lsrs	r2, r3, #8
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	3305      	adds	r3, #5
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	0c1a      	lsrs	r2, r3, #16
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	3306      	adds	r3, #6
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	0e1a      	lsrs	r2, r3, #24
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	3307      	adds	r3, #7
 8002c40:	b2d2      	uxtb	r2, r2
 8002c42:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d108      	bne.n	8002c5c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68da      	ldr	r2, [r3, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f042 0220 	orr.w	r2, r2, #32
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	e007      	b.n	8002c6c <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691a      	ldr	r2, [r3, #16]
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f042 0220 	orr.w	r2, r2, #32
 8002c6a:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	e006      	b.n	8002c7e <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
  }
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b085      	sub	sp, #20
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c9a:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002c9c:	7bfb      	ldrb	r3, [r7, #15]
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d002      	beq.n	8002ca8 <HAL_CAN_ActivateNotification+0x1e>
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d109      	bne.n	8002cbc <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6959      	ldr	r1, [r3, #20]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	e006      	b.n	8002cca <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
  }
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr

08002cd6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002cd6:	b580      	push	{r7, lr}
 8002cd8:	b08a      	sub	sp, #40	; 0x28
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695b      	ldr	r3, [r3, #20]
 8002ce8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d07c      	beq.n	8002e16 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d023      	beq.n	8002d6e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	f003 0302 	and.w	r3, r3, #2
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f983 	bl	8003044 <HAL_CAN_TxMailbox0CompleteCallback>
 8002d3e:	e016      	b.n	8002d6e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002d40:	69bb      	ldr	r3, [r7, #24]
 8002d42:	f003 0304 	and.w	r3, r3, #4
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d50:	627b      	str	r3, [r7, #36]	; 0x24
 8002d52:	e00c      	b.n	8002d6e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002d54:	69bb      	ldr	r3, [r7, #24]
 8002d56:	f003 0308 	and.w	r3, r3, #8
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d004      	beq.n	8002d68 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002d64:	627b      	str	r3, [r7, #36]	; 0x24
 8002d66:	e002      	b.n	8002d6e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f000 f989 	bl	8003080 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d024      	beq.n	8002dc2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d003      	beq.n	8002d94 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f000 f963 	bl	8003058 <HAL_CAN_TxMailbox1CompleteCallback>
 8002d92:	e016      	b.n	8002dc2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d004      	beq.n	8002da8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002da4:	627b      	str	r3, [r7, #36]	; 0x24
 8002da6:	e00c      	b.n	8002dc2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d004      	beq.n	8002dbc <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002db8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dba:	e002      	b.n	8002dc2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f000 f969 	bl	8003094 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002dc2:	69bb      	ldr	r3, [r7, #24]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d024      	beq.n	8002e16 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002dd4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002dd6:	69bb      	ldr	r3, [r7, #24]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d003      	beq.n	8002de8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f000 f943 	bl	800306c <HAL_CAN_TxMailbox2CompleteCallback>
 8002de6:	e016      	b.n	8002e16 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d004      	beq.n	8002dfc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002df8:	627b      	str	r3, [r7, #36]	; 0x24
 8002dfa:	e00c      	b.n	8002e16 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d004      	beq.n	8002e10 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0e:	e002      	b.n	8002e16 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f000 f949 	bl	80030a8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002e16:	6a3b      	ldr	r3, [r7, #32]
 8002e18:	f003 0308 	and.w	r3, r3, #8
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00c      	beq.n	8002e3a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f003 0310 	and.w	r3, r3, #16
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d007      	beq.n	8002e3a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2210      	movs	r2, #16
 8002e38:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00b      	beq.n	8002e5c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d006      	beq.n	8002e5c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2208      	movs	r2, #8
 8002e54:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f93a 	bl	80030d0 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d002      	beq.n	8002e7a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f921 	bl	80030bc <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002e7a:	6a3b      	ldr	r3, [r7, #32]
 8002e7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00c      	beq.n	8002e9e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0310 	and.w	r3, r3, #16
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d007      	beq.n	8002e9e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002e9e:	6a3b      	ldr	r3, [r7, #32]
 8002ea0:	f003 0320 	and.w	r3, r3, #32
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d00b      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	f003 0308 	and.w	r3, r3, #8
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d006      	beq.n	8002ec0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	2208      	movs	r2, #8
 8002eb8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f000 f912 	bl	80030e4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002ec0:	6a3b      	ldr	r3, [r7, #32]
 8002ec2:	f003 0310 	and.w	r3, r3, #16
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d009      	beq.n	8002ede <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f003 0303 	and.w	r3, r3, #3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f7fd fe8d 	bl	8000bf8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002ee8:	69fb      	ldr	r3, [r7, #28]
 8002eea:	f003 0310 	and.w	r3, r3, #16
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d006      	beq.n	8002f00 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2210      	movs	r2, #16
 8002ef8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 f8fc 	bl	80030f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002f00:	6a3b      	ldr	r3, [r7, #32]
 8002f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00b      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	f003 0308 	and.w	r3, r3, #8
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d006      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2208      	movs	r2, #8
 8002f1a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002f1c:	6878      	ldr	r0, [r7, #4]
 8002f1e:	f000 f8f5 	bl	800310c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d07b      	beq.n	8003024 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	f003 0304 	and.w	r3, r3, #4
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d072      	beq.n	800301c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f36:	6a3b      	ldr	r3, [r7, #32]
 8002f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d003      	beq.n	8002f52 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d008      	beq.n	8002f6e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f68:	f043 0302 	orr.w	r3, r3, #2
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f6e:	6a3b      	ldr	r3, [r7, #32]
 8002f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d008      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d043      	beq.n	800301c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d03e      	beq.n	800301c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fa4:	2b60      	cmp	r3, #96	; 0x60
 8002fa6:	d02b      	beq.n	8003000 <HAL_CAN_IRQHandler+0x32a>
 8002fa8:	2b60      	cmp	r3, #96	; 0x60
 8002faa:	d82e      	bhi.n	800300a <HAL_CAN_IRQHandler+0x334>
 8002fac:	2b50      	cmp	r3, #80	; 0x50
 8002fae:	d022      	beq.n	8002ff6 <HAL_CAN_IRQHandler+0x320>
 8002fb0:	2b50      	cmp	r3, #80	; 0x50
 8002fb2:	d82a      	bhi.n	800300a <HAL_CAN_IRQHandler+0x334>
 8002fb4:	2b40      	cmp	r3, #64	; 0x40
 8002fb6:	d019      	beq.n	8002fec <HAL_CAN_IRQHandler+0x316>
 8002fb8:	2b40      	cmp	r3, #64	; 0x40
 8002fba:	d826      	bhi.n	800300a <HAL_CAN_IRQHandler+0x334>
 8002fbc:	2b30      	cmp	r3, #48	; 0x30
 8002fbe:	d010      	beq.n	8002fe2 <HAL_CAN_IRQHandler+0x30c>
 8002fc0:	2b30      	cmp	r3, #48	; 0x30
 8002fc2:	d822      	bhi.n	800300a <HAL_CAN_IRQHandler+0x334>
 8002fc4:	2b10      	cmp	r3, #16
 8002fc6:	d002      	beq.n	8002fce <HAL_CAN_IRQHandler+0x2f8>
 8002fc8:	2b20      	cmp	r3, #32
 8002fca:	d005      	beq.n	8002fd8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002fcc:	e01d      	b.n	800300a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	f043 0308 	orr.w	r3, r3, #8
 8002fd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fd6:	e019      	b.n	800300c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fda:	f043 0310 	orr.w	r3, r3, #16
 8002fde:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fe0:	e014      	b.n	800300c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	f043 0320 	orr.w	r3, r3, #32
 8002fe8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002fea:	e00f      	b.n	800300c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ff2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ff4:	e00a      	b.n	800300c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ffc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002ffe:	e005      	b.n	800300c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003006:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8003008:	e000      	b.n	800300c <HAL_CAN_IRQHandler+0x336>
            break;
 800300a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	699a      	ldr	r2, [r3, #24]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800301a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2204      	movs	r2, #4
 8003022:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003026:	2b00      	cmp	r3, #0
 8003028:	d008      	beq.n	800303c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 f872 	bl	8003120 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800303c:	bf00      	nop
 800303e:	3728      	adds	r7, #40	; 0x28
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80030d8:	bf00      	nop
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr

08003120 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003134:	b480      	push	{r7}
 8003136:	b085      	sub	sp, #20
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f003 0307 	and.w	r3, r3, #7
 8003142:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003146:	68db      	ldr	r3, [r3, #12]
 8003148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800314a:	68ba      	ldr	r2, [r7, #8]
 800314c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003150:	4013      	ands	r3, r2
 8003152:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800315c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003166:	4a04      	ldr	r2, [pc, #16]	; (8003178 <__NVIC_SetPriorityGrouping+0x44>)
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	60d3      	str	r3, [r2, #12]
}
 800316c:	bf00      	nop
 800316e:	3714      	adds	r7, #20
 8003170:	46bd      	mov	sp, r7
 8003172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003176:	4770      	bx	lr
 8003178:	e000ed00 	.word	0xe000ed00

0800317c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800317c:	b480      	push	{r7}
 800317e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003180:	4b04      	ldr	r3, [pc, #16]	; (8003194 <__NVIC_GetPriorityGrouping+0x18>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 0307 	and.w	r3, r3, #7
}
 800318a:	4618      	mov	r0, r3
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr
 8003194:	e000ed00 	.word	0xe000ed00

08003198 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	db0b      	blt.n	80031c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031aa:	79fb      	ldrb	r3, [r7, #7]
 80031ac:	f003 021f 	and.w	r2, r3, #31
 80031b0:	4907      	ldr	r1, [pc, #28]	; (80031d0 <__NVIC_EnableIRQ+0x38>)
 80031b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b6:	095b      	lsrs	r3, r3, #5
 80031b8:	2001      	movs	r0, #1
 80031ba:	fa00 f202 	lsl.w	r2, r0, r2
 80031be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031c2:	bf00      	nop
 80031c4:	370c      	adds	r7, #12
 80031c6:	46bd      	mov	sp, r7
 80031c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031cc:	4770      	bx	lr
 80031ce:	bf00      	nop
 80031d0:	e000e100 	.word	0xe000e100

080031d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	4603      	mov	r3, r0
 80031dc:	6039      	str	r1, [r7, #0]
 80031de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	db0a      	blt.n	80031fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	490c      	ldr	r1, [pc, #48]	; (8003220 <__NVIC_SetPriority+0x4c>)
 80031ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031f2:	0112      	lsls	r2, r2, #4
 80031f4:	b2d2      	uxtb	r2, r2
 80031f6:	440b      	add	r3, r1
 80031f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031fc:	e00a      	b.n	8003214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	b2da      	uxtb	r2, r3
 8003202:	4908      	ldr	r1, [pc, #32]	; (8003224 <__NVIC_SetPriority+0x50>)
 8003204:	79fb      	ldrb	r3, [r7, #7]
 8003206:	f003 030f 	and.w	r3, r3, #15
 800320a:	3b04      	subs	r3, #4
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	b2d2      	uxtb	r2, r2
 8003210:	440b      	add	r3, r1
 8003212:	761a      	strb	r2, [r3, #24]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000e100 	.word	0xe000e100
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003228:	b480      	push	{r7}
 800322a:	b089      	sub	sp, #36	; 0x24
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f1c3 0307 	rsb	r3, r3, #7
 8003242:	2b04      	cmp	r3, #4
 8003244:	bf28      	it	cs
 8003246:	2304      	movcs	r3, #4
 8003248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3304      	adds	r3, #4
 800324e:	2b06      	cmp	r3, #6
 8003250:	d902      	bls.n	8003258 <NVIC_EncodePriority+0x30>
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	3b03      	subs	r3, #3
 8003256:	e000      	b.n	800325a <NVIC_EncodePriority+0x32>
 8003258:	2300      	movs	r3, #0
 800325a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800325c:	f04f 32ff 	mov.w	r2, #4294967295
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	fa02 f303 	lsl.w	r3, r2, r3
 8003266:	43da      	mvns	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	401a      	ands	r2, r3
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003270:	f04f 31ff 	mov.w	r1, #4294967295
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	fa01 f303 	lsl.w	r3, r1, r3
 800327a:	43d9      	mvns	r1, r3
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003280:	4313      	orrs	r3, r2
         );
}
 8003282:	4618      	mov	r0, r3
 8003284:	3724      	adds	r7, #36	; 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
	...

08003290 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3b01      	subs	r3, #1
 800329c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032a0:	d301      	bcc.n	80032a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80032a2:	2301      	movs	r3, #1
 80032a4:	e00f      	b.n	80032c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032a6:	4a0a      	ldr	r2, [pc, #40]	; (80032d0 <SysTick_Config+0x40>)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	3b01      	subs	r3, #1
 80032ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80032ae:	210f      	movs	r1, #15
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	f7ff ff8e 	bl	80031d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80032b8:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <SysTick_Config+0x40>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80032be:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <SysTick_Config+0x40>)
 80032c0:	2207      	movs	r2, #7
 80032c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80032c4:	2300      	movs	r3, #0
}
 80032c6:	4618      	mov	r0, r3
 80032c8:	3708      	adds	r7, #8
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	e000e010 	.word	0xe000e010

080032d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f7ff ff29 	bl	8003134 <__NVIC_SetPriorityGrouping>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b086      	sub	sp, #24
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	4603      	mov	r3, r0
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032fc:	f7ff ff3e 	bl	800317c <__NVIC_GetPriorityGrouping>
 8003300:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	6978      	ldr	r0, [r7, #20]
 8003308:	f7ff ff8e 	bl	8003228 <NVIC_EncodePriority>
 800330c:	4602      	mov	r2, r0
 800330e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003312:	4611      	mov	r1, r2
 8003314:	4618      	mov	r0, r3
 8003316:	f7ff ff5d 	bl	80031d4 <__NVIC_SetPriority>
}
 800331a:	bf00      	nop
 800331c:	3718      	adds	r7, #24
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003322:	b580      	push	{r7, lr}
 8003324:	b082      	sub	sp, #8
 8003326:	af00      	add	r7, sp, #0
 8003328:	4603      	mov	r3, r0
 800332a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800332c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003330:	4618      	mov	r0, r3
 8003332:	f7ff ff31 	bl	8003198 <__NVIC_EnableIRQ>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b082      	sub	sp, #8
 8003342:	af00      	add	r7, sp, #0
 8003344:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003346:	6878      	ldr	r0, [r7, #4]
 8003348:	f7ff ffa2 	bl	8003290 <SysTick_Config>
 800334c:	4603      	mov	r3, r0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800335e:	2300      	movs	r3, #0
 8003360:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e037      	b.n	80033dc <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2202      	movs	r2, #2
 8003370:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003382:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003386:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003390:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68db      	ldr	r3, [r3, #12]
 8003396:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f940 	bl	8003644 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2201      	movs	r2, #1
 80033ce:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}  
 80033dc:	4618      	mov	r0, r3
 80033de:	3710      	adds	r7, #16
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
 80033f0:	603b      	str	r3, [r7, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80033f2:	2300      	movs	r3, #0
 80033f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d101      	bne.n	8003404 <HAL_DMA_Start_IT+0x20>
 8003400:	2302      	movs	r3, #2
 8003402:	e04a      	b.n	800349a <HAL_DMA_Start_IT+0xb6>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003412:	2b01      	cmp	r3, #1
 8003414:	d13a      	bne.n	800348c <HAL_DMA_Start_IT+0xa8>
  {
  	/* Change DMA peripheral state */  
  	hdma->State = HAL_DMA_STATE_BUSY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2202      	movs	r2, #2
 800341a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	639a      	str	r2, [r3, #56]	; 0x38
  	
  	/* Disable the peripheral */
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]
  	
  	/* Configure the source, destination address and the data length */  
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	687a      	ldr	r2, [r7, #4]
 8003438:	68b9      	ldr	r1, [r7, #8]
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f8d4 	bl	80035e8 <DMA_SetConfig>
  	
  	/* Enable the transfer complete, & transfer error interrupts */
  	/* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	2b00      	cmp	r3, #0
 8003446:	d008      	beq.n	800345a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681a      	ldr	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f042 020e 	orr.w	r2, r2, #14
 8003456:	601a      	str	r2, [r3, #0]
 8003458:	e00f      	b.n	800347a <HAL_DMA_Start_IT+0x96>
    }
  	else
  	{
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f042 020a 	orr.w	r2, r2, #10
 8003468:	601a      	str	r2, [r3, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0204 	bic.w	r2, r2, #4
 8003478:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Enable the Peripheral */
  	hdma->Instance->CCR |= DMA_CCR_EN;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f042 0201 	orr.w	r2, r2, #1
 8003488:	601a      	str	r2, [r3, #0]
 800348a:	e005      	b.n	8003498 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
  	/* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2020 	strb.w	r2, [r3, #32]
  
    /* Remain BUSY */
    status = HAL_BUSY;
 8003494:	2302      	movs	r3, #2
 8003496:	75fb      	strb	r3, [r7, #23]
  }     
  
  return status;    
 8003498:	7dfb      	ldrb	r3, [r7, #23]
} 
 800349a:	4618      	mov	r0, r3
 800349c:	3718      	adds	r7, #24
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034be:	2204      	movs	r2, #4
 80034c0:	409a      	lsls	r2, r3
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4013      	ands	r3, r2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d024      	beq.n	8003514 <HAL_DMA_IRQHandler+0x72>
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f003 0304 	and.w	r3, r3, #4
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01f      	beq.n	8003514 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d107      	bne.n	80034f2 <HAL_DMA_IRQHandler+0x50>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681a      	ldr	r2, [r3, #0]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 0204 	bic.w	r2, r2, #4
 80034f0:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034fa:	2104      	movs	r1, #4
 80034fc:	fa01 f202 	lsl.w	r2, r1, r2
 8003500:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003506:	2b00      	cmp	r3, #0
 8003508:	d06a      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 8003512:	e065      	b.n	80035e0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003518:	2202      	movs	r2, #2
 800351a:	409a      	lsls	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	4013      	ands	r3, r2
 8003520:	2b00      	cmp	r3, #0
 8003522:	d02c      	beq.n	800357e <HAL_DMA_IRQHandler+0xdc>
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d027      	beq.n	800357e <HAL_DMA_IRQHandler+0xdc>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f003 0320 	and.w	r3, r3, #32
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10b      	bne.n	8003554 <HAL_DMA_IRQHandler+0xb2>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 020a 	bic.w	r2, r2, #10
 800354a:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800355c:	2102      	movs	r1, #2
 800355e:	fa01 f202 	lsl.w	r2, r1, r2
 8003562:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 2020 	strb.w	r2, [r3, #32]
  	
  	if(hdma->XferCpltCallback != NULL)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003570:	2b00      	cmp	r3, #0
 8003572:	d035      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x13e>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003578:	6878      	ldr	r0, [r7, #4]
 800357a:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800357c:	e030      	b.n	80035e0 <HAL_DMA_IRQHandler+0x13e>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003582:	2208      	movs	r2, #8
 8003584:	409a      	lsls	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	4013      	ands	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d028      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x13e>
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b00      	cmp	r3, #0
 8003596:	d023      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x13e>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f022 020e 	bic.w	r2, r2, #14
 80035a6:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b0:	2101      	movs	r1, #1
 80035b2:	fa01 f202 	lsl.w	r2, r1, r2
 80035b6:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	2200      	movs	r2, #0
 80035ca:	f883 2020 	strb.w	r2, [r3, #32]
    
    if(hdma->XferErrorCallback != NULL)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d004      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x13e>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	4798      	blx	r3
    }
  }
}  
 80035de:	e7ff      	b.n	80035e0 <HAL_DMA_IRQHandler+0x13e>
 80035e0:	bf00      	nop
 80035e2:	3710      	adds	r7, #16
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b085      	sub	sp, #20
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	60f8      	str	r0, [r7, #12]
 80035f0:	60b9      	str	r1, [r7, #8]
 80035f2:	607a      	str	r2, [r7, #4]
 80035f4:	603b      	str	r3, [r7, #0]
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	2101      	movs	r1, #1
 8003600:	fa01 f202 	lsl.w	r2, r1, r2
 8003604:	605a      	str	r2, [r3, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	683a      	ldr	r2, [r7, #0]
 800360c:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	685b      	ldr	r3, [r3, #4]
 8003612:	2b10      	cmp	r3, #16
 8003614:	d108      	bne.n	8003628 <DMA_SetConfig+0x40>
  {   
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003626:	e007      	b.n	8003638 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	687a      	ldr	r2, [r7, #4]
 8003636:	60da      	str	r2, [r3, #12]
}
 8003638:	bf00      	nop
 800363a:	3714      	adds	r7, #20
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	4b09      	ldr	r3, [pc, #36]	; (8003678 <DMA_CalcBaseAndBitshift+0x34>)
 8003654:	4413      	add	r3, r2
 8003656:	4a09      	ldr	r2, [pc, #36]	; (800367c <DMA_CalcBaseAndBitshift+0x38>)
 8003658:	fba2 2303 	umull	r2, r3, r2, r3
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	009a      	lsls	r2, r3, #2
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	4a06      	ldr	r2, [pc, #24]	; (8003680 <DMA_CalcBaseAndBitshift+0x3c>)
 8003668:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
 8003676:	bf00      	nop
 8003678:	bffdfff8 	.word	0xbffdfff8
 800367c:	cccccccd 	.word	0xcccccccd
 8003680:	40020000 	.word	0x40020000

08003684 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003692:	e14e      	b.n	8003932 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	2101      	movs	r1, #1
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	fa01 f303 	lsl.w	r3, r1, r3
 80036a0:	4013      	ands	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 8140 	beq.w	800392c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f003 0303 	and.w	r3, r3, #3
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d005      	beq.n	80036c4 <HAL_GPIO_Init+0x40>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 0303 	and.w	r3, r3, #3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d130      	bne.n	8003726 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	2203      	movs	r2, #3
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4013      	ands	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	005b      	lsls	r3, r3, #1
 80036e4:	fa02 f303 	lsl.w	r3, r2, r3
 80036e8:	693a      	ldr	r2, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036fa:	2201      	movs	r2, #1
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003702:	43db      	mvns	r3, r3
 8003704:	693a      	ldr	r2, [r7, #16]
 8003706:	4013      	ands	r3, r2
 8003708:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	091b      	lsrs	r3, r3, #4
 8003710:	f003 0201 	and.w	r2, r3, #1
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	fa02 f303 	lsl.w	r3, r2, r3
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	f003 0303 	and.w	r3, r3, #3
 800372e:	2b03      	cmp	r3, #3
 8003730:	d017      	beq.n	8003762 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	68db      	ldr	r3, [r3, #12]
 8003736:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8003738:	697b      	ldr	r3, [r7, #20]
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	2203      	movs	r2, #3
 800373e:	fa02 f303 	lsl.w	r3, r2, r3
 8003742:	43db      	mvns	r3, r3
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	4013      	ands	r3, r2
 8003748:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	689a      	ldr	r2, [r3, #8]
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	fa02 f303 	lsl.w	r3, r2, r3
 8003756:	693a      	ldr	r2, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f003 0303 	and.w	r3, r3, #3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d123      	bne.n	80037b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	08da      	lsrs	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	3208      	adds	r2, #8
 8003776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800377a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	220f      	movs	r2, #15
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	691a      	ldr	r2, [r3, #16]
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f003 0307 	and.w	r3, r3, #7
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	08da      	lsrs	r2, r3, #3
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	3208      	adds	r2, #8
 80037b0:	6939      	ldr	r1, [r7, #16]
 80037b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	005b      	lsls	r3, r3, #1
 80037c0:	2203      	movs	r2, #3
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43db      	mvns	r3, r3
 80037c8:	693a      	ldr	r2, [r7, #16]
 80037ca:	4013      	ands	r3, r2
 80037cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f003 0203 	and.w	r2, r3, #3
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	fa02 f303 	lsl.w	r3, r2, r3
 80037de:	693a      	ldr	r2, [r7, #16]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80037ea:	683b      	ldr	r3, [r7, #0]
 80037ec:	685b      	ldr	r3, [r3, #4]
 80037ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	f000 809a 	beq.w	800392c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037f8:	4b55      	ldr	r3, [pc, #340]	; (8003950 <HAL_GPIO_Init+0x2cc>)
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	4a54      	ldr	r2, [pc, #336]	; (8003950 <HAL_GPIO_Init+0x2cc>)
 80037fe:	f043 0301 	orr.w	r3, r3, #1
 8003802:	6193      	str	r3, [r2, #24]
 8003804:	4b52      	ldr	r3, [pc, #328]	; (8003950 <HAL_GPIO_Init+0x2cc>)
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	60bb      	str	r3, [r7, #8]
 800380e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003810:	4a50      	ldr	r2, [pc, #320]	; (8003954 <HAL_GPIO_Init+0x2d0>)
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	089b      	lsrs	r3, r3, #2
 8003816:	3302      	adds	r3, #2
 8003818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800381c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f003 0303 	and.w	r3, r3, #3
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	220f      	movs	r2, #15
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	4013      	ands	r3, r2
 8003832:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800383a:	d013      	beq.n	8003864 <HAL_GPIO_Init+0x1e0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a46      	ldr	r2, [pc, #280]	; (8003958 <HAL_GPIO_Init+0x2d4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00d      	beq.n	8003860 <HAL_GPIO_Init+0x1dc>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a45      	ldr	r2, [pc, #276]	; (800395c <HAL_GPIO_Init+0x2d8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d007      	beq.n	800385c <HAL_GPIO_Init+0x1d8>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a44      	ldr	r2, [pc, #272]	; (8003960 <HAL_GPIO_Init+0x2dc>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d101      	bne.n	8003858 <HAL_GPIO_Init+0x1d4>
 8003854:	2303      	movs	r3, #3
 8003856:	e006      	b.n	8003866 <HAL_GPIO_Init+0x1e2>
 8003858:	2305      	movs	r3, #5
 800385a:	e004      	b.n	8003866 <HAL_GPIO_Init+0x1e2>
 800385c:	2302      	movs	r3, #2
 800385e:	e002      	b.n	8003866 <HAL_GPIO_Init+0x1e2>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <HAL_GPIO_Init+0x1e2>
 8003864:	2300      	movs	r3, #0
 8003866:	697a      	ldr	r2, [r7, #20]
 8003868:	f002 0203 	and.w	r2, r2, #3
 800386c:	0092      	lsls	r2, r2, #2
 800386e:	4093      	lsls	r3, r2
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003876:	4937      	ldr	r1, [pc, #220]	; (8003954 <HAL_GPIO_Init+0x2d0>)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	089b      	lsrs	r3, r3, #2
 800387c:	3302      	adds	r3, #2
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003884:	4b37      	ldr	r3, [pc, #220]	; (8003964 <HAL_GPIO_Init+0x2e0>)
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	43db      	mvns	r3, r3
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4013      	ands	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800389c:	2b00      	cmp	r3, #0
 800389e:	d003      	beq.n	80038a8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80038a8:	4a2e      	ldr	r2, [pc, #184]	; (8003964 <HAL_GPIO_Init+0x2e0>)
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038ae:	4b2d      	ldr	r3, [pc, #180]	; (8003964 <HAL_GPIO_Init+0x2e0>)
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	43db      	mvns	r3, r3
 80038b8:	693a      	ldr	r2, [r7, #16]
 80038ba:	4013      	ands	r3, r2
 80038bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80038d2:	4a24      	ldr	r2, [pc, #144]	; (8003964 <HAL_GPIO_Init+0x2e0>)
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80038d8:	4b22      	ldr	r3, [pc, #136]	; (8003964 <HAL_GPIO_Init+0x2e0>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	43db      	mvns	r3, r3
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d003      	beq.n	80038fc <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80038fc:	4a19      	ldr	r2, [pc, #100]	; (8003964 <HAL_GPIO_Init+0x2e0>)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003902:	4b18      	ldr	r3, [pc, #96]	; (8003964 <HAL_GPIO_Init+0x2e0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	43db      	mvns	r3, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4313      	orrs	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003926:	4a0f      	ldr	r2, [pc, #60]	; (8003964 <HAL_GPIO_Init+0x2e0>)
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	3301      	adds	r3, #1
 8003930:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681a      	ldr	r2, [r3, #0]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	fa22 f303 	lsr.w	r3, r2, r3
 800393c:	2b00      	cmp	r3, #0
 800393e:	f47f aea9 	bne.w	8003694 <HAL_GPIO_Init+0x10>
  }
}
 8003942:	bf00      	nop
 8003944:	bf00      	nop
 8003946:	371c      	adds	r7, #28
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr
 8003950:	40021000 	.word	0x40021000
 8003954:	40010000 	.word	0x40010000
 8003958:	48000400 	.word	0x48000400
 800395c:	48000800 	.word	0x48000800
 8003960:	48000c00 	.word	0x48000c00
 8003964:	40010400 	.word	0x40010400

08003968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	807b      	strh	r3, [r7, #2]
 8003974:	4613      	mov	r3, r2
 8003976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003978:	787b      	ldrb	r3, [r7, #1]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800397e:	887a      	ldrh	r2, [r7, #2]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003984:	e002      	b.n	800398c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003986:	887a      	ldrh	r2, [r7, #2]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	695b      	ldr	r3, [r3, #20]
 80039a8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	4013      	ands	r3, r2
 80039b0:	041a      	lsls	r2, r3, #16
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43d9      	mvns	r1, r3
 80039b6:	887b      	ldrh	r3, [r7, #2]
 80039b8:	400b      	ands	r3, r1
 80039ba:	431a      	orrs	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	619a      	str	r2, [r3, #24]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	4603      	mov	r3, r0
 80039d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80039d6:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d8:	695a      	ldr	r2, [r3, #20]
 80039da:	88fb      	ldrh	r3, [r7, #6]
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d006      	beq.n	80039f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039e2:	4a05      	ldr	r2, [pc, #20]	; (80039f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039e4:	88fb      	ldrh	r3, [r7, #6]
 80039e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f000 f806 	bl	80039fc <HAL_GPIO_EXTI_Callback>
  }
}
 80039f0:	bf00      	nop
 80039f2:	3708      	adds	r7, #8
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	40010400 	.word	0x40010400

080039fc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b083      	sub	sp, #12
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
	...

08003a14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a20:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a24:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d102      	bne.n	8003a3a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f001 b823 	b.w	8004a80 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	f000 817d 	beq.w	8003d4a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003a50:	4bbc      	ldr	r3, [pc, #752]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d00c      	beq.n	8003a76 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003a5c:	4bb9      	ldr	r3, [pc, #740]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f003 030c 	and.w	r3, r3, #12
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d15c      	bne.n	8003b22 <HAL_RCC_OscConfig+0x10e>
 8003a68:	4bb6      	ldr	r3, [pc, #728]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a74:	d155      	bne.n	8003b22 <HAL_RCC_OscConfig+0x10e>
 8003a76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a7a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003a82:	fa93 f3a3 	rbit	r3, r3
 8003a86:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003a8a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a8e:	fab3 f383 	clz	r3, r3
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	095b      	lsrs	r3, r3, #5
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d102      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x94>
 8003aa2:	4ba8      	ldr	r3, [pc, #672]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	e015      	b.n	8003ad4 <HAL_RCC_OscConfig+0xc0>
 8003aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003aac:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ab0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003ab4:	fa93 f3a3 	rbit	r3, r3
 8003ab8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8003abc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ac0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003ac4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003ac8:	fa93 f3a3 	rbit	r3, r3
 8003acc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003ad0:	4b9c      	ldr	r3, [pc, #624]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ad8:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8003adc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003ae0:	fa92 f2a2 	rbit	r2, r2
 8003ae4:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003ae8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8003aec:	fab2 f282 	clz	r2, r2
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	f042 0220 	orr.w	r2, r2, #32
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	f002 021f 	and.w	r2, r2, #31
 8003afc:	2101      	movs	r1, #1
 8003afe:	fa01 f202 	lsl.w	r2, r1, r2
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 811f 	beq.w	8003d48 <HAL_RCC_OscConfig+0x334>
 8003b0a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b0e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f040 8116 	bne.w	8003d48 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	f000 bfaf 	b.w	8004a80 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b32:	d106      	bne.n	8003b42 <HAL_RCC_OscConfig+0x12e>
 8003b34:	4b83      	ldr	r3, [pc, #524]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a82      	ldr	r2, [pc, #520]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003b3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b3e:	6013      	str	r3, [r2, #0]
 8003b40:	e036      	b.n	8003bb0 <HAL_RCC_OscConfig+0x19c>
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10c      	bne.n	8003b6c <HAL_RCC_OscConfig+0x158>
 8003b52:	4b7c      	ldr	r3, [pc, #496]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a7b      	ldr	r2, [pc, #492]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b5c:	6013      	str	r3, [r2, #0]
 8003b5e:	4b79      	ldr	r3, [pc, #484]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a78      	ldr	r2, [pc, #480]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	e021      	b.n	8003bb0 <HAL_RCC_OscConfig+0x19c>
 8003b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b70:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b7c:	d10c      	bne.n	8003b98 <HAL_RCC_OscConfig+0x184>
 8003b7e:	4b71      	ldr	r3, [pc, #452]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a70      	ldr	r2, [pc, #448]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b88:	6013      	str	r3, [r2, #0]
 8003b8a:	4b6e      	ldr	r3, [pc, #440]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a6d      	ldr	r2, [pc, #436]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	e00b      	b.n	8003bb0 <HAL_RCC_OscConfig+0x19c>
 8003b98:	4b6a      	ldr	r3, [pc, #424]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a69      	ldr	r2, [pc, #420]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ba2:	6013      	str	r3, [r2, #0]
 8003ba4:	4b67      	ldr	r3, [pc, #412]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a66      	ldr	r2, [pc, #408]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003bb0:	4b64      	ldr	r3, [pc, #400]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb4:	f023 020f 	bic.w	r2, r3, #15
 8003bb8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	495f      	ldr	r1, [pc, #380]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003bca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d059      	beq.n	8003c8e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bda:	f7fd fe37 	bl	800184c <HAL_GetTick>
 8003bde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003be2:	e00a      	b.n	8003bfa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be4:	f7fd fe32 	bl	800184c <HAL_GetTick>
 8003be8:	4602      	mov	r2, r0
 8003bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b64      	cmp	r3, #100	; 0x64
 8003bf2:	d902      	bls.n	8003bfa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	f000 bf43 	b.w	8004a80 <HAL_RCC_OscConfig+0x106c>
 8003bfa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003bfe:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c02:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8003c06:	fa93 f3a3 	rbit	r3, r3
 8003c0a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8003c0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c12:	fab3 f383 	clz	r3, r3
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d102      	bne.n	8003c2c <HAL_RCC_OscConfig+0x218>
 8003c26:	4b47      	ldr	r3, [pc, #284]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	e015      	b.n	8003c58 <HAL_RCC_OscConfig+0x244>
 8003c2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c30:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8003c38:	fa93 f3a3 	rbit	r3, r3
 8003c3c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003c40:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003c44:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8003c48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003c4c:	fa93 f3a3 	rbit	r3, r3
 8003c50:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003c54:	4b3b      	ldr	r3, [pc, #236]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003c5c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003c60:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003c64:	fa92 f2a2 	rbit	r2, r2
 8003c68:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003c6c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003c70:	fab2 f282 	clz	r2, r2
 8003c74:	b2d2      	uxtb	r2, r2
 8003c76:	f042 0220 	orr.w	r2, r2, #32
 8003c7a:	b2d2      	uxtb	r2, r2
 8003c7c:	f002 021f 	and.w	r2, r2, #31
 8003c80:	2101      	movs	r1, #1
 8003c82:	fa01 f202 	lsl.w	r2, r1, r2
 8003c86:	4013      	ands	r3, r2
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d0ab      	beq.n	8003be4 <HAL_RCC_OscConfig+0x1d0>
 8003c8c:	e05d      	b.n	8003d4a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c8e:	f7fd fddd 	bl	800184c <HAL_GetTick>
 8003c92:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fd fdd8 	bl	800184c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ca2:	1ad3      	subs	r3, r2, r3
 8003ca4:	2b64      	cmp	r3, #100	; 0x64
 8003ca6:	d902      	bls.n	8003cae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003ca8:	2303      	movs	r3, #3
 8003caa:	f000 bee9 	b.w	8004a80 <HAL_RCC_OscConfig+0x106c>
 8003cae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cb2:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8003cba:	fa93 f3a3 	rbit	r3, r3
 8003cbe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003cc2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc6:	fab3 f383 	clz	r3, r3
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	095b      	lsrs	r3, r3, #5
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	f043 0301 	orr.w	r3, r3, #1
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d102      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x2cc>
 8003cda:	4b1a      	ldr	r3, [pc, #104]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	e015      	b.n	8003d0c <HAL_RCC_OscConfig+0x2f8>
 8003ce0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ce4:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8003cec:	fa93 f3a3 	rbit	r3, r3
 8003cf0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8003cf4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003cf8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8003cfc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8003d00:	fa93 f3a3 	rbit	r3, r3
 8003d04:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8003d08:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <HAL_RCC_OscConfig+0x330>)
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003d10:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8003d14:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8003d18:	fa92 f2a2 	rbit	r2, r2
 8003d1c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8003d20:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8003d24:	fab2 f282 	clz	r2, r2
 8003d28:	b2d2      	uxtb	r2, r2
 8003d2a:	f042 0220 	orr.w	r2, r2, #32
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	f002 021f 	and.w	r2, r2, #31
 8003d34:	2101      	movs	r1, #1
 8003d36:	fa01 f202 	lsl.w	r2, r1, r2
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d1ab      	bne.n	8003c98 <HAL_RCC_OscConfig+0x284>
 8003d40:	e003      	b.n	8003d4a <HAL_RCC_OscConfig+0x336>
 8003d42:	bf00      	nop
 8003d44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 0302 	and.w	r3, r3, #2
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 817d 	beq.w	800405a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003d60:	4ba6      	ldr	r3, [pc, #664]	; (8003ffc <HAL_RCC_OscConfig+0x5e8>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 030c 	and.w	r3, r3, #12
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d00b      	beq.n	8003d84 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003d6c:	4ba3      	ldr	r3, [pc, #652]	; (8003ffc <HAL_RCC_OscConfig+0x5e8>)
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f003 030c 	and.w	r3, r3, #12
 8003d74:	2b08      	cmp	r3, #8
 8003d76:	d172      	bne.n	8003e5e <HAL_RCC_OscConfig+0x44a>
 8003d78:	4ba0      	ldr	r3, [pc, #640]	; (8003ffc <HAL_RCC_OscConfig+0x5e8>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d16c      	bne.n	8003e5e <HAL_RCC_OscConfig+0x44a>
 8003d84:	2302      	movs	r3, #2
 8003d86:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003d96:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d9a:	fab3 f383 	clz	r3, r3
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	095b      	lsrs	r3, r3, #5
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f043 0301 	orr.w	r3, r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d102      	bne.n	8003db4 <HAL_RCC_OscConfig+0x3a0>
 8003dae:	4b93      	ldr	r3, [pc, #588]	; (8003ffc <HAL_RCC_OscConfig+0x5e8>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	e013      	b.n	8003ddc <HAL_RCC_OscConfig+0x3c8>
 8003db4:	2302      	movs	r3, #2
 8003db6:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dba:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003dbe:	fa93 f3a3 	rbit	r3, r3
 8003dc2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003dc6:	2302      	movs	r3, #2
 8003dc8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003dcc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003dd0:	fa93 f3a3 	rbit	r3, r3
 8003dd4:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003dd8:	4b88      	ldr	r3, [pc, #544]	; (8003ffc <HAL_RCC_OscConfig+0x5e8>)
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	2202      	movs	r2, #2
 8003dde:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003de2:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003de6:	fa92 f2a2 	rbit	r2, r2
 8003dea:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8003dee:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8003df2:	fab2 f282 	clz	r2, r2
 8003df6:	b2d2      	uxtb	r2, r2
 8003df8:	f042 0220 	orr.w	r2, r2, #32
 8003dfc:	b2d2      	uxtb	r2, r2
 8003dfe:	f002 021f 	and.w	r2, r2, #31
 8003e02:	2101      	movs	r1, #1
 8003e04:	fa01 f202 	lsl.w	r2, r1, r2
 8003e08:	4013      	ands	r3, r2
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00a      	beq.n	8003e24 <HAL_RCC_OscConfig+0x410>
 8003e0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e12:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d002      	beq.n	8003e24 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	f000 be2e 	b.w	8004a80 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e24:	4b75      	ldr	r3, [pc, #468]	; (8003ffc <HAL_RCC_OscConfig+0x5e8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e30:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	695b      	ldr	r3, [r3, #20]
 8003e38:	21f8      	movs	r1, #248	; 0xf8
 8003e3a:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003e42:	fa91 f1a1 	rbit	r1, r1
 8003e46:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8003e4a:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003e4e:	fab1 f181 	clz	r1, r1
 8003e52:	b2c9      	uxtb	r1, r1
 8003e54:	408b      	lsls	r3, r1
 8003e56:	4969      	ldr	r1, [pc, #420]	; (8003ffc <HAL_RCC_OscConfig+0x5e8>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e5c:	e0fd      	b.n	800405a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	f000 8088 	beq.w	8003f80 <HAL_RCC_OscConfig+0x56c>
 8003e70:	2301      	movs	r3, #1
 8003e72:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e76:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8003e7a:	fa93 f3a3 	rbit	r3, r3
 8003e7e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003e82:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e86:	fab3 f383 	clz	r3, r3
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e94:	009b      	lsls	r3, r3, #2
 8003e96:	461a      	mov	r2, r3
 8003e98:	2301      	movs	r3, #1
 8003e9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e9c:	f7fd fcd6 	bl	800184c <HAL_GetTick>
 8003ea0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea4:	e00a      	b.n	8003ebc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea6:	f7fd fcd1 	bl	800184c <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d902      	bls.n	8003ebc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	f000 bde2 	b.w	8004a80 <HAL_RCC_OscConfig+0x106c>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003ec6:	fa93 f3a3 	rbit	r3, r3
 8003eca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003ece:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed2:	fab3 f383 	clz	r3, r3
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	095b      	lsrs	r3, r3, #5
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d102      	bne.n	8003eec <HAL_RCC_OscConfig+0x4d8>
 8003ee6:	4b45      	ldr	r3, [pc, #276]	; (8003ffc <HAL_RCC_OscConfig+0x5e8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	e013      	b.n	8003f14 <HAL_RCC_OscConfig+0x500>
 8003eec:	2302      	movs	r3, #2
 8003eee:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ef2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8003ef6:	fa93 f3a3 	rbit	r3, r3
 8003efa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8003efe:	2302      	movs	r3, #2
 8003f00:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8003f04:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8003f08:	fa93 f3a3 	rbit	r3, r3
 8003f0c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8003f10:	4b3a      	ldr	r3, [pc, #232]	; (8003ffc <HAL_RCC_OscConfig+0x5e8>)
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	2202      	movs	r2, #2
 8003f16:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8003f1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8003f1e:	fa92 f2a2 	rbit	r2, r2
 8003f22:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8003f26:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8003f2a:	fab2 f282 	clz	r2, r2
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	f042 0220 	orr.w	r2, r2, #32
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	f002 021f 	and.w	r2, r2, #31
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0af      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f46:	4b2d      	ldr	r3, [pc, #180]	; (8003ffc <HAL_RCC_OscConfig+0x5e8>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f4e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f52:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	21f8      	movs	r1, #248	; 0xf8
 8003f5c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f60:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003f64:	fa91 f1a1 	rbit	r1, r1
 8003f68:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003f6c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003f70:	fab1 f181 	clz	r1, r1
 8003f74:	b2c9      	uxtb	r1, r1
 8003f76:	408b      	lsls	r3, r1
 8003f78:	4920      	ldr	r1, [pc, #128]	; (8003ffc <HAL_RCC_OscConfig+0x5e8>)
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	600b      	str	r3, [r1, #0]
 8003f7e:	e06c      	b.n	800405a <HAL_RCC_OscConfig+0x646>
 8003f80:	2301      	movs	r3, #1
 8003f82:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f86:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8003f8a:	fa93 f3a3 	rbit	r3, r3
 8003f8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003f92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f96:	fab3 f383 	clz	r3, r3
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003fa0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	461a      	mov	r2, r3
 8003fa8:	2300      	movs	r3, #0
 8003faa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fac:	f7fd fc4e 	bl	800184c <HAL_GetTick>
 8003fb0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fb4:	e00a      	b.n	8003fcc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fb6:	f7fd fc49 	bl	800184c <HAL_GetTick>
 8003fba:	4602      	mov	r2, r0
 8003fbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003fc0:	1ad3      	subs	r3, r2, r3
 8003fc2:	2b02      	cmp	r3, #2
 8003fc4:	d902      	bls.n	8003fcc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003fc6:	2303      	movs	r3, #3
 8003fc8:	f000 bd5a 	b.w	8004a80 <HAL_RCC_OscConfig+0x106c>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003fd6:	fa93 f3a3 	rbit	r3, r3
 8003fda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8003fde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fe2:	fab3 f383 	clz	r3, r3
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	f043 0301 	orr.w	r3, r3, #1
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d104      	bne.n	8004000 <HAL_RCC_OscConfig+0x5ec>
 8003ff6:	4b01      	ldr	r3, [pc, #4]	; (8003ffc <HAL_RCC_OscConfig+0x5e8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	e015      	b.n	8004028 <HAL_RCC_OscConfig+0x614>
 8003ffc:	40021000 	.word	0x40021000
 8004000:	2302      	movs	r3, #2
 8004002:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004006:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800400a:	fa93 f3a3 	rbit	r3, r3
 800400e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004012:	2302      	movs	r3, #2
 8004014:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004018:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800401c:	fa93 f3a3 	rbit	r3, r3
 8004020:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004024:	4bc8      	ldr	r3, [pc, #800]	; (8004348 <HAL_RCC_OscConfig+0x934>)
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2202      	movs	r2, #2
 800402a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800402e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8004032:	fa92 f2a2 	rbit	r2, r2
 8004036:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800403a:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800403e:	fab2 f282 	clz	r2, r2
 8004042:	b2d2      	uxtb	r2, r2
 8004044:	f042 0220 	orr.w	r2, r2, #32
 8004048:	b2d2      	uxtb	r2, r2
 800404a:	f002 021f 	and.w	r2, r2, #31
 800404e:	2101      	movs	r1, #1
 8004050:	fa01 f202 	lsl.w	r2, r1, r2
 8004054:	4013      	ands	r3, r2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1ad      	bne.n	8003fb6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800405a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800405e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f003 0308 	and.w	r3, r3, #8
 800406a:	2b00      	cmp	r3, #0
 800406c:	f000 8110 	beq.w	8004290 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004070:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004074:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d079      	beq.n	8004174 <HAL_RCC_OscConfig+0x760>
 8004080:	2301      	movs	r3, #1
 8004082:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004086:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800408a:	fa93 f3a3 	rbit	r3, r3
 800408e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8004092:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	4bab      	ldr	r3, [pc, #684]	; (800434c <HAL_RCC_OscConfig+0x938>)
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	461a      	mov	r2, r3
 80040a6:	2301      	movs	r3, #1
 80040a8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040aa:	f7fd fbcf 	bl	800184c <HAL_GetTick>
 80040ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80040b2:	e00a      	b.n	80040ca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b4:	f7fd fbca 	bl	800184c <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d902      	bls.n	80040ca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	f000 bcdb 	b.w	8004a80 <HAL_RCC_OscConfig+0x106c>
 80040ca:	2302      	movs	r3, #2
 80040cc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80040d4:	fa93 f3a3 	rbit	r3, r3
 80040d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80040dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040e0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80040e4:	2202      	movs	r2, #2
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ec:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	fa93 f2a3 	rbit	r2, r3
 80040f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040fa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004104:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004108:	2202      	movs	r2, #2
 800410a:	601a      	str	r2, [r3, #0]
 800410c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004110:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	fa93 f2a3 	rbit	r2, r3
 800411a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004122:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004124:	4b88      	ldr	r3, [pc, #544]	; (8004348 <HAL_RCC_OscConfig+0x934>)
 8004126:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004128:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800412c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004130:	2102      	movs	r1, #2
 8004132:	6019      	str	r1, [r3, #0]
 8004134:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004138:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	fa93 f1a3 	rbit	r1, r3
 8004142:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004146:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800414a:	6019      	str	r1, [r3, #0]
  return result;
 800414c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004150:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	fab3 f383 	clz	r3, r3
 800415a:	b2db      	uxtb	r3, r3
 800415c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f003 031f 	and.w	r3, r3, #31
 8004166:	2101      	movs	r1, #1
 8004168:	fa01 f303 	lsl.w	r3, r1, r3
 800416c:	4013      	ands	r3, r2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0a0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x6a0>
 8004172:	e08d      	b.n	8004290 <HAL_RCC_OscConfig+0x87c>
 8004174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004178:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800417c:	2201      	movs	r2, #1
 800417e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004180:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004184:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	fa93 f2a3 	rbit	r2, r3
 800418e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004192:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004196:	601a      	str	r2, [r3, #0]
  return result;
 8004198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800419c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80041a0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a2:	fab3 f383 	clz	r3, r3
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	461a      	mov	r2, r3
 80041aa:	4b68      	ldr	r3, [pc, #416]	; (800434c <HAL_RCC_OscConfig+0x938>)
 80041ac:	4413      	add	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	461a      	mov	r2, r3
 80041b2:	2300      	movs	r3, #0
 80041b4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041b6:	f7fd fb49 	bl	800184c <HAL_GetTick>
 80041ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041c0:	f7fd fb44 	bl	800184c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	2b02      	cmp	r3, #2
 80041ce:	d902      	bls.n	80041d6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80041d0:	2303      	movs	r3, #3
 80041d2:	f000 bc55 	b.w	8004a80 <HAL_RCC_OscConfig+0x106c>
 80041d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041da:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041de:	2202      	movs	r2, #2
 80041e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	fa93 f2a3 	rbit	r2, r3
 80041f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041f4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041fe:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8004202:	2202      	movs	r2, #2
 8004204:	601a      	str	r2, [r3, #0]
 8004206:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800420a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	fa93 f2a3 	rbit	r2, r3
 8004214:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004218:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800421c:	601a      	str	r2, [r3, #0]
 800421e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004226:	2202      	movs	r2, #2
 8004228:	601a      	str	r2, [r3, #0]
 800422a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800422e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	fa93 f2a3 	rbit	r2, r3
 8004238:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800423c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8004240:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004242:	4b41      	ldr	r3, [pc, #260]	; (8004348 <HAL_RCC_OscConfig+0x934>)
 8004244:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800424a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800424e:	2102      	movs	r1, #2
 8004250:	6019      	str	r1, [r3, #0]
 8004252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004256:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	fa93 f1a3 	rbit	r1, r3
 8004260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004264:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004268:	6019      	str	r1, [r3, #0]
  return result;
 800426a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800426e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	fab3 f383 	clz	r3, r3
 8004278:	b2db      	uxtb	r3, r3
 800427a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800427e:	b2db      	uxtb	r3, r3
 8004280:	f003 031f 	and.w	r3, r3, #31
 8004284:	2101      	movs	r1, #1
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	4013      	ands	r3, r2
 800428c:	2b00      	cmp	r3, #0
 800428e:	d197      	bne.n	80041c0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004290:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004294:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 81a1 	beq.w	80045e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042a6:	2300      	movs	r3, #0
 80042a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ac:	4b26      	ldr	r3, [pc, #152]	; (8004348 <HAL_RCC_OscConfig+0x934>)
 80042ae:	69db      	ldr	r3, [r3, #28]
 80042b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d116      	bne.n	80042e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042b8:	4b23      	ldr	r3, [pc, #140]	; (8004348 <HAL_RCC_OscConfig+0x934>)
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	4a22      	ldr	r2, [pc, #136]	; (8004348 <HAL_RCC_OscConfig+0x934>)
 80042be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042c2:	61d3      	str	r3, [r2, #28]
 80042c4:	4b20      	ldr	r3, [pc, #128]	; (8004348 <HAL_RCC_OscConfig+0x934>)
 80042c6:	69db      	ldr	r3, [r3, #28]
 80042c8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80042cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042d0:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80042da:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80042de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80042e0:	2301      	movs	r3, #1
 80042e2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <HAL_RCC_OscConfig+0x93c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d11a      	bne.n	8004328 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042f2:	4b17      	ldr	r3, [pc, #92]	; (8004350 <HAL_RCC_OscConfig+0x93c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a16      	ldr	r2, [pc, #88]	; (8004350 <HAL_RCC_OscConfig+0x93c>)
 80042f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042fe:	f7fd faa5 	bl	800184c <HAL_GetTick>
 8004302:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004306:	e009      	b.n	800431c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004308:	f7fd faa0 	bl	800184c <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b64      	cmp	r3, #100	; 0x64
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e3b1      	b.n	8004a80 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800431c:	4b0c      	ldr	r3, [pc, #48]	; (8004350 <HAL_RCC_OscConfig+0x93c>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ef      	beq.n	8004308 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800432c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68db      	ldr	r3, [r3, #12]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d10d      	bne.n	8004354 <HAL_RCC_OscConfig+0x940>
 8004338:	4b03      	ldr	r3, [pc, #12]	; (8004348 <HAL_RCC_OscConfig+0x934>)
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	4a02      	ldr	r2, [pc, #8]	; (8004348 <HAL_RCC_OscConfig+0x934>)
 800433e:	f043 0301 	orr.w	r3, r3, #1
 8004342:	6213      	str	r3, [r2, #32]
 8004344:	e03c      	b.n	80043c0 <HAL_RCC_OscConfig+0x9ac>
 8004346:	bf00      	nop
 8004348:	40021000 	.word	0x40021000
 800434c:	10908120 	.word	0x10908120
 8004350:	40007000 	.word	0x40007000
 8004354:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004358:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10c      	bne.n	800437e <HAL_RCC_OscConfig+0x96a>
 8004364:	4bc1      	ldr	r3, [pc, #772]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	4ac0      	ldr	r2, [pc, #768]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 800436a:	f023 0301 	bic.w	r3, r3, #1
 800436e:	6213      	str	r3, [r2, #32]
 8004370:	4bbe      	ldr	r3, [pc, #760]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	4abd      	ldr	r2, [pc, #756]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 8004376:	f023 0304 	bic.w	r3, r3, #4
 800437a:	6213      	str	r3, [r2, #32]
 800437c:	e020      	b.n	80043c0 <HAL_RCC_OscConfig+0x9ac>
 800437e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004382:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68db      	ldr	r3, [r3, #12]
 800438a:	2b05      	cmp	r3, #5
 800438c:	d10c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x994>
 800438e:	4bb7      	ldr	r3, [pc, #732]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 8004390:	6a1b      	ldr	r3, [r3, #32]
 8004392:	4ab6      	ldr	r2, [pc, #728]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 8004394:	f043 0304 	orr.w	r3, r3, #4
 8004398:	6213      	str	r3, [r2, #32]
 800439a:	4bb4      	ldr	r3, [pc, #720]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4ab3      	ldr	r2, [pc, #716]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 80043a0:	f043 0301 	orr.w	r3, r3, #1
 80043a4:	6213      	str	r3, [r2, #32]
 80043a6:	e00b      	b.n	80043c0 <HAL_RCC_OscConfig+0x9ac>
 80043a8:	4bb0      	ldr	r3, [pc, #704]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	4aaf      	ldr	r2, [pc, #700]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	6213      	str	r3, [r2, #32]
 80043b4:	4bad      	ldr	r3, [pc, #692]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 80043b6:	6a1b      	ldr	r3, [r3, #32]
 80043b8:	4aac      	ldr	r2, [pc, #688]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 80043ba:	f023 0304 	bic.w	r3, r3, #4
 80043be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80043c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043c4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 8081 	beq.w	80044d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d2:	f7fd fa3b 	bl	800184c <HAL_GetTick>
 80043d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043da:	e00b      	b.n	80043f4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043dc:	f7fd fa36 	bl	800184c <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80043e6:	1ad3      	subs	r3, r2, r3
 80043e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d901      	bls.n	80043f4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80043f0:	2303      	movs	r3, #3
 80043f2:	e345      	b.n	8004a80 <HAL_RCC_OscConfig+0x106c>
 80043f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80043f8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80043fc:	2202      	movs	r2, #2
 80043fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004400:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004404:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	fa93 f2a3 	rbit	r2, r3
 800440e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004412:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800441c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8004420:	2202      	movs	r2, #2
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004428:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	fa93 f2a3 	rbit	r2, r3
 8004432:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004436:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800443a:	601a      	str	r2, [r3, #0]
  return result;
 800443c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004440:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8004444:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004446:	fab3 f383 	clz	r3, r3
 800444a:	b2db      	uxtb	r3, r3
 800444c:	095b      	lsrs	r3, r3, #5
 800444e:	b2db      	uxtb	r3, r3
 8004450:	f043 0302 	orr.w	r3, r3, #2
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d102      	bne.n	8004460 <HAL_RCC_OscConfig+0xa4c>
 800445a:	4b84      	ldr	r3, [pc, #528]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	e013      	b.n	8004488 <HAL_RCC_OscConfig+0xa74>
 8004460:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004464:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004468:	2202      	movs	r2, #2
 800446a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004470:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	fa93 f2a3 	rbit	r2, r3
 800447a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800447e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	4b79      	ldr	r3, [pc, #484]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800448c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8004490:	2102      	movs	r1, #2
 8004492:	6011      	str	r1, [r2, #0]
 8004494:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004498:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800449c:	6812      	ldr	r2, [r2, #0]
 800449e:	fa92 f1a2 	rbit	r1, r2
 80044a2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044a6:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80044aa:	6011      	str	r1, [r2, #0]
  return result;
 80044ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80044b0:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80044b4:	6812      	ldr	r2, [r2, #0]
 80044b6:	fab2 f282 	clz	r2, r2
 80044ba:	b2d2      	uxtb	r2, r2
 80044bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044c0:	b2d2      	uxtb	r2, r2
 80044c2:	f002 021f 	and.w	r2, r2, #31
 80044c6:	2101      	movs	r1, #1
 80044c8:	fa01 f202 	lsl.w	r2, r1, r2
 80044cc:	4013      	ands	r3, r2
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d084      	beq.n	80043dc <HAL_RCC_OscConfig+0x9c8>
 80044d2:	e07f      	b.n	80045d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044d4:	f7fd f9ba 	bl	800184c <HAL_GetTick>
 80044d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044dc:	e00b      	b.n	80044f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80044de:	f7fd f9b5 	bl	800184c <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e2c4      	b.n	8004a80 <HAL_RCC_OscConfig+0x106c>
 80044f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80044fa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80044fe:	2202      	movs	r2, #2
 8004500:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004506:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	fa93 f2a3 	rbit	r2, r3
 8004510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004514:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800451e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8004522:	2202      	movs	r2, #2
 8004524:	601a      	str	r2, [r3, #0]
 8004526:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800452a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	fa93 f2a3 	rbit	r2, r3
 8004534:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004538:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800453c:	601a      	str	r2, [r3, #0]
  return result;
 800453e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004542:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8004546:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004548:	fab3 f383 	clz	r3, r3
 800454c:	b2db      	uxtb	r3, r3
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	b2db      	uxtb	r3, r3
 8004552:	f043 0302 	orr.w	r3, r3, #2
 8004556:	b2db      	uxtb	r3, r3
 8004558:	2b02      	cmp	r3, #2
 800455a:	d102      	bne.n	8004562 <HAL_RCC_OscConfig+0xb4e>
 800455c:	4b43      	ldr	r3, [pc, #268]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	e013      	b.n	800458a <HAL_RCC_OscConfig+0xb76>
 8004562:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004566:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800456a:	2202      	movs	r2, #2
 800456c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800456e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004572:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	fa93 f2a3 	rbit	r2, r3
 800457c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004580:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	4b39      	ldr	r3, [pc, #228]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800458e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004592:	2102      	movs	r1, #2
 8004594:	6011      	str	r1, [r2, #0]
 8004596:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800459a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800459e:	6812      	ldr	r2, [r2, #0]
 80045a0:	fa92 f1a2 	rbit	r1, r2
 80045a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045a8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80045ac:	6011      	str	r1, [r2, #0]
  return result;
 80045ae:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80045b2:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80045b6:	6812      	ldr	r2, [r2, #0]
 80045b8:	fab2 f282 	clz	r2, r2
 80045bc:	b2d2      	uxtb	r2, r2
 80045be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	f002 021f 	and.w	r2, r2, #31
 80045c8:	2101      	movs	r1, #1
 80045ca:	fa01 f202 	lsl.w	r2, r1, r2
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d184      	bne.n	80044de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80045d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d105      	bne.n	80045e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045dc:	4b23      	ldr	r3, [pc, #140]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 80045de:	69db      	ldr	r3, [r3, #28]
 80045e0:	4a22      	ldr	r2, [pc, #136]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 80045e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80045ec:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	69db      	ldr	r3, [r3, #28]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 8242 	beq.w	8004a7e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80045fa:	4b1c      	ldr	r3, [pc, #112]	; (800466c <HAL_RCC_OscConfig+0xc58>)
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	f003 030c 	and.w	r3, r3, #12
 8004602:	2b08      	cmp	r3, #8
 8004604:	f000 8213 	beq.w	8004a2e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004608:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800460c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	69db      	ldr	r3, [r3, #28]
 8004614:	2b02      	cmp	r3, #2
 8004616:	f040 8162 	bne.w	80048de <HAL_RCC_OscConfig+0xeca>
 800461a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800461e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004622:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004626:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004628:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800462c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	fa93 f2a3 	rbit	r2, r3
 8004636:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800463a:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800463e:	601a      	str	r2, [r3, #0]
  return result;
 8004640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004644:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8004648:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800464a:	fab3 f383 	clz	r3, r3
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004654:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	461a      	mov	r2, r3
 800465c:	2300      	movs	r3, #0
 800465e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004660:	f7fd f8f4 	bl	800184c <HAL_GetTick>
 8004664:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004668:	e00c      	b.n	8004684 <HAL_RCC_OscConfig+0xc70>
 800466a:	bf00      	nop
 800466c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004670:	f7fd f8ec 	bl	800184c <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d901      	bls.n	8004684 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8004680:	2303      	movs	r3, #3
 8004682:	e1fd      	b.n	8004a80 <HAL_RCC_OscConfig+0x106c>
 8004684:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004688:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800468c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004692:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004696:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	fa93 f2a3 	rbit	r2, r3
 80046a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046a4:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046a8:	601a      	str	r2, [r3, #0]
  return result;
 80046aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ae:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80046b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046b4:	fab3 f383 	clz	r3, r3
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	f043 0301 	orr.w	r3, r3, #1
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d102      	bne.n	80046ce <HAL_RCC_OscConfig+0xcba>
 80046c8:	4bb0      	ldr	r3, [pc, #704]	; (800498c <HAL_RCC_OscConfig+0xf78>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	e027      	b.n	800471e <HAL_RCC_OscConfig+0xd0a>
 80046ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046d2:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80046d6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046e0:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	fa93 f2a3 	rbit	r2, r3
 80046ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046ee:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80046f2:	601a      	str	r2, [r3, #0]
 80046f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80046f8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80046fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004700:	601a      	str	r2, [r3, #0]
 8004702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004706:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	fa93 f2a3 	rbit	r2, r3
 8004710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004714:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8004718:	601a      	str	r2, [r3, #0]
 800471a:	4b9c      	ldr	r3, [pc, #624]	; (800498c <HAL_RCC_OscConfig+0xf78>)
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004722:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004726:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800472a:	6011      	str	r1, [r2, #0]
 800472c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004730:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8004734:	6812      	ldr	r2, [r2, #0]
 8004736:	fa92 f1a2 	rbit	r1, r2
 800473a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800473e:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8004742:	6011      	str	r1, [r2, #0]
  return result;
 8004744:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004748:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	fab2 f282 	clz	r2, r2
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	f042 0220 	orr.w	r2, r2, #32
 8004758:	b2d2      	uxtb	r2, r2
 800475a:	f002 021f 	and.w	r2, r2, #31
 800475e:	2101      	movs	r1, #1
 8004760:	fa01 f202 	lsl.w	r2, r1, r2
 8004764:	4013      	ands	r3, r2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d182      	bne.n	8004670 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800476a:	4b88      	ldr	r3, [pc, #544]	; (800498c <HAL_RCC_OscConfig+0xf78>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004776:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800477e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004782:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	430b      	orrs	r3, r1
 800478c:	497f      	ldr	r1, [pc, #508]	; (800498c <HAL_RCC_OscConfig+0xf78>)
 800478e:	4313      	orrs	r3, r2
 8004790:	604b      	str	r3, [r1, #4]
 8004792:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004796:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800479a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800479e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047a4:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	fa93 f2a3 	rbit	r2, r3
 80047ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047b2:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80047b6:	601a      	str	r2, [r3, #0]
  return result;
 80047b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047bc:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80047c0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047c2:	fab3 f383 	clz	r3, r3
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80047cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	461a      	mov	r2, r3
 80047d4:	2301      	movs	r3, #1
 80047d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047d8:	f7fd f838 	bl	800184c <HAL_GetTick>
 80047dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80047e0:	e009      	b.n	80047f6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047e2:	f7fd f833 	bl	800184c <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80047ec:	1ad3      	subs	r3, r2, r3
 80047ee:	2b02      	cmp	r3, #2
 80047f0:	d901      	bls.n	80047f6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e144      	b.n	8004a80 <HAL_RCC_OscConfig+0x106c>
 80047f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80047fa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 80047fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004802:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004808:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	fa93 f2a3 	rbit	r2, r3
 8004812:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004816:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800481a:	601a      	str	r2, [r3, #0]
  return result;
 800481c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004820:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8004824:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004826:	fab3 f383 	clz	r3, r3
 800482a:	b2db      	uxtb	r3, r3
 800482c:	095b      	lsrs	r3, r3, #5
 800482e:	b2db      	uxtb	r3, r3
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b01      	cmp	r3, #1
 8004838:	d102      	bne.n	8004840 <HAL_RCC_OscConfig+0xe2c>
 800483a:	4b54      	ldr	r3, [pc, #336]	; (800498c <HAL_RCC_OscConfig+0xf78>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	e027      	b.n	8004890 <HAL_RCC_OscConfig+0xe7c>
 8004840:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004844:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004848:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800484c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800484e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004852:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	fa93 f2a3 	rbit	r2, r3
 800485c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004860:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004864:	601a      	str	r2, [r3, #0]
 8004866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800486a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800486e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004878:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	fa93 f2a3 	rbit	r2, r3
 8004882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004886:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	4b3f      	ldr	r3, [pc, #252]	; (800498c <HAL_RCC_OscConfig+0xf78>)
 800488e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004890:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004894:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004898:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800489c:	6011      	str	r1, [r2, #0]
 800489e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048a2:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 80048a6:	6812      	ldr	r2, [r2, #0]
 80048a8:	fa92 f1a2 	rbit	r1, r2
 80048ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048b0:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80048b4:	6011      	str	r1, [r2, #0]
  return result;
 80048b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80048ba:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 80048be:	6812      	ldr	r2, [r2, #0]
 80048c0:	fab2 f282 	clz	r2, r2
 80048c4:	b2d2      	uxtb	r2, r2
 80048c6:	f042 0220 	orr.w	r2, r2, #32
 80048ca:	b2d2      	uxtb	r2, r2
 80048cc:	f002 021f 	and.w	r2, r2, #31
 80048d0:	2101      	movs	r1, #1
 80048d2:	fa01 f202 	lsl.w	r2, r1, r2
 80048d6:	4013      	ands	r3, r2
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d082      	beq.n	80047e2 <HAL_RCC_OscConfig+0xdce>
 80048dc:	e0cf      	b.n	8004a7e <HAL_RCC_OscConfig+0x106a>
 80048de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048e2:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80048e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048f0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	fa93 f2a3 	rbit	r2, r3
 80048fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80048fe:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8004902:	601a      	str	r2, [r3, #0]
  return result;
 8004904:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004908:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800490c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800490e:	fab3 f383 	clz	r3, r3
 8004912:	b2db      	uxtb	r3, r3
 8004914:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004918:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800491c:	009b      	lsls	r3, r3, #2
 800491e:	461a      	mov	r2, r3
 8004920:	2300      	movs	r3, #0
 8004922:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004924:	f7fc ff92 	bl	800184c <HAL_GetTick>
 8004928:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800492c:	e009      	b.n	8004942 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800492e:	f7fc ff8d 	bl	800184c <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e09e      	b.n	8004a80 <HAL_RCC_OscConfig+0x106c>
 8004942:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004946:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 800494a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800494e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004950:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004954:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	fa93 f2a3 	rbit	r2, r3
 800495e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004962:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004966:	601a      	str	r2, [r3, #0]
  return result;
 8004968:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800496c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004970:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004972:	fab3 f383 	clz	r3, r3
 8004976:	b2db      	uxtb	r3, r3
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f043 0301 	orr.w	r3, r3, #1
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b01      	cmp	r3, #1
 8004984:	d104      	bne.n	8004990 <HAL_RCC_OscConfig+0xf7c>
 8004986:	4b01      	ldr	r3, [pc, #4]	; (800498c <HAL_RCC_OscConfig+0xf78>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	e029      	b.n	80049e0 <HAL_RCC_OscConfig+0xfcc>
 800498c:	40021000 	.word	0x40021000
 8004990:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004994:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004998:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800499c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800499e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049a2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	fa93 f2a3 	rbit	r2, r3
 80049ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049b0:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 80049b4:	601a      	str	r2, [r3, #0]
 80049b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049ba:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80049be:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049c2:	601a      	str	r2, [r3, #0]
 80049c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049c8:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	fa93 f2a3 	rbit	r2, r3
 80049d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80049d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80049da:	601a      	str	r2, [r3, #0]
 80049dc:	4b2b      	ldr	r3, [pc, #172]	; (8004a8c <HAL_RCC_OscConfig+0x1078>)
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049e4:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80049e8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80049ec:	6011      	str	r1, [r2, #0]
 80049ee:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80049f2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	fa92 f1a2 	rbit	r1, r2
 80049fc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a00:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004a04:	6011      	str	r1, [r2, #0]
  return result;
 8004a06:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004a0a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8004a0e:	6812      	ldr	r2, [r2, #0]
 8004a10:	fab2 f282 	clz	r2, r2
 8004a14:	b2d2      	uxtb	r2, r2
 8004a16:	f042 0220 	orr.w	r2, r2, #32
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	f002 021f 	and.w	r2, r2, #31
 8004a20:	2101      	movs	r1, #1
 8004a22:	fa01 f202 	lsl.w	r2, r1, r2
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d180      	bne.n	800492e <HAL_RCC_OscConfig+0xf1a>
 8004a2c:	e027      	b.n	8004a7e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	69db      	ldr	r3, [r3, #28]
 8004a3a:	2b01      	cmp	r3, #1
 8004a3c:	d101      	bne.n	8004a42 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	e01e      	b.n	8004a80 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a42:	4b12      	ldr	r3, [pc, #72]	; (8004a8c <HAL_RCC_OscConfig+0x1078>)
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a4a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004a4e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a52:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a56:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d10b      	bne.n	8004a7a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004a62:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004a66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004a6e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d001      	beq.n	8004a7e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000

08004a90 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b09e      	sub	sp, #120	; 0x78
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e162      	b.n	8004d6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004aa8:	4b90      	ldr	r3, [pc, #576]	; (8004cec <HAL_RCC_ClockConfig+0x25c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d910      	bls.n	8004ad8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab6:	4b8d      	ldr	r3, [pc, #564]	; (8004cec <HAL_RCC_ClockConfig+0x25c>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f023 0207 	bic.w	r2, r3, #7
 8004abe:	498b      	ldr	r1, [pc, #556]	; (8004cec <HAL_RCC_ClockConfig+0x25c>)
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ac6:	4b89      	ldr	r3, [pc, #548]	; (8004cec <HAL_RCC_ClockConfig+0x25c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d001      	beq.n	8004ad8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e14a      	b.n	8004d6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 0302 	and.w	r3, r3, #2
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d008      	beq.n	8004af6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae4:	4b82      	ldr	r3, [pc, #520]	; (8004cf0 <HAL_RCC_ClockConfig+0x260>)
 8004ae6:	685b      	ldr	r3, [r3, #4]
 8004ae8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	497f      	ldr	r1, [pc, #508]	; (8004cf0 <HAL_RCC_ClockConfig+0x260>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f003 0301 	and.w	r3, r3, #1
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 80dc 	beq.w	8004cbc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d13c      	bne.n	8004b86 <HAL_RCC_ClockConfig+0xf6>
 8004b0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b10:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b12:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b14:	fa93 f3a3 	rbit	r3, r3
 8004b18:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8004b1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b1c:	fab3 f383 	clz	r3, r3
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	095b      	lsrs	r3, r3, #5
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	f043 0301 	orr.w	r3, r3, #1
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d102      	bne.n	8004b36 <HAL_RCC_ClockConfig+0xa6>
 8004b30:	4b6f      	ldr	r3, [pc, #444]	; (8004cf0 <HAL_RCC_ClockConfig+0x260>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	e00f      	b.n	8004b56 <HAL_RCC_ClockConfig+0xc6>
 8004b36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b3a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b3c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b3e:	fa93 f3a3 	rbit	r3, r3
 8004b42:	667b      	str	r3, [r7, #100]	; 0x64
 8004b44:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004b48:	663b      	str	r3, [r7, #96]	; 0x60
 8004b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b4c:	fa93 f3a3 	rbit	r3, r3
 8004b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b52:	4b67      	ldr	r3, [pc, #412]	; (8004cf0 <HAL_RCC_ClockConfig+0x260>)
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b5a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b5c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b5e:	fa92 f2a2 	rbit	r2, r2
 8004b62:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004b64:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004b66:	fab2 f282 	clz	r2, r2
 8004b6a:	b2d2      	uxtb	r2, r2
 8004b6c:	f042 0220 	orr.w	r2, r2, #32
 8004b70:	b2d2      	uxtb	r2, r2
 8004b72:	f002 021f 	and.w	r2, r2, #31
 8004b76:	2101      	movs	r1, #1
 8004b78:	fa01 f202 	lsl.w	r2, r1, r2
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d17b      	bne.n	8004c7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e0f3      	b.n	8004d6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d13c      	bne.n	8004c08 <HAL_RCC_ClockConfig+0x178>
 8004b8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b92:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b96:	fa93 f3a3 	rbit	r3, r3
 8004b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9e:	fab3 f383 	clz	r3, r3
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	f043 0301 	orr.w	r3, r3, #1
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d102      	bne.n	8004bb8 <HAL_RCC_ClockConfig+0x128>
 8004bb2:	4b4f      	ldr	r3, [pc, #316]	; (8004cf0 <HAL_RCC_ClockConfig+0x260>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	e00f      	b.n	8004bd8 <HAL_RCC_ClockConfig+0x148>
 8004bb8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bbc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bc0:	fa93 f3a3 	rbit	r3, r3
 8004bc4:	647b      	str	r3, [r7, #68]	; 0x44
 8004bc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004bca:	643b      	str	r3, [r7, #64]	; 0x40
 8004bcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bce:	fa93 f3a3 	rbit	r3, r3
 8004bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bd4:	4b46      	ldr	r3, [pc, #280]	; (8004cf0 <HAL_RCC_ClockConfig+0x260>)
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004bdc:	63ba      	str	r2, [r7, #56]	; 0x38
 8004bde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004be0:	fa92 f2a2 	rbit	r2, r2
 8004be4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004be6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004be8:	fab2 f282 	clz	r2, r2
 8004bec:	b2d2      	uxtb	r2, r2
 8004bee:	f042 0220 	orr.w	r2, r2, #32
 8004bf2:	b2d2      	uxtb	r2, r2
 8004bf4:	f002 021f 	and.w	r2, r2, #31
 8004bf8:	2101      	movs	r1, #1
 8004bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d13a      	bne.n	8004c7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	e0b2      	b.n	8004d6e <HAL_RCC_ClockConfig+0x2de>
 8004c08:	2302      	movs	r3, #2
 8004c0a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c0e:	fa93 f3a3 	rbit	r3, r3
 8004c12:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c16:	fab3 f383 	clz	r3, r3
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	095b      	lsrs	r3, r3, #5
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d102      	bne.n	8004c30 <HAL_RCC_ClockConfig+0x1a0>
 8004c2a:	4b31      	ldr	r3, [pc, #196]	; (8004cf0 <HAL_RCC_ClockConfig+0x260>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	e00d      	b.n	8004c4c <HAL_RCC_ClockConfig+0x1bc>
 8004c30:	2302      	movs	r3, #2
 8004c32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c36:	fa93 f3a3 	rbit	r3, r3
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3c:	2302      	movs	r3, #2
 8004c3e:	623b      	str	r3, [r7, #32]
 8004c40:	6a3b      	ldr	r3, [r7, #32]
 8004c42:	fa93 f3a3 	rbit	r3, r3
 8004c46:	61fb      	str	r3, [r7, #28]
 8004c48:	4b29      	ldr	r3, [pc, #164]	; (8004cf0 <HAL_RCC_ClockConfig+0x260>)
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c4c:	2202      	movs	r2, #2
 8004c4e:	61ba      	str	r2, [r7, #24]
 8004c50:	69ba      	ldr	r2, [r7, #24]
 8004c52:	fa92 f2a2 	rbit	r2, r2
 8004c56:	617a      	str	r2, [r7, #20]
  return result;
 8004c58:	697a      	ldr	r2, [r7, #20]
 8004c5a:	fab2 f282 	clz	r2, r2
 8004c5e:	b2d2      	uxtb	r2, r2
 8004c60:	f042 0220 	orr.w	r2, r2, #32
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	f002 021f 	and.w	r2, r2, #31
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	fa01 f202 	lsl.w	r2, r1, r2
 8004c70:	4013      	ands	r3, r2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d101      	bne.n	8004c7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e079      	b.n	8004d6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c7a:	4b1d      	ldr	r3, [pc, #116]	; (8004cf0 <HAL_RCC_ClockConfig+0x260>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f023 0203 	bic.w	r2, r3, #3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	491a      	ldr	r1, [pc, #104]	; (8004cf0 <HAL_RCC_ClockConfig+0x260>)
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c8c:	f7fc fdde 	bl	800184c <HAL_GetTick>
 8004c90:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c92:	e00a      	b.n	8004caa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c94:	f7fc fdda 	bl	800184c <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d901      	bls.n	8004caa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004ca6:	2303      	movs	r3, #3
 8004ca8:	e061      	b.n	8004d6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004caa:	4b11      	ldr	r3, [pc, #68]	; (8004cf0 <HAL_RCC_ClockConfig+0x260>)
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	f003 020c 	and.w	r2, r3, #12
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d1eb      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cbc:	4b0b      	ldr	r3, [pc, #44]	; (8004cec <HAL_RCC_ClockConfig+0x25c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d214      	bcs.n	8004cf4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cca:	4b08      	ldr	r3, [pc, #32]	; (8004cec <HAL_RCC_ClockConfig+0x25c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f023 0207 	bic.w	r2, r3, #7
 8004cd2:	4906      	ldr	r1, [pc, #24]	; (8004cec <HAL_RCC_ClockConfig+0x25c>)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cda:	4b04      	ldr	r3, [pc, #16]	; (8004cec <HAL_RCC_ClockConfig+0x25c>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0307 	and.w	r3, r3, #7
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d005      	beq.n	8004cf4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e040      	b.n	8004d6e <HAL_RCC_ClockConfig+0x2de>
 8004cec:	40022000 	.word	0x40022000
 8004cf0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f003 0304 	and.w	r3, r3, #4
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d00:	4b1d      	ldr	r3, [pc, #116]	; (8004d78 <HAL_RCC_ClockConfig+0x2e8>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	491a      	ldr	r1, [pc, #104]	; (8004d78 <HAL_RCC_ClockConfig+0x2e8>)
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d009      	beq.n	8004d32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d1e:	4b16      	ldr	r3, [pc, #88]	; (8004d78 <HAL_RCC_ClockConfig+0x2e8>)
 8004d20:	685b      	ldr	r3, [r3, #4]
 8004d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	691b      	ldr	r3, [r3, #16]
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	4912      	ldr	r1, [pc, #72]	; (8004d78 <HAL_RCC_ClockConfig+0x2e8>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004d32:	f000 f829 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8004d36:	4601      	mov	r1, r0
 8004d38:	4b0f      	ldr	r3, [pc, #60]	; (8004d78 <HAL_RCC_ClockConfig+0x2e8>)
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d40:	22f0      	movs	r2, #240	; 0xf0
 8004d42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004d44:	693a      	ldr	r2, [r7, #16]
 8004d46:	fa92 f2a2 	rbit	r2, r2
 8004d4a:	60fa      	str	r2, [r7, #12]
  return result;
 8004d4c:	68fa      	ldr	r2, [r7, #12]
 8004d4e:	fab2 f282 	clz	r2, r2
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	40d3      	lsrs	r3, r2
 8004d56:	4a09      	ldr	r2, [pc, #36]	; (8004d7c <HAL_RCC_ClockConfig+0x2ec>)
 8004d58:	5cd3      	ldrb	r3, [r2, r3]
 8004d5a:	fa21 f303 	lsr.w	r3, r1, r3
 8004d5e:	4a08      	ldr	r2, [pc, #32]	; (8004d80 <HAL_RCC_ClockConfig+0x2f0>)
 8004d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004d62:	4b08      	ldr	r3, [pc, #32]	; (8004d84 <HAL_RCC_ClockConfig+0x2f4>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4618      	mov	r0, r3
 8004d68:	f7fc fd2c 	bl	80017c4 <HAL_InitTick>
  
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3778      	adds	r7, #120	; 0x78
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	08007250 	.word	0x08007250
 8004d80:	20000004 	.word	0x20000004
 8004d84:	20000008 	.word	0x20000008

08004d88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b08b      	sub	sp, #44	; 0x2c
 8004d8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	61fb      	str	r3, [r7, #28]
 8004d92:	2300      	movs	r3, #0
 8004d94:	61bb      	str	r3, [r7, #24]
 8004d96:	2300      	movs	r3, #0
 8004d98:	627b      	str	r3, [r7, #36]	; 0x24
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004da2:	4b29      	ldr	r3, [pc, #164]	; (8004e48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004da8:	69fb      	ldr	r3, [r7, #28]
 8004daa:	f003 030c 	and.w	r3, r3, #12
 8004dae:	2b04      	cmp	r3, #4
 8004db0:	d002      	beq.n	8004db8 <HAL_RCC_GetSysClockFreq+0x30>
 8004db2:	2b08      	cmp	r3, #8
 8004db4:	d003      	beq.n	8004dbe <HAL_RCC_GetSysClockFreq+0x36>
 8004db6:	e03c      	b.n	8004e32 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004db8:	4b24      	ldr	r3, [pc, #144]	; (8004e4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004dba:	623b      	str	r3, [r7, #32]
      break;
 8004dbc:	e03c      	b.n	8004e38 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004dc4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004dc8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	fa92 f2a2 	rbit	r2, r2
 8004dd0:	607a      	str	r2, [r7, #4]
  return result;
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	fab2 f282 	clz	r2, r2
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	40d3      	lsrs	r3, r2
 8004ddc:	4a1c      	ldr	r2, [pc, #112]	; (8004e50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8004dde:	5cd3      	ldrb	r3, [r2, r3]
 8004de0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004de2:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	220f      	movs	r2, #15
 8004dec:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	fa92 f2a2 	rbit	r2, r2
 8004df4:	60fa      	str	r2, [r7, #12]
  return result;
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	fab2 f282 	clz	r2, r2
 8004dfc:	b2d2      	uxtb	r2, r2
 8004dfe:	40d3      	lsrs	r3, r2
 8004e00:	4a14      	ldr	r2, [pc, #80]	; (8004e54 <HAL_RCC_GetSysClockFreq+0xcc>)
 8004e02:	5cd3      	ldrb	r3, [r2, r3]
 8004e04:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d008      	beq.n	8004e22 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e10:	4a0e      	ldr	r2, [pc, #56]	; (8004e4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e12:	69bb      	ldr	r3, [r7, #24]
 8004e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	fb02 f303 	mul.w	r3, r2, r3
 8004e1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004e20:	e004      	b.n	8004e2c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	4a0c      	ldr	r2, [pc, #48]	; (8004e58 <HAL_RCC_GetSysClockFreq+0xd0>)
 8004e26:	fb02 f303 	mul.w	r3, r2, r3
 8004e2a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	623b      	str	r3, [r7, #32]
      break;
 8004e30:	e002      	b.n	8004e38 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e32:	4b06      	ldr	r3, [pc, #24]	; (8004e4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e34:	623b      	str	r3, [r7, #32]
      break;
 8004e36:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004e38:	6a3b      	ldr	r3, [r7, #32]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	372c      	adds	r7, #44	; 0x2c
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop
 8004e48:	40021000 	.word	0x40021000
 8004e4c:	007a1200 	.word	0x007a1200
 8004e50:	08007268 	.word	0x08007268
 8004e54:	08007278 	.word	0x08007278
 8004e58:	003d0900 	.word	0x003d0900

08004e5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004e60:	4b03      	ldr	r3, [pc, #12]	; (8004e70 <HAL_RCC_GetHCLKFreq+0x14>)
 8004e62:	681b      	ldr	r3, [r3, #0]
}
 8004e64:	4618      	mov	r0, r3
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr
 8004e6e:	bf00      	nop
 8004e70:	20000004 	.word	0x20000004

08004e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004e7a:	f7ff ffef 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004e7e:	4601      	mov	r1, r0
 8004e80:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004e88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004e8c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	fa92 f2a2 	rbit	r2, r2
 8004e94:	603a      	str	r2, [r7, #0]
  return result;
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	fab2 f282 	clz	r2, r2
 8004e9c:	b2d2      	uxtb	r2, r2
 8004e9e:	40d3      	lsrs	r3, r2
 8004ea0:	4a04      	ldr	r2, [pc, #16]	; (8004eb4 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004ea2:	5cd3      	ldrb	r3, [r2, r3]
 8004ea4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3708      	adds	r7, #8
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	40021000 	.word	0x40021000
 8004eb4:	08007260 	.word	0x08007260

08004eb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004ebe:	f7ff ffcd 	bl	8004e5c <HAL_RCC_GetHCLKFreq>
 8004ec2:	4601      	mov	r1, r0
 8004ec4:	4b0b      	ldr	r3, [pc, #44]	; (8004ef4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004ecc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004ed0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	fa92 f2a2 	rbit	r2, r2
 8004ed8:	603a      	str	r2, [r7, #0]
  return result;
 8004eda:	683a      	ldr	r2, [r7, #0]
 8004edc:	fab2 f282 	clz	r2, r2
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	40d3      	lsrs	r3, r2
 8004ee4:	4a04      	ldr	r2, [pc, #16]	; (8004ef8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004ee6:	5cd3      	ldrb	r3, [r2, r3]
 8004ee8:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004eec:	4618      	mov	r0, r3
 8004eee:	3708      	adds	r7, #8
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}
 8004ef4:	40021000 	.word	0x40021000
 8004ef8:	08007260 	.word	0x08007260

08004efc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b092      	sub	sp, #72	; 0x48
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f000 80d4 	beq.w	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f20:	4b4e      	ldr	r3, [pc, #312]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f22:	69db      	ldr	r3, [r3, #28]
 8004f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d10e      	bne.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f2c:	4b4b      	ldr	r3, [pc, #300]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	4a4a      	ldr	r2, [pc, #296]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f36:	61d3      	str	r3, [r2, #28]
 8004f38:	4b48      	ldr	r3, [pc, #288]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f3a:	69db      	ldr	r3, [r3, #28]
 8004f3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f40:	60bb      	str	r3, [r7, #8]
 8004f42:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f44:	2301      	movs	r3, #1
 8004f46:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f4a:	4b45      	ldr	r3, [pc, #276]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d118      	bne.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f56:	4b42      	ldr	r3, [pc, #264]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a41      	ldr	r2, [pc, #260]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f60:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f62:	f7fc fc73 	bl	800184c <HAL_GetTick>
 8004f66:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f68:	e008      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f6a:	f7fc fc6f 	bl	800184c <HAL_GetTick>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f72:	1ad3      	subs	r3, r2, r3
 8004f74:	2b64      	cmp	r3, #100	; 0x64
 8004f76:	d901      	bls.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004f78:	2303      	movs	r3, #3
 8004f7a:	e14b      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f7c:	4b38      	ldr	r3, [pc, #224]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d0f0      	beq.n	8004f6a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004f88:	4b34      	ldr	r3, [pc, #208]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f8a:	6a1b      	ldr	r3, [r3, #32]
 8004f8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f90:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004f92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f000 8084 	beq.w	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004fa4:	429a      	cmp	r2, r3
 8004fa6:	d07c      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004fa8:	4b2c      	ldr	r3, [pc, #176]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fb2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fb6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	fa93 f3a3 	rbit	r3, r3
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004fc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004fc2:	fab3 f383 	clz	r3, r3
 8004fc6:	b2db      	uxtb	r3, r3
 8004fc8:	461a      	mov	r2, r3
 8004fca:	4b26      	ldr	r3, [pc, #152]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004fcc:	4413      	add	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004fda:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fde:	fa93 f3a3 	rbit	r3, r3
 8004fe2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004fe4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe6:	fab3 f383 	clz	r3, r3
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	461a      	mov	r2, r3
 8004fee:	4b1d      	ldr	r3, [pc, #116]	; (8005064 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	461a      	mov	r2, r3
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004ffa:	4a18      	ldr	r2, [pc, #96]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ffc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ffe:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8005000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d04b      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800500a:	f7fc fc1f 	bl	800184c <HAL_GetTick>
 800500e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005010:	e00a      	b.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005012:	f7fc fc1b 	bl	800184c <HAL_GetTick>
 8005016:	4602      	mov	r2, r0
 8005018:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800501a:	1ad3      	subs	r3, r2, r3
 800501c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005020:	4293      	cmp	r3, r2
 8005022:	d901      	bls.n	8005028 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e0f5      	b.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8005028:	2302      	movs	r3, #2
 800502a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800502c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502e:	fa93 f3a3 	rbit	r3, r3
 8005032:	627b      	str	r3, [r7, #36]	; 0x24
 8005034:	2302      	movs	r3, #2
 8005036:	623b      	str	r3, [r7, #32]
 8005038:	6a3b      	ldr	r3, [r7, #32]
 800503a:	fa93 f3a3 	rbit	r3, r3
 800503e:	61fb      	str	r3, [r7, #28]
  return result;
 8005040:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005042:	fab3 f383 	clz	r3, r3
 8005046:	b2db      	uxtb	r3, r3
 8005048:	095b      	lsrs	r3, r3, #5
 800504a:	b2db      	uxtb	r3, r3
 800504c:	f043 0302 	orr.w	r3, r3, #2
 8005050:	b2db      	uxtb	r3, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d108      	bne.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8005056:	4b01      	ldr	r3, [pc, #4]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	e00d      	b.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800505c:	40021000 	.word	0x40021000
 8005060:	40007000 	.word	0x40007000
 8005064:	10908100 	.word	0x10908100
 8005068:	2302      	movs	r3, #2
 800506a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	fa93 f3a3 	rbit	r3, r3
 8005072:	617b      	str	r3, [r7, #20]
 8005074:	4b69      	ldr	r3, [pc, #420]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005078:	2202      	movs	r2, #2
 800507a:	613a      	str	r2, [r7, #16]
 800507c:	693a      	ldr	r2, [r7, #16]
 800507e:	fa92 f2a2 	rbit	r2, r2
 8005082:	60fa      	str	r2, [r7, #12]
  return result;
 8005084:	68fa      	ldr	r2, [r7, #12]
 8005086:	fab2 f282 	clz	r2, r2
 800508a:	b2d2      	uxtb	r2, r2
 800508c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005090:	b2d2      	uxtb	r2, r2
 8005092:	f002 021f 	and.w	r2, r2, #31
 8005096:	2101      	movs	r1, #1
 8005098:	fa01 f202 	lsl.w	r2, r1, r2
 800509c:	4013      	ands	r3, r2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0b7      	beq.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80050a2:	4b5e      	ldr	r3, [pc, #376]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050a4:	6a1b      	ldr	r3, [r3, #32]
 80050a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	495b      	ldr	r1, [pc, #364]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80050b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d105      	bne.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050bc:	4b57      	ldr	r3, [pc, #348]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050be:	69db      	ldr	r3, [r3, #28]
 80050c0:	4a56      	ldr	r2, [pc, #344]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 0301 	and.w	r3, r3, #1
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d008      	beq.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050d4:	4b51      	ldr	r3, [pc, #324]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d8:	f023 0203 	bic.w	r2, r3, #3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	494e      	ldr	r1, [pc, #312]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050e2:	4313      	orrs	r3, r2
 80050e4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0320 	and.w	r3, r3, #32
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d008      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80050f2:	4b4a      	ldr	r3, [pc, #296]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80050f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f6:	f023 0210 	bic.w	r2, r3, #16
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	4947      	ldr	r1, [pc, #284]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005100:	4313      	orrs	r3, r2
 8005102:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d008      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8005110:	4b42      	ldr	r3, [pc, #264]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	493f      	ldr	r1, [pc, #252]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800511e:	4313      	orrs	r3, r2
 8005120:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d008      	beq.n	8005140 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800512e:	4b3b      	ldr	r3, [pc, #236]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005132:	f023 0220 	bic.w	r2, r3, #32
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	4938      	ldr	r1, [pc, #224]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800513c:	4313      	orrs	r3, r2
 800513e:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d008      	beq.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800514c:	4b33      	ldr	r3, [pc, #204]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800514e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005150:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	695b      	ldr	r3, [r3, #20]
 8005158:	4930      	ldr	r1, [pc, #192]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800515a:	4313      	orrs	r3, r2
 800515c:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005166:	2b00      	cmp	r3, #0
 8005168:	d008      	beq.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800516a:	4b2c      	ldr	r3, [pc, #176]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	4929      	ldr	r1, [pc, #164]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005178:	4313      	orrs	r3, r2
 800517a:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d008      	beq.n	800519a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8005188:	4b24      	ldr	r3, [pc, #144]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	699b      	ldr	r3, [r3, #24]
 8005194:	4921      	ldr	r1, [pc, #132]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005196:	4313      	orrs	r3, r2
 8005198:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d008      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80051a6:	4b1d      	ldr	r3, [pc, #116]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	491a      	ldr	r1, [pc, #104]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	630b      	str	r3, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d008      	beq.n	80051d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80051c4:	4b15      	ldr	r3, [pc, #84]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051c8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d0:	4912      	ldr	r1, [pc, #72]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d008      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80051e2:	4b0e      	ldr	r3, [pc, #56]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051e6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	490b      	ldr	r1, [pc, #44]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8005202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005204:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520c:	4903      	ldr	r1, [pc, #12]	; (800521c <HAL_RCCEx_PeriphCLKConfig+0x320>)
 800520e:	4313      	orrs	r3, r2
 8005210:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3748      	adds	r7, #72	; 0x48
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40021000 	.word	0x40021000

08005220 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e040      	b.n	80052b4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc f9ae 	bl	80015a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2224      	movs	r2, #36	; 0x24
 800524c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f022 0201 	bic.w	r2, r2, #1
 800525c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f000 f8b6 	bl	80053d0 <UART_SetConfig>
 8005264:	4603      	mov	r3, r0
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e022      	b.n	80052b4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f9e0 	bl	800563c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800528a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	689a      	ldr	r2, [r3, #8]
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800529a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	681a      	ldr	r2, [r3, #0]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f042 0201 	orr.w	r2, r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fa67 	bl	8005780 <UART_CheckIdleState>
 80052b2:	4603      	mov	r3, r0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3708      	adds	r7, #8
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b08a      	sub	sp, #40	; 0x28
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	603b      	str	r3, [r7, #0]
 80052c8:	4613      	mov	r3, r2
 80052ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052d0:	2b20      	cmp	r3, #32
 80052d2:	d178      	bne.n	80053c6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d002      	beq.n	80052e0 <HAL_UART_Transmit+0x24>
 80052da:	88fb      	ldrh	r3, [r7, #6]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d101      	bne.n	80052e4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e071      	b.n	80053c8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2221      	movs	r2, #33	; 0x21
 80052f0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052f2:	f7fc faab 	bl	800184c <HAL_GetTick>
 80052f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	88fa      	ldrh	r2, [r7, #6]
 80052fc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	88fa      	ldrh	r2, [r7, #6]
 8005304:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005310:	d108      	bne.n	8005324 <HAL_UART_Transmit+0x68>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	e003      	b.n	800532c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800532c:	e030      	b.n	8005390 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	9300      	str	r3, [sp, #0]
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2200      	movs	r2, #0
 8005336:	2180      	movs	r1, #128	; 0x80
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 fac9 	bl	80058d0 <UART_WaitOnFlagUntilTimeout>
 800533e:	4603      	mov	r3, r0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d004      	beq.n	800534e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2220      	movs	r2, #32
 8005348:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800534a:	2303      	movs	r3, #3
 800534c:	e03c      	b.n	80053c8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800534e:	69fb      	ldr	r3, [r7, #28]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	881a      	ldrh	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005360:	b292      	uxth	r2, r2
 8005362:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005364:	69bb      	ldr	r3, [r7, #24]
 8005366:	3302      	adds	r3, #2
 8005368:	61bb      	str	r3, [r7, #24]
 800536a:	e008      	b.n	800537e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	781a      	ldrb	r2, [r3, #0]
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	b292      	uxth	r2, r2
 8005376:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	3301      	adds	r3, #1
 800537c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005384:	b29b      	uxth	r3, r3
 8005386:	3b01      	subs	r3, #1
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005396:	b29b      	uxth	r3, r3
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1c8      	bne.n	800532e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	2200      	movs	r2, #0
 80053a4:	2140      	movs	r1, #64	; 0x40
 80053a6:	68f8      	ldr	r0, [r7, #12]
 80053a8:	f000 fa92 	bl	80058d0 <UART_WaitOnFlagUntilTimeout>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d004      	beq.n	80053bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e005      	b.n	80053c8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	2220      	movs	r2, #32
 80053c0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e000      	b.n	80053c8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80053c6:	2302      	movs	r3, #2
  }
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3720      	adds	r7, #32
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b088      	sub	sp, #32
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053d8:	2300      	movs	r3, #0
 80053da:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689a      	ldr	r2, [r3, #8]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	431a      	orrs	r2, r3
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	431a      	orrs	r2, r3
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	69db      	ldr	r3, [r3, #28]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	4b8a      	ldr	r3, [pc, #552]	; (8005624 <UART_SetConfig+0x254>)
 80053fc:	4013      	ands	r3, r2
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	6812      	ldr	r2, [r2, #0]
 8005402:	6979      	ldr	r1, [r7, #20]
 8005404:	430b      	orrs	r3, r1
 8005406:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	68da      	ldr	r2, [r3, #12]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	430a      	orrs	r2, r1
 8005440:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a78      	ldr	r2, [pc, #480]	; (8005628 <UART_SetConfig+0x258>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d120      	bne.n	800548e <UART_SetConfig+0xbe>
 800544c:	4b77      	ldr	r3, [pc, #476]	; (800562c <UART_SetConfig+0x25c>)
 800544e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005450:	f003 0303 	and.w	r3, r3, #3
 8005454:	2b03      	cmp	r3, #3
 8005456:	d817      	bhi.n	8005488 <UART_SetConfig+0xb8>
 8005458:	a201      	add	r2, pc, #4	; (adr r2, 8005460 <UART_SetConfig+0x90>)
 800545a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545e:	bf00      	nop
 8005460:	08005471 	.word	0x08005471
 8005464:	0800547d 	.word	0x0800547d
 8005468:	08005483 	.word	0x08005483
 800546c:	08005477 	.word	0x08005477
 8005470:	2300      	movs	r3, #0
 8005472:	77fb      	strb	r3, [r7, #31]
 8005474:	e01d      	b.n	80054b2 <UART_SetConfig+0xe2>
 8005476:	2302      	movs	r3, #2
 8005478:	77fb      	strb	r3, [r7, #31]
 800547a:	e01a      	b.n	80054b2 <UART_SetConfig+0xe2>
 800547c:	2304      	movs	r3, #4
 800547e:	77fb      	strb	r3, [r7, #31]
 8005480:	e017      	b.n	80054b2 <UART_SetConfig+0xe2>
 8005482:	2308      	movs	r3, #8
 8005484:	77fb      	strb	r3, [r7, #31]
 8005486:	e014      	b.n	80054b2 <UART_SetConfig+0xe2>
 8005488:	2310      	movs	r3, #16
 800548a:	77fb      	strb	r3, [r7, #31]
 800548c:	e011      	b.n	80054b2 <UART_SetConfig+0xe2>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a67      	ldr	r2, [pc, #412]	; (8005630 <UART_SetConfig+0x260>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d102      	bne.n	800549e <UART_SetConfig+0xce>
 8005498:	2300      	movs	r3, #0
 800549a:	77fb      	strb	r3, [r7, #31]
 800549c:	e009      	b.n	80054b2 <UART_SetConfig+0xe2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a64      	ldr	r2, [pc, #400]	; (8005634 <UART_SetConfig+0x264>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d102      	bne.n	80054ae <UART_SetConfig+0xde>
 80054a8:	2300      	movs	r3, #0
 80054aa:	77fb      	strb	r3, [r7, #31]
 80054ac:	e001      	b.n	80054b2 <UART_SetConfig+0xe2>
 80054ae:	2310      	movs	r3, #16
 80054b0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ba:	d15a      	bne.n	8005572 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 80054bc:	7ffb      	ldrb	r3, [r7, #31]
 80054be:	2b08      	cmp	r3, #8
 80054c0:	d827      	bhi.n	8005512 <UART_SetConfig+0x142>
 80054c2:	a201      	add	r2, pc, #4	; (adr r2, 80054c8 <UART_SetConfig+0xf8>)
 80054c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054c8:	080054ed 	.word	0x080054ed
 80054cc:	080054f5 	.word	0x080054f5
 80054d0:	080054fd 	.word	0x080054fd
 80054d4:	08005513 	.word	0x08005513
 80054d8:	08005503 	.word	0x08005503
 80054dc:	08005513 	.word	0x08005513
 80054e0:	08005513 	.word	0x08005513
 80054e4:	08005513 	.word	0x08005513
 80054e8:	0800550b 	.word	0x0800550b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054ec:	f7ff fcc2 	bl	8004e74 <HAL_RCC_GetPCLK1Freq>
 80054f0:	61b8      	str	r0, [r7, #24]
        break;
 80054f2:	e013      	b.n	800551c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054f4:	f7ff fce0 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 80054f8:	61b8      	str	r0, [r7, #24]
        break;
 80054fa:	e00f      	b.n	800551c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054fc:	4b4e      	ldr	r3, [pc, #312]	; (8005638 <UART_SetConfig+0x268>)
 80054fe:	61bb      	str	r3, [r7, #24]
        break;
 8005500:	e00c      	b.n	800551c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005502:	f7ff fc41 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 8005506:	61b8      	str	r0, [r7, #24]
        break;
 8005508:	e008      	b.n	800551c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800550a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800550e:	61bb      	str	r3, [r7, #24]
        break;
 8005510:	e004      	b.n	800551c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005512:	2300      	movs	r3, #0
 8005514:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	77bb      	strb	r3, [r7, #30]
        break;
 800551a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800551c:	69bb      	ldr	r3, [r7, #24]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d074      	beq.n	800560c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	005a      	lsls	r2, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	441a      	add	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	fbb2 f3f3 	udiv	r3, r2, r3
 8005536:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	2b0f      	cmp	r3, #15
 800553c:	d916      	bls.n	800556c <UART_SetConfig+0x19c>
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005544:	d212      	bcs.n	800556c <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	b29b      	uxth	r3, r3
 800554a:	f023 030f 	bic.w	r3, r3, #15
 800554e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	085b      	lsrs	r3, r3, #1
 8005554:	b29b      	uxth	r3, r3
 8005556:	f003 0307 	and.w	r3, r3, #7
 800555a:	b29a      	uxth	r2, r3
 800555c:	89fb      	ldrh	r3, [r7, #14]
 800555e:	4313      	orrs	r3, r2
 8005560:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	89fa      	ldrh	r2, [r7, #14]
 8005568:	60da      	str	r2, [r3, #12]
 800556a:	e04f      	b.n	800560c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	77bb      	strb	r3, [r7, #30]
 8005570:	e04c      	b.n	800560c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005572:	7ffb      	ldrb	r3, [r7, #31]
 8005574:	2b08      	cmp	r3, #8
 8005576:	d828      	bhi.n	80055ca <UART_SetConfig+0x1fa>
 8005578:	a201      	add	r2, pc, #4	; (adr r2, 8005580 <UART_SetConfig+0x1b0>)
 800557a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557e:	bf00      	nop
 8005580:	080055a5 	.word	0x080055a5
 8005584:	080055ad 	.word	0x080055ad
 8005588:	080055b5 	.word	0x080055b5
 800558c:	080055cb 	.word	0x080055cb
 8005590:	080055bb 	.word	0x080055bb
 8005594:	080055cb 	.word	0x080055cb
 8005598:	080055cb 	.word	0x080055cb
 800559c:	080055cb 	.word	0x080055cb
 80055a0:	080055c3 	.word	0x080055c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a4:	f7ff fc66 	bl	8004e74 <HAL_RCC_GetPCLK1Freq>
 80055a8:	61b8      	str	r0, [r7, #24]
        break;
 80055aa:	e013      	b.n	80055d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055ac:	f7ff fc84 	bl	8004eb8 <HAL_RCC_GetPCLK2Freq>
 80055b0:	61b8      	str	r0, [r7, #24]
        break;
 80055b2:	e00f      	b.n	80055d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055b4:	4b20      	ldr	r3, [pc, #128]	; (8005638 <UART_SetConfig+0x268>)
 80055b6:	61bb      	str	r3, [r7, #24]
        break;
 80055b8:	e00c      	b.n	80055d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ba:	f7ff fbe5 	bl	8004d88 <HAL_RCC_GetSysClockFreq>
 80055be:	61b8      	str	r0, [r7, #24]
        break;
 80055c0:	e008      	b.n	80055d4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055c6:	61bb      	str	r3, [r7, #24]
        break;
 80055c8:	e004      	b.n	80055d4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	77bb      	strb	r3, [r7, #30]
        break;
 80055d2:	bf00      	nop
    }

    if (pclk != 0U)
 80055d4:	69bb      	ldr	r3, [r7, #24]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d018      	beq.n	800560c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	085a      	lsrs	r2, r3, #1
 80055e0:	69bb      	ldr	r3, [r7, #24]
 80055e2:	441a      	add	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b0f      	cmp	r3, #15
 80055f2:	d909      	bls.n	8005608 <UART_SetConfig+0x238>
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055fa:	d205      	bcs.n	8005608 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	b29a      	uxth	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	e001      	b.n	800560c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005618:	7fbb      	ldrb	r3, [r7, #30]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3720      	adds	r7, #32
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	efff69f3 	.word	0xefff69f3
 8005628:	40013800 	.word	0x40013800
 800562c:	40021000 	.word	0x40021000
 8005630:	40004400 	.word	0x40004400
 8005634:	40004800 	.word	0x40004800
 8005638:	007a1200 	.word	0x007a1200

0800563c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005648:	f003 0301 	and.w	r3, r3, #1
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d00a      	beq.n	8005688 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	430a      	orrs	r2, r1
 8005686:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d0:	f003 0310 	and.w	r3, r3, #16
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	f003 0320 	and.w	r3, r3, #32
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01a      	beq.n	8005752 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	685b      	ldr	r3, [r3, #4]
 8005722:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800573a:	d10a      	bne.n	8005752 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	430a      	orrs	r2, r1
 8005750:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005756:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00a      	beq.n	8005774 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	430a      	orrs	r2, r1
 8005772:	605a      	str	r2, [r3, #4]
  }
}
 8005774:	bf00      	nop
 8005776:	370c      	adds	r7, #12
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b098      	sub	sp, #96	; 0x60
 8005784:	af02      	add	r7, sp, #8
 8005786:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005790:	f7fc f85c 	bl	800184c <HAL_GetTick>
 8005794:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d12e      	bne.n	8005802 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057ac:	2200      	movs	r2, #0
 80057ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f88c 	bl	80058d0 <UART_WaitOnFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d021      	beq.n	8005802 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057d2:	653b      	str	r3, [r7, #80]	; 0x50
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	461a      	mov	r2, r3
 80057da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057dc:	647b      	str	r3, [r7, #68]	; 0x44
 80057de:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057e4:	e841 2300 	strex	r3, r2, [r1]
 80057e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d1e6      	bne.n	80057be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2220      	movs	r2, #32
 80057f4:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80057fe:	2303      	movs	r3, #3
 8005800:	e062      	b.n	80058c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f003 0304 	and.w	r3, r3, #4
 800580c:	2b04      	cmp	r3, #4
 800580e:	d149      	bne.n	80058a4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005810:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005818:	2200      	movs	r2, #0
 800581a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 f856 	bl	80058d0 <UART_WaitOnFlagUntilTimeout>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d03c      	beq.n	80058a4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	e853 3f00 	ldrex	r3, [r3]
 8005836:	623b      	str	r3, [r7, #32]
   return(result);
 8005838:	6a3b      	ldr	r3, [r7, #32]
 800583a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800583e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	461a      	mov	r2, r3
 8005846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005848:	633b      	str	r3, [r7, #48]	; 0x30
 800584a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800584e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005856:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e6      	bne.n	800582a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	3308      	adds	r3, #8
 8005862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	60fb      	str	r3, [r7, #12]
   return(result);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	64bb      	str	r3, [r7, #72]	; 0x48
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3308      	adds	r3, #8
 800587a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800587c:	61fa      	str	r2, [r7, #28]
 800587e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005880:	69b9      	ldr	r1, [r7, #24]
 8005882:	69fa      	ldr	r2, [r7, #28]
 8005884:	e841 2300 	strex	r3, r2, [r1]
 8005888:	617b      	str	r3, [r7, #20]
   return(result);
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e5      	bne.n	800585c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e011      	b.n	80058c8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2220      	movs	r2, #32
 80058a8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2220      	movs	r2, #32
 80058ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3758      	adds	r7, #88	; 0x58
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	60f8      	str	r0, [r7, #12]
 80058d8:	60b9      	str	r1, [r7, #8]
 80058da:	603b      	str	r3, [r7, #0]
 80058dc:	4613      	mov	r3, r2
 80058de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e0:	e049      	b.n	8005976 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058e8:	d045      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80058ea:	f7fb ffaf 	bl	800184c <HAL_GetTick>
 80058ee:	4602      	mov	r2, r0
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	69ba      	ldr	r2, [r7, #24]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d302      	bcc.n	8005900 <UART_WaitOnFlagUntilTimeout+0x30>
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e048      	b.n	8005996 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 0304 	and.w	r3, r3, #4
 800590e:	2b00      	cmp	r3, #0
 8005910:	d031      	beq.n	8005976 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	69db      	ldr	r3, [r3, #28]
 8005918:	f003 0308 	and.w	r3, r3, #8
 800591c:	2b08      	cmp	r3, #8
 800591e:	d110      	bne.n	8005942 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2208      	movs	r2, #8
 8005926:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f838 	bl	800599e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2208      	movs	r2, #8
 8005932:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e029      	b.n	8005996 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	69db      	ldr	r3, [r3, #28]
 8005948:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800594c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005950:	d111      	bne.n	8005976 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800595a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800595c:	68f8      	ldr	r0, [r7, #12]
 800595e:	f000 f81e 	bl	800599e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	2220      	movs	r2, #32
 8005966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005972:	2303      	movs	r3, #3
 8005974:	e00f      	b.n	8005996 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	69da      	ldr	r2, [r3, #28]
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4013      	ands	r3, r2
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	429a      	cmp	r2, r3
 8005984:	bf0c      	ite	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	2300      	movne	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	429a      	cmp	r2, r3
 8005992:	d0a6      	beq.n	80058e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800599e:	b480      	push	{r7}
 80059a0:	b095      	sub	sp, #84	; 0x54
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059ae:	e853 3f00 	ldrex	r3, [r3]
 80059b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059c4:	643b      	str	r3, [r7, #64]	; 0x40
 80059c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80059ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80059cc:	e841 2300 	strex	r3, r2, [r1]
 80059d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80059d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1e6      	bne.n	80059a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	3308      	adds	r3, #8
 80059de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059e0:	6a3b      	ldr	r3, [r7, #32]
 80059e2:	e853 3f00 	ldrex	r3, [r3]
 80059e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	64bb      	str	r3, [r7, #72]	; 0x48
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3308      	adds	r3, #8
 80059f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a00:	e841 2300 	strex	r3, r2, [r1]
 8005a04:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e5      	bne.n	80059d8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a10:	2b01      	cmp	r3, #1
 8005a12:	d118      	bne.n	8005a46 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	e853 3f00 	ldrex	r3, [r3]
 8005a20:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f023 0310 	bic.w	r3, r3, #16
 8005a28:	647b      	str	r3, [r7, #68]	; 0x44
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6979      	ldr	r1, [r7, #20]
 8005a38:	69ba      	ldr	r2, [r7, #24]
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e6      	bne.n	8005a14 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005a5a:	bf00      	nop
 8005a5c:	3754      	adds	r7, #84	; 0x54
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a64:	4770      	bx	lr
	...

08005a68 <siprintf>:
 8005a68:	b40e      	push	{r1, r2, r3}
 8005a6a:	b500      	push	{lr}
 8005a6c:	b09c      	sub	sp, #112	; 0x70
 8005a6e:	ab1d      	add	r3, sp, #116	; 0x74
 8005a70:	9002      	str	r0, [sp, #8]
 8005a72:	9006      	str	r0, [sp, #24]
 8005a74:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005a78:	4809      	ldr	r0, [pc, #36]	; (8005aa0 <siprintf+0x38>)
 8005a7a:	9107      	str	r1, [sp, #28]
 8005a7c:	9104      	str	r1, [sp, #16]
 8005a7e:	4909      	ldr	r1, [pc, #36]	; (8005aa4 <siprintf+0x3c>)
 8005a80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a84:	9105      	str	r1, [sp, #20]
 8005a86:	6800      	ldr	r0, [r0, #0]
 8005a88:	9301      	str	r3, [sp, #4]
 8005a8a:	a902      	add	r1, sp, #8
 8005a8c:	f000 f992 	bl	8005db4 <_svfiprintf_r>
 8005a90:	9b02      	ldr	r3, [sp, #8]
 8005a92:	2200      	movs	r2, #0
 8005a94:	701a      	strb	r2, [r3, #0]
 8005a96:	b01c      	add	sp, #112	; 0x70
 8005a98:	f85d eb04 	ldr.w	lr, [sp], #4
 8005a9c:	b003      	add	sp, #12
 8005a9e:	4770      	bx	lr
 8005aa0:	2000005c 	.word	0x2000005c
 8005aa4:	ffff0208 	.word	0xffff0208

08005aa8 <memset>:
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d100      	bne.n	8005ab2 <memset+0xa>
 8005ab0:	4770      	bx	lr
 8005ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab6:	e7f9      	b.n	8005aac <memset+0x4>

08005ab8 <__errno>:
 8005ab8:	4b01      	ldr	r3, [pc, #4]	; (8005ac0 <__errno+0x8>)
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	2000005c 	.word	0x2000005c

08005ac4 <__libc_init_array>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	4d0d      	ldr	r5, [pc, #52]	; (8005afc <__libc_init_array+0x38>)
 8005ac8:	4c0d      	ldr	r4, [pc, #52]	; (8005b00 <__libc_init_array+0x3c>)
 8005aca:	1b64      	subs	r4, r4, r5
 8005acc:	10a4      	asrs	r4, r4, #2
 8005ace:	2600      	movs	r6, #0
 8005ad0:	42a6      	cmp	r6, r4
 8005ad2:	d109      	bne.n	8005ae8 <__libc_init_array+0x24>
 8005ad4:	4d0b      	ldr	r5, [pc, #44]	; (8005b04 <__libc_init_array+0x40>)
 8005ad6:	4c0c      	ldr	r4, [pc, #48]	; (8005b08 <__libc_init_array+0x44>)
 8005ad8:	f001 fba2 	bl	8007220 <_init>
 8005adc:	1b64      	subs	r4, r4, r5
 8005ade:	10a4      	asrs	r4, r4, #2
 8005ae0:	2600      	movs	r6, #0
 8005ae2:	42a6      	cmp	r6, r4
 8005ae4:	d105      	bne.n	8005af2 <__libc_init_array+0x2e>
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aec:	4798      	blx	r3
 8005aee:	3601      	adds	r6, #1
 8005af0:	e7ee      	b.n	8005ad0 <__libc_init_array+0xc>
 8005af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af6:	4798      	blx	r3
 8005af8:	3601      	adds	r6, #1
 8005afa:	e7f2      	b.n	8005ae2 <__libc_init_array+0x1e>
 8005afc:	080072f0 	.word	0x080072f0
 8005b00:	080072f0 	.word	0x080072f0
 8005b04:	080072f0 	.word	0x080072f0
 8005b08:	080072f4 	.word	0x080072f4

08005b0c <__retarget_lock_acquire_recursive>:
 8005b0c:	4770      	bx	lr

08005b0e <__retarget_lock_release_recursive>:
 8005b0e:	4770      	bx	lr

08005b10 <_free_r>:
 8005b10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b12:	2900      	cmp	r1, #0
 8005b14:	d044      	beq.n	8005ba0 <_free_r+0x90>
 8005b16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b1a:	9001      	str	r0, [sp, #4]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	f1a1 0404 	sub.w	r4, r1, #4
 8005b22:	bfb8      	it	lt
 8005b24:	18e4      	addlt	r4, r4, r3
 8005b26:	f000 f8df 	bl	8005ce8 <__malloc_lock>
 8005b2a:	4a1e      	ldr	r2, [pc, #120]	; (8005ba4 <_free_r+0x94>)
 8005b2c:	9801      	ldr	r0, [sp, #4]
 8005b2e:	6813      	ldr	r3, [r2, #0]
 8005b30:	b933      	cbnz	r3, 8005b40 <_free_r+0x30>
 8005b32:	6063      	str	r3, [r4, #4]
 8005b34:	6014      	str	r4, [r2, #0]
 8005b36:	b003      	add	sp, #12
 8005b38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b3c:	f000 b8da 	b.w	8005cf4 <__malloc_unlock>
 8005b40:	42a3      	cmp	r3, r4
 8005b42:	d908      	bls.n	8005b56 <_free_r+0x46>
 8005b44:	6825      	ldr	r5, [r4, #0]
 8005b46:	1961      	adds	r1, r4, r5
 8005b48:	428b      	cmp	r3, r1
 8005b4a:	bf01      	itttt	eq
 8005b4c:	6819      	ldreq	r1, [r3, #0]
 8005b4e:	685b      	ldreq	r3, [r3, #4]
 8005b50:	1949      	addeq	r1, r1, r5
 8005b52:	6021      	streq	r1, [r4, #0]
 8005b54:	e7ed      	b.n	8005b32 <_free_r+0x22>
 8005b56:	461a      	mov	r2, r3
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	b10b      	cbz	r3, 8005b60 <_free_r+0x50>
 8005b5c:	42a3      	cmp	r3, r4
 8005b5e:	d9fa      	bls.n	8005b56 <_free_r+0x46>
 8005b60:	6811      	ldr	r1, [r2, #0]
 8005b62:	1855      	adds	r5, r2, r1
 8005b64:	42a5      	cmp	r5, r4
 8005b66:	d10b      	bne.n	8005b80 <_free_r+0x70>
 8005b68:	6824      	ldr	r4, [r4, #0]
 8005b6a:	4421      	add	r1, r4
 8005b6c:	1854      	adds	r4, r2, r1
 8005b6e:	42a3      	cmp	r3, r4
 8005b70:	6011      	str	r1, [r2, #0]
 8005b72:	d1e0      	bne.n	8005b36 <_free_r+0x26>
 8005b74:	681c      	ldr	r4, [r3, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	6053      	str	r3, [r2, #4]
 8005b7a:	440c      	add	r4, r1
 8005b7c:	6014      	str	r4, [r2, #0]
 8005b7e:	e7da      	b.n	8005b36 <_free_r+0x26>
 8005b80:	d902      	bls.n	8005b88 <_free_r+0x78>
 8005b82:	230c      	movs	r3, #12
 8005b84:	6003      	str	r3, [r0, #0]
 8005b86:	e7d6      	b.n	8005b36 <_free_r+0x26>
 8005b88:	6825      	ldr	r5, [r4, #0]
 8005b8a:	1961      	adds	r1, r4, r5
 8005b8c:	428b      	cmp	r3, r1
 8005b8e:	bf04      	itt	eq
 8005b90:	6819      	ldreq	r1, [r3, #0]
 8005b92:	685b      	ldreq	r3, [r3, #4]
 8005b94:	6063      	str	r3, [r4, #4]
 8005b96:	bf04      	itt	eq
 8005b98:	1949      	addeq	r1, r1, r5
 8005b9a:	6021      	streq	r1, [r4, #0]
 8005b9c:	6054      	str	r4, [r2, #4]
 8005b9e:	e7ca      	b.n	8005b36 <_free_r+0x26>
 8005ba0:	b003      	add	sp, #12
 8005ba2:	bd30      	pop	{r4, r5, pc}
 8005ba4:	20000408 	.word	0x20000408

08005ba8 <sbrk_aligned>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	4e0e      	ldr	r6, [pc, #56]	; (8005be4 <sbrk_aligned+0x3c>)
 8005bac:	460c      	mov	r4, r1
 8005bae:	6831      	ldr	r1, [r6, #0]
 8005bb0:	4605      	mov	r5, r0
 8005bb2:	b911      	cbnz	r1, 8005bba <sbrk_aligned+0x12>
 8005bb4:	f000 fba6 	bl	8006304 <_sbrk_r>
 8005bb8:	6030      	str	r0, [r6, #0]
 8005bba:	4621      	mov	r1, r4
 8005bbc:	4628      	mov	r0, r5
 8005bbe:	f000 fba1 	bl	8006304 <_sbrk_r>
 8005bc2:	1c43      	adds	r3, r0, #1
 8005bc4:	d00a      	beq.n	8005bdc <sbrk_aligned+0x34>
 8005bc6:	1cc4      	adds	r4, r0, #3
 8005bc8:	f024 0403 	bic.w	r4, r4, #3
 8005bcc:	42a0      	cmp	r0, r4
 8005bce:	d007      	beq.n	8005be0 <sbrk_aligned+0x38>
 8005bd0:	1a21      	subs	r1, r4, r0
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	f000 fb96 	bl	8006304 <_sbrk_r>
 8005bd8:	3001      	adds	r0, #1
 8005bda:	d101      	bne.n	8005be0 <sbrk_aligned+0x38>
 8005bdc:	f04f 34ff 	mov.w	r4, #4294967295
 8005be0:	4620      	mov	r0, r4
 8005be2:	bd70      	pop	{r4, r5, r6, pc}
 8005be4:	2000040c 	.word	0x2000040c

08005be8 <_malloc_r>:
 8005be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005bec:	1ccd      	adds	r5, r1, #3
 8005bee:	f025 0503 	bic.w	r5, r5, #3
 8005bf2:	3508      	adds	r5, #8
 8005bf4:	2d0c      	cmp	r5, #12
 8005bf6:	bf38      	it	cc
 8005bf8:	250c      	movcc	r5, #12
 8005bfa:	2d00      	cmp	r5, #0
 8005bfc:	4607      	mov	r7, r0
 8005bfe:	db01      	blt.n	8005c04 <_malloc_r+0x1c>
 8005c00:	42a9      	cmp	r1, r5
 8005c02:	d905      	bls.n	8005c10 <_malloc_r+0x28>
 8005c04:	230c      	movs	r3, #12
 8005c06:	603b      	str	r3, [r7, #0]
 8005c08:	2600      	movs	r6, #0
 8005c0a:	4630      	mov	r0, r6
 8005c0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ce4 <_malloc_r+0xfc>
 8005c14:	f000 f868 	bl	8005ce8 <__malloc_lock>
 8005c18:	f8d8 3000 	ldr.w	r3, [r8]
 8005c1c:	461c      	mov	r4, r3
 8005c1e:	bb5c      	cbnz	r4, 8005c78 <_malloc_r+0x90>
 8005c20:	4629      	mov	r1, r5
 8005c22:	4638      	mov	r0, r7
 8005c24:	f7ff ffc0 	bl	8005ba8 <sbrk_aligned>
 8005c28:	1c43      	adds	r3, r0, #1
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	d155      	bne.n	8005cda <_malloc_r+0xf2>
 8005c2e:	f8d8 4000 	ldr.w	r4, [r8]
 8005c32:	4626      	mov	r6, r4
 8005c34:	2e00      	cmp	r6, #0
 8005c36:	d145      	bne.n	8005cc4 <_malloc_r+0xdc>
 8005c38:	2c00      	cmp	r4, #0
 8005c3a:	d048      	beq.n	8005cce <_malloc_r+0xe6>
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	4631      	mov	r1, r6
 8005c40:	4638      	mov	r0, r7
 8005c42:	eb04 0903 	add.w	r9, r4, r3
 8005c46:	f000 fb5d 	bl	8006304 <_sbrk_r>
 8005c4a:	4581      	cmp	r9, r0
 8005c4c:	d13f      	bne.n	8005cce <_malloc_r+0xe6>
 8005c4e:	6821      	ldr	r1, [r4, #0]
 8005c50:	1a6d      	subs	r5, r5, r1
 8005c52:	4629      	mov	r1, r5
 8005c54:	4638      	mov	r0, r7
 8005c56:	f7ff ffa7 	bl	8005ba8 <sbrk_aligned>
 8005c5a:	3001      	adds	r0, #1
 8005c5c:	d037      	beq.n	8005cce <_malloc_r+0xe6>
 8005c5e:	6823      	ldr	r3, [r4, #0]
 8005c60:	442b      	add	r3, r5
 8005c62:	6023      	str	r3, [r4, #0]
 8005c64:	f8d8 3000 	ldr.w	r3, [r8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d038      	beq.n	8005cde <_malloc_r+0xf6>
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	42a2      	cmp	r2, r4
 8005c70:	d12b      	bne.n	8005cca <_malloc_r+0xe2>
 8005c72:	2200      	movs	r2, #0
 8005c74:	605a      	str	r2, [r3, #4]
 8005c76:	e00f      	b.n	8005c98 <_malloc_r+0xb0>
 8005c78:	6822      	ldr	r2, [r4, #0]
 8005c7a:	1b52      	subs	r2, r2, r5
 8005c7c:	d41f      	bmi.n	8005cbe <_malloc_r+0xd6>
 8005c7e:	2a0b      	cmp	r2, #11
 8005c80:	d917      	bls.n	8005cb2 <_malloc_r+0xca>
 8005c82:	1961      	adds	r1, r4, r5
 8005c84:	42a3      	cmp	r3, r4
 8005c86:	6025      	str	r5, [r4, #0]
 8005c88:	bf18      	it	ne
 8005c8a:	6059      	strne	r1, [r3, #4]
 8005c8c:	6863      	ldr	r3, [r4, #4]
 8005c8e:	bf08      	it	eq
 8005c90:	f8c8 1000 	streq.w	r1, [r8]
 8005c94:	5162      	str	r2, [r4, r5]
 8005c96:	604b      	str	r3, [r1, #4]
 8005c98:	4638      	mov	r0, r7
 8005c9a:	f104 060b 	add.w	r6, r4, #11
 8005c9e:	f000 f829 	bl	8005cf4 <__malloc_unlock>
 8005ca2:	f026 0607 	bic.w	r6, r6, #7
 8005ca6:	1d23      	adds	r3, r4, #4
 8005ca8:	1af2      	subs	r2, r6, r3
 8005caa:	d0ae      	beq.n	8005c0a <_malloc_r+0x22>
 8005cac:	1b9b      	subs	r3, r3, r6
 8005cae:	50a3      	str	r3, [r4, r2]
 8005cb0:	e7ab      	b.n	8005c0a <_malloc_r+0x22>
 8005cb2:	42a3      	cmp	r3, r4
 8005cb4:	6862      	ldr	r2, [r4, #4]
 8005cb6:	d1dd      	bne.n	8005c74 <_malloc_r+0x8c>
 8005cb8:	f8c8 2000 	str.w	r2, [r8]
 8005cbc:	e7ec      	b.n	8005c98 <_malloc_r+0xb0>
 8005cbe:	4623      	mov	r3, r4
 8005cc0:	6864      	ldr	r4, [r4, #4]
 8005cc2:	e7ac      	b.n	8005c1e <_malloc_r+0x36>
 8005cc4:	4634      	mov	r4, r6
 8005cc6:	6876      	ldr	r6, [r6, #4]
 8005cc8:	e7b4      	b.n	8005c34 <_malloc_r+0x4c>
 8005cca:	4613      	mov	r3, r2
 8005ccc:	e7cc      	b.n	8005c68 <_malloc_r+0x80>
 8005cce:	230c      	movs	r3, #12
 8005cd0:	603b      	str	r3, [r7, #0]
 8005cd2:	4638      	mov	r0, r7
 8005cd4:	f000 f80e 	bl	8005cf4 <__malloc_unlock>
 8005cd8:	e797      	b.n	8005c0a <_malloc_r+0x22>
 8005cda:	6025      	str	r5, [r4, #0]
 8005cdc:	e7dc      	b.n	8005c98 <_malloc_r+0xb0>
 8005cde:	605b      	str	r3, [r3, #4]
 8005ce0:	deff      	udf	#255	; 0xff
 8005ce2:	bf00      	nop
 8005ce4:	20000408 	.word	0x20000408

08005ce8 <__malloc_lock>:
 8005ce8:	4801      	ldr	r0, [pc, #4]	; (8005cf0 <__malloc_lock+0x8>)
 8005cea:	f7ff bf0f 	b.w	8005b0c <__retarget_lock_acquire_recursive>
 8005cee:	bf00      	nop
 8005cf0:	20000404 	.word	0x20000404

08005cf4 <__malloc_unlock>:
 8005cf4:	4801      	ldr	r0, [pc, #4]	; (8005cfc <__malloc_unlock+0x8>)
 8005cf6:	f7ff bf0a 	b.w	8005b0e <__retarget_lock_release_recursive>
 8005cfa:	bf00      	nop
 8005cfc:	20000404 	.word	0x20000404

08005d00 <__ssputs_r>:
 8005d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d04:	688e      	ldr	r6, [r1, #8]
 8005d06:	461f      	mov	r7, r3
 8005d08:	42be      	cmp	r6, r7
 8005d0a:	680b      	ldr	r3, [r1, #0]
 8005d0c:	4682      	mov	sl, r0
 8005d0e:	460c      	mov	r4, r1
 8005d10:	4690      	mov	r8, r2
 8005d12:	d82c      	bhi.n	8005d6e <__ssputs_r+0x6e>
 8005d14:	898a      	ldrh	r2, [r1, #12]
 8005d16:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005d1a:	d026      	beq.n	8005d6a <__ssputs_r+0x6a>
 8005d1c:	6965      	ldr	r5, [r4, #20]
 8005d1e:	6909      	ldr	r1, [r1, #16]
 8005d20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005d24:	eba3 0901 	sub.w	r9, r3, r1
 8005d28:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005d2c:	1c7b      	adds	r3, r7, #1
 8005d2e:	444b      	add	r3, r9
 8005d30:	106d      	asrs	r5, r5, #1
 8005d32:	429d      	cmp	r5, r3
 8005d34:	bf38      	it	cc
 8005d36:	461d      	movcc	r5, r3
 8005d38:	0553      	lsls	r3, r2, #21
 8005d3a:	d527      	bpl.n	8005d8c <__ssputs_r+0x8c>
 8005d3c:	4629      	mov	r1, r5
 8005d3e:	f7ff ff53 	bl	8005be8 <_malloc_r>
 8005d42:	4606      	mov	r6, r0
 8005d44:	b360      	cbz	r0, 8005da0 <__ssputs_r+0xa0>
 8005d46:	6921      	ldr	r1, [r4, #16]
 8005d48:	464a      	mov	r2, r9
 8005d4a:	f000 faeb 	bl	8006324 <memcpy>
 8005d4e:	89a3      	ldrh	r3, [r4, #12]
 8005d50:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005d54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d58:	81a3      	strh	r3, [r4, #12]
 8005d5a:	6126      	str	r6, [r4, #16]
 8005d5c:	6165      	str	r5, [r4, #20]
 8005d5e:	444e      	add	r6, r9
 8005d60:	eba5 0509 	sub.w	r5, r5, r9
 8005d64:	6026      	str	r6, [r4, #0]
 8005d66:	60a5      	str	r5, [r4, #8]
 8005d68:	463e      	mov	r6, r7
 8005d6a:	42be      	cmp	r6, r7
 8005d6c:	d900      	bls.n	8005d70 <__ssputs_r+0x70>
 8005d6e:	463e      	mov	r6, r7
 8005d70:	6820      	ldr	r0, [r4, #0]
 8005d72:	4632      	mov	r2, r6
 8005d74:	4641      	mov	r1, r8
 8005d76:	f000 faab 	bl	80062d0 <memmove>
 8005d7a:	68a3      	ldr	r3, [r4, #8]
 8005d7c:	1b9b      	subs	r3, r3, r6
 8005d7e:	60a3      	str	r3, [r4, #8]
 8005d80:	6823      	ldr	r3, [r4, #0]
 8005d82:	4433      	add	r3, r6
 8005d84:	6023      	str	r3, [r4, #0]
 8005d86:	2000      	movs	r0, #0
 8005d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d8c:	462a      	mov	r2, r5
 8005d8e:	f000 fad7 	bl	8006340 <_realloc_r>
 8005d92:	4606      	mov	r6, r0
 8005d94:	2800      	cmp	r0, #0
 8005d96:	d1e0      	bne.n	8005d5a <__ssputs_r+0x5a>
 8005d98:	6921      	ldr	r1, [r4, #16]
 8005d9a:	4650      	mov	r0, sl
 8005d9c:	f7ff feb8 	bl	8005b10 <_free_r>
 8005da0:	230c      	movs	r3, #12
 8005da2:	f8ca 3000 	str.w	r3, [sl]
 8005da6:	89a3      	ldrh	r3, [r4, #12]
 8005da8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dac:	81a3      	strh	r3, [r4, #12]
 8005dae:	f04f 30ff 	mov.w	r0, #4294967295
 8005db2:	e7e9      	b.n	8005d88 <__ssputs_r+0x88>

08005db4 <_svfiprintf_r>:
 8005db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005db8:	4698      	mov	r8, r3
 8005dba:	898b      	ldrh	r3, [r1, #12]
 8005dbc:	061b      	lsls	r3, r3, #24
 8005dbe:	b09d      	sub	sp, #116	; 0x74
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	460d      	mov	r5, r1
 8005dc4:	4614      	mov	r4, r2
 8005dc6:	d50e      	bpl.n	8005de6 <_svfiprintf_r+0x32>
 8005dc8:	690b      	ldr	r3, [r1, #16]
 8005dca:	b963      	cbnz	r3, 8005de6 <_svfiprintf_r+0x32>
 8005dcc:	2140      	movs	r1, #64	; 0x40
 8005dce:	f7ff ff0b 	bl	8005be8 <_malloc_r>
 8005dd2:	6028      	str	r0, [r5, #0]
 8005dd4:	6128      	str	r0, [r5, #16]
 8005dd6:	b920      	cbnz	r0, 8005de2 <_svfiprintf_r+0x2e>
 8005dd8:	230c      	movs	r3, #12
 8005dda:	603b      	str	r3, [r7, #0]
 8005ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8005de0:	e0d0      	b.n	8005f84 <_svfiprintf_r+0x1d0>
 8005de2:	2340      	movs	r3, #64	; 0x40
 8005de4:	616b      	str	r3, [r5, #20]
 8005de6:	2300      	movs	r3, #0
 8005de8:	9309      	str	r3, [sp, #36]	; 0x24
 8005dea:	2320      	movs	r3, #32
 8005dec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005df0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005df4:	2330      	movs	r3, #48	; 0x30
 8005df6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005f9c <_svfiprintf_r+0x1e8>
 8005dfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005dfe:	f04f 0901 	mov.w	r9, #1
 8005e02:	4623      	mov	r3, r4
 8005e04:	469a      	mov	sl, r3
 8005e06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005e0a:	b10a      	cbz	r2, 8005e10 <_svfiprintf_r+0x5c>
 8005e0c:	2a25      	cmp	r2, #37	; 0x25
 8005e0e:	d1f9      	bne.n	8005e04 <_svfiprintf_r+0x50>
 8005e10:	ebba 0b04 	subs.w	fp, sl, r4
 8005e14:	d00b      	beq.n	8005e2e <_svfiprintf_r+0x7a>
 8005e16:	465b      	mov	r3, fp
 8005e18:	4622      	mov	r2, r4
 8005e1a:	4629      	mov	r1, r5
 8005e1c:	4638      	mov	r0, r7
 8005e1e:	f7ff ff6f 	bl	8005d00 <__ssputs_r>
 8005e22:	3001      	adds	r0, #1
 8005e24:	f000 80a9 	beq.w	8005f7a <_svfiprintf_r+0x1c6>
 8005e28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e2a:	445a      	add	r2, fp
 8005e2c:	9209      	str	r2, [sp, #36]	; 0x24
 8005e2e:	f89a 3000 	ldrb.w	r3, [sl]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 80a1 	beq.w	8005f7a <_svfiprintf_r+0x1c6>
 8005e38:	2300      	movs	r3, #0
 8005e3a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005e42:	f10a 0a01 	add.w	sl, sl, #1
 8005e46:	9304      	str	r3, [sp, #16]
 8005e48:	9307      	str	r3, [sp, #28]
 8005e4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005e4e:	931a      	str	r3, [sp, #104]	; 0x68
 8005e50:	4654      	mov	r4, sl
 8005e52:	2205      	movs	r2, #5
 8005e54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e58:	4850      	ldr	r0, [pc, #320]	; (8005f9c <_svfiprintf_r+0x1e8>)
 8005e5a:	f7fa f9c1 	bl	80001e0 <memchr>
 8005e5e:	9a04      	ldr	r2, [sp, #16]
 8005e60:	b9d8      	cbnz	r0, 8005e9a <_svfiprintf_r+0xe6>
 8005e62:	06d0      	lsls	r0, r2, #27
 8005e64:	bf44      	itt	mi
 8005e66:	2320      	movmi	r3, #32
 8005e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e6c:	0711      	lsls	r1, r2, #28
 8005e6e:	bf44      	itt	mi
 8005e70:	232b      	movmi	r3, #43	; 0x2b
 8005e72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005e76:	f89a 3000 	ldrb.w	r3, [sl]
 8005e7a:	2b2a      	cmp	r3, #42	; 0x2a
 8005e7c:	d015      	beq.n	8005eaa <_svfiprintf_r+0xf6>
 8005e7e:	9a07      	ldr	r2, [sp, #28]
 8005e80:	4654      	mov	r4, sl
 8005e82:	2000      	movs	r0, #0
 8005e84:	f04f 0c0a 	mov.w	ip, #10
 8005e88:	4621      	mov	r1, r4
 8005e8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005e8e:	3b30      	subs	r3, #48	; 0x30
 8005e90:	2b09      	cmp	r3, #9
 8005e92:	d94d      	bls.n	8005f30 <_svfiprintf_r+0x17c>
 8005e94:	b1b0      	cbz	r0, 8005ec4 <_svfiprintf_r+0x110>
 8005e96:	9207      	str	r2, [sp, #28]
 8005e98:	e014      	b.n	8005ec4 <_svfiprintf_r+0x110>
 8005e9a:	eba0 0308 	sub.w	r3, r0, r8
 8005e9e:	fa09 f303 	lsl.w	r3, r9, r3
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	9304      	str	r3, [sp, #16]
 8005ea6:	46a2      	mov	sl, r4
 8005ea8:	e7d2      	b.n	8005e50 <_svfiprintf_r+0x9c>
 8005eaa:	9b03      	ldr	r3, [sp, #12]
 8005eac:	1d19      	adds	r1, r3, #4
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	9103      	str	r1, [sp, #12]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	bfbb      	ittet	lt
 8005eb6:	425b      	neglt	r3, r3
 8005eb8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ebc:	9307      	strge	r3, [sp, #28]
 8005ebe:	9307      	strlt	r3, [sp, #28]
 8005ec0:	bfb8      	it	lt
 8005ec2:	9204      	strlt	r2, [sp, #16]
 8005ec4:	7823      	ldrb	r3, [r4, #0]
 8005ec6:	2b2e      	cmp	r3, #46	; 0x2e
 8005ec8:	d10c      	bne.n	8005ee4 <_svfiprintf_r+0x130>
 8005eca:	7863      	ldrb	r3, [r4, #1]
 8005ecc:	2b2a      	cmp	r3, #42	; 0x2a
 8005ece:	d134      	bne.n	8005f3a <_svfiprintf_r+0x186>
 8005ed0:	9b03      	ldr	r3, [sp, #12]
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	9203      	str	r2, [sp, #12]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bfb8      	it	lt
 8005edc:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ee0:	3402      	adds	r4, #2
 8005ee2:	9305      	str	r3, [sp, #20]
 8005ee4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005fac <_svfiprintf_r+0x1f8>
 8005ee8:	7821      	ldrb	r1, [r4, #0]
 8005eea:	2203      	movs	r2, #3
 8005eec:	4650      	mov	r0, sl
 8005eee:	f7fa f977 	bl	80001e0 <memchr>
 8005ef2:	b138      	cbz	r0, 8005f04 <_svfiprintf_r+0x150>
 8005ef4:	9b04      	ldr	r3, [sp, #16]
 8005ef6:	eba0 000a 	sub.w	r0, r0, sl
 8005efa:	2240      	movs	r2, #64	; 0x40
 8005efc:	4082      	lsls	r2, r0
 8005efe:	4313      	orrs	r3, r2
 8005f00:	3401      	adds	r4, #1
 8005f02:	9304      	str	r3, [sp, #16]
 8005f04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f08:	4825      	ldr	r0, [pc, #148]	; (8005fa0 <_svfiprintf_r+0x1ec>)
 8005f0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005f0e:	2206      	movs	r2, #6
 8005f10:	f7fa f966 	bl	80001e0 <memchr>
 8005f14:	2800      	cmp	r0, #0
 8005f16:	d038      	beq.n	8005f8a <_svfiprintf_r+0x1d6>
 8005f18:	4b22      	ldr	r3, [pc, #136]	; (8005fa4 <_svfiprintf_r+0x1f0>)
 8005f1a:	bb1b      	cbnz	r3, 8005f64 <_svfiprintf_r+0x1b0>
 8005f1c:	9b03      	ldr	r3, [sp, #12]
 8005f1e:	3307      	adds	r3, #7
 8005f20:	f023 0307 	bic.w	r3, r3, #7
 8005f24:	3308      	adds	r3, #8
 8005f26:	9303      	str	r3, [sp, #12]
 8005f28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f2a:	4433      	add	r3, r6
 8005f2c:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2e:	e768      	b.n	8005e02 <_svfiprintf_r+0x4e>
 8005f30:	fb0c 3202 	mla	r2, ip, r2, r3
 8005f34:	460c      	mov	r4, r1
 8005f36:	2001      	movs	r0, #1
 8005f38:	e7a6      	b.n	8005e88 <_svfiprintf_r+0xd4>
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	3401      	adds	r4, #1
 8005f3e:	9305      	str	r3, [sp, #20]
 8005f40:	4619      	mov	r1, r3
 8005f42:	f04f 0c0a 	mov.w	ip, #10
 8005f46:	4620      	mov	r0, r4
 8005f48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005f4c:	3a30      	subs	r2, #48	; 0x30
 8005f4e:	2a09      	cmp	r2, #9
 8005f50:	d903      	bls.n	8005f5a <_svfiprintf_r+0x1a6>
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d0c6      	beq.n	8005ee4 <_svfiprintf_r+0x130>
 8005f56:	9105      	str	r1, [sp, #20]
 8005f58:	e7c4      	b.n	8005ee4 <_svfiprintf_r+0x130>
 8005f5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8005f5e:	4604      	mov	r4, r0
 8005f60:	2301      	movs	r3, #1
 8005f62:	e7f0      	b.n	8005f46 <_svfiprintf_r+0x192>
 8005f64:	ab03      	add	r3, sp, #12
 8005f66:	9300      	str	r3, [sp, #0]
 8005f68:	462a      	mov	r2, r5
 8005f6a:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <_svfiprintf_r+0x1f4>)
 8005f6c:	a904      	add	r1, sp, #16
 8005f6e:	4638      	mov	r0, r7
 8005f70:	f3af 8000 	nop.w
 8005f74:	1c42      	adds	r2, r0, #1
 8005f76:	4606      	mov	r6, r0
 8005f78:	d1d6      	bne.n	8005f28 <_svfiprintf_r+0x174>
 8005f7a:	89ab      	ldrh	r3, [r5, #12]
 8005f7c:	065b      	lsls	r3, r3, #25
 8005f7e:	f53f af2d 	bmi.w	8005ddc <_svfiprintf_r+0x28>
 8005f82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005f84:	b01d      	add	sp, #116	; 0x74
 8005f86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f8a:	ab03      	add	r3, sp, #12
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	462a      	mov	r2, r5
 8005f90:	4b05      	ldr	r3, [pc, #20]	; (8005fa8 <_svfiprintf_r+0x1f4>)
 8005f92:	a904      	add	r1, sp, #16
 8005f94:	4638      	mov	r0, r7
 8005f96:	f000 f879 	bl	800608c <_printf_i>
 8005f9a:	e7eb      	b.n	8005f74 <_svfiprintf_r+0x1c0>
 8005f9c:	08007288 	.word	0x08007288
 8005fa0:	08007292 	.word	0x08007292
 8005fa4:	00000000 	.word	0x00000000
 8005fa8:	08005d01 	.word	0x08005d01
 8005fac:	0800728e 	.word	0x0800728e

08005fb0 <_printf_common>:
 8005fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005fb4:	4616      	mov	r6, r2
 8005fb6:	4699      	mov	r9, r3
 8005fb8:	688a      	ldr	r2, [r1, #8]
 8005fba:	690b      	ldr	r3, [r1, #16]
 8005fbc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	bfb8      	it	lt
 8005fc4:	4613      	movlt	r3, r2
 8005fc6:	6033      	str	r3, [r6, #0]
 8005fc8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005fcc:	4607      	mov	r7, r0
 8005fce:	460c      	mov	r4, r1
 8005fd0:	b10a      	cbz	r2, 8005fd6 <_printf_common+0x26>
 8005fd2:	3301      	adds	r3, #1
 8005fd4:	6033      	str	r3, [r6, #0]
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	0699      	lsls	r1, r3, #26
 8005fda:	bf42      	ittt	mi
 8005fdc:	6833      	ldrmi	r3, [r6, #0]
 8005fde:	3302      	addmi	r3, #2
 8005fe0:	6033      	strmi	r3, [r6, #0]
 8005fe2:	6825      	ldr	r5, [r4, #0]
 8005fe4:	f015 0506 	ands.w	r5, r5, #6
 8005fe8:	d106      	bne.n	8005ff8 <_printf_common+0x48>
 8005fea:	f104 0a19 	add.w	sl, r4, #25
 8005fee:	68e3      	ldr	r3, [r4, #12]
 8005ff0:	6832      	ldr	r2, [r6, #0]
 8005ff2:	1a9b      	subs	r3, r3, r2
 8005ff4:	42ab      	cmp	r3, r5
 8005ff6:	dc26      	bgt.n	8006046 <_printf_common+0x96>
 8005ff8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ffc:	1e13      	subs	r3, r2, #0
 8005ffe:	6822      	ldr	r2, [r4, #0]
 8006000:	bf18      	it	ne
 8006002:	2301      	movne	r3, #1
 8006004:	0692      	lsls	r2, r2, #26
 8006006:	d42b      	bmi.n	8006060 <_printf_common+0xb0>
 8006008:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800600c:	4649      	mov	r1, r9
 800600e:	4638      	mov	r0, r7
 8006010:	47c0      	blx	r8
 8006012:	3001      	adds	r0, #1
 8006014:	d01e      	beq.n	8006054 <_printf_common+0xa4>
 8006016:	6823      	ldr	r3, [r4, #0]
 8006018:	6922      	ldr	r2, [r4, #16]
 800601a:	f003 0306 	and.w	r3, r3, #6
 800601e:	2b04      	cmp	r3, #4
 8006020:	bf02      	ittt	eq
 8006022:	68e5      	ldreq	r5, [r4, #12]
 8006024:	6833      	ldreq	r3, [r6, #0]
 8006026:	1aed      	subeq	r5, r5, r3
 8006028:	68a3      	ldr	r3, [r4, #8]
 800602a:	bf0c      	ite	eq
 800602c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006030:	2500      	movne	r5, #0
 8006032:	4293      	cmp	r3, r2
 8006034:	bfc4      	itt	gt
 8006036:	1a9b      	subgt	r3, r3, r2
 8006038:	18ed      	addgt	r5, r5, r3
 800603a:	2600      	movs	r6, #0
 800603c:	341a      	adds	r4, #26
 800603e:	42b5      	cmp	r5, r6
 8006040:	d11a      	bne.n	8006078 <_printf_common+0xc8>
 8006042:	2000      	movs	r0, #0
 8006044:	e008      	b.n	8006058 <_printf_common+0xa8>
 8006046:	2301      	movs	r3, #1
 8006048:	4652      	mov	r2, sl
 800604a:	4649      	mov	r1, r9
 800604c:	4638      	mov	r0, r7
 800604e:	47c0      	blx	r8
 8006050:	3001      	adds	r0, #1
 8006052:	d103      	bne.n	800605c <_printf_common+0xac>
 8006054:	f04f 30ff 	mov.w	r0, #4294967295
 8006058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800605c:	3501      	adds	r5, #1
 800605e:	e7c6      	b.n	8005fee <_printf_common+0x3e>
 8006060:	18e1      	adds	r1, r4, r3
 8006062:	1c5a      	adds	r2, r3, #1
 8006064:	2030      	movs	r0, #48	; 0x30
 8006066:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800606a:	4422      	add	r2, r4
 800606c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006070:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006074:	3302      	adds	r3, #2
 8006076:	e7c7      	b.n	8006008 <_printf_common+0x58>
 8006078:	2301      	movs	r3, #1
 800607a:	4622      	mov	r2, r4
 800607c:	4649      	mov	r1, r9
 800607e:	4638      	mov	r0, r7
 8006080:	47c0      	blx	r8
 8006082:	3001      	adds	r0, #1
 8006084:	d0e6      	beq.n	8006054 <_printf_common+0xa4>
 8006086:	3601      	adds	r6, #1
 8006088:	e7d9      	b.n	800603e <_printf_common+0x8e>
	...

0800608c <_printf_i>:
 800608c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006090:	7e0f      	ldrb	r7, [r1, #24]
 8006092:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006094:	2f78      	cmp	r7, #120	; 0x78
 8006096:	4691      	mov	r9, r2
 8006098:	4680      	mov	r8, r0
 800609a:	460c      	mov	r4, r1
 800609c:	469a      	mov	sl, r3
 800609e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80060a2:	d807      	bhi.n	80060b4 <_printf_i+0x28>
 80060a4:	2f62      	cmp	r7, #98	; 0x62
 80060a6:	d80a      	bhi.n	80060be <_printf_i+0x32>
 80060a8:	2f00      	cmp	r7, #0
 80060aa:	f000 80d4 	beq.w	8006256 <_printf_i+0x1ca>
 80060ae:	2f58      	cmp	r7, #88	; 0x58
 80060b0:	f000 80c0 	beq.w	8006234 <_printf_i+0x1a8>
 80060b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80060b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80060bc:	e03a      	b.n	8006134 <_printf_i+0xa8>
 80060be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80060c2:	2b15      	cmp	r3, #21
 80060c4:	d8f6      	bhi.n	80060b4 <_printf_i+0x28>
 80060c6:	a101      	add	r1, pc, #4	; (adr r1, 80060cc <_printf_i+0x40>)
 80060c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80060cc:	08006125 	.word	0x08006125
 80060d0:	08006139 	.word	0x08006139
 80060d4:	080060b5 	.word	0x080060b5
 80060d8:	080060b5 	.word	0x080060b5
 80060dc:	080060b5 	.word	0x080060b5
 80060e0:	080060b5 	.word	0x080060b5
 80060e4:	08006139 	.word	0x08006139
 80060e8:	080060b5 	.word	0x080060b5
 80060ec:	080060b5 	.word	0x080060b5
 80060f0:	080060b5 	.word	0x080060b5
 80060f4:	080060b5 	.word	0x080060b5
 80060f8:	0800623d 	.word	0x0800623d
 80060fc:	08006165 	.word	0x08006165
 8006100:	080061f7 	.word	0x080061f7
 8006104:	080060b5 	.word	0x080060b5
 8006108:	080060b5 	.word	0x080060b5
 800610c:	0800625f 	.word	0x0800625f
 8006110:	080060b5 	.word	0x080060b5
 8006114:	08006165 	.word	0x08006165
 8006118:	080060b5 	.word	0x080060b5
 800611c:	080060b5 	.word	0x080060b5
 8006120:	080061ff 	.word	0x080061ff
 8006124:	682b      	ldr	r3, [r5, #0]
 8006126:	1d1a      	adds	r2, r3, #4
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	602a      	str	r2, [r5, #0]
 800612c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006130:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006134:	2301      	movs	r3, #1
 8006136:	e09f      	b.n	8006278 <_printf_i+0x1ec>
 8006138:	6820      	ldr	r0, [r4, #0]
 800613a:	682b      	ldr	r3, [r5, #0]
 800613c:	0607      	lsls	r7, r0, #24
 800613e:	f103 0104 	add.w	r1, r3, #4
 8006142:	6029      	str	r1, [r5, #0]
 8006144:	d501      	bpl.n	800614a <_printf_i+0xbe>
 8006146:	681e      	ldr	r6, [r3, #0]
 8006148:	e003      	b.n	8006152 <_printf_i+0xc6>
 800614a:	0646      	lsls	r6, r0, #25
 800614c:	d5fb      	bpl.n	8006146 <_printf_i+0xba>
 800614e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006152:	2e00      	cmp	r6, #0
 8006154:	da03      	bge.n	800615e <_printf_i+0xd2>
 8006156:	232d      	movs	r3, #45	; 0x2d
 8006158:	4276      	negs	r6, r6
 800615a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800615e:	485a      	ldr	r0, [pc, #360]	; (80062c8 <_printf_i+0x23c>)
 8006160:	230a      	movs	r3, #10
 8006162:	e012      	b.n	800618a <_printf_i+0xfe>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	6820      	ldr	r0, [r4, #0]
 8006168:	1d19      	adds	r1, r3, #4
 800616a:	6029      	str	r1, [r5, #0]
 800616c:	0605      	lsls	r5, r0, #24
 800616e:	d501      	bpl.n	8006174 <_printf_i+0xe8>
 8006170:	681e      	ldr	r6, [r3, #0]
 8006172:	e002      	b.n	800617a <_printf_i+0xee>
 8006174:	0641      	lsls	r1, r0, #25
 8006176:	d5fb      	bpl.n	8006170 <_printf_i+0xe4>
 8006178:	881e      	ldrh	r6, [r3, #0]
 800617a:	4853      	ldr	r0, [pc, #332]	; (80062c8 <_printf_i+0x23c>)
 800617c:	2f6f      	cmp	r7, #111	; 0x6f
 800617e:	bf0c      	ite	eq
 8006180:	2308      	moveq	r3, #8
 8006182:	230a      	movne	r3, #10
 8006184:	2100      	movs	r1, #0
 8006186:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800618a:	6865      	ldr	r5, [r4, #4]
 800618c:	60a5      	str	r5, [r4, #8]
 800618e:	2d00      	cmp	r5, #0
 8006190:	bfa2      	ittt	ge
 8006192:	6821      	ldrge	r1, [r4, #0]
 8006194:	f021 0104 	bicge.w	r1, r1, #4
 8006198:	6021      	strge	r1, [r4, #0]
 800619a:	b90e      	cbnz	r6, 80061a0 <_printf_i+0x114>
 800619c:	2d00      	cmp	r5, #0
 800619e:	d04b      	beq.n	8006238 <_printf_i+0x1ac>
 80061a0:	4615      	mov	r5, r2
 80061a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80061a6:	fb03 6711 	mls	r7, r3, r1, r6
 80061aa:	5dc7      	ldrb	r7, [r0, r7]
 80061ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80061b0:	4637      	mov	r7, r6
 80061b2:	42bb      	cmp	r3, r7
 80061b4:	460e      	mov	r6, r1
 80061b6:	d9f4      	bls.n	80061a2 <_printf_i+0x116>
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d10b      	bne.n	80061d4 <_printf_i+0x148>
 80061bc:	6823      	ldr	r3, [r4, #0]
 80061be:	07de      	lsls	r6, r3, #31
 80061c0:	d508      	bpl.n	80061d4 <_printf_i+0x148>
 80061c2:	6923      	ldr	r3, [r4, #16]
 80061c4:	6861      	ldr	r1, [r4, #4]
 80061c6:	4299      	cmp	r1, r3
 80061c8:	bfde      	ittt	le
 80061ca:	2330      	movle	r3, #48	; 0x30
 80061cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80061d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80061d4:	1b52      	subs	r2, r2, r5
 80061d6:	6122      	str	r2, [r4, #16]
 80061d8:	f8cd a000 	str.w	sl, [sp]
 80061dc:	464b      	mov	r3, r9
 80061de:	aa03      	add	r2, sp, #12
 80061e0:	4621      	mov	r1, r4
 80061e2:	4640      	mov	r0, r8
 80061e4:	f7ff fee4 	bl	8005fb0 <_printf_common>
 80061e8:	3001      	adds	r0, #1
 80061ea:	d14a      	bne.n	8006282 <_printf_i+0x1f6>
 80061ec:	f04f 30ff 	mov.w	r0, #4294967295
 80061f0:	b004      	add	sp, #16
 80061f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061f6:	6823      	ldr	r3, [r4, #0]
 80061f8:	f043 0320 	orr.w	r3, r3, #32
 80061fc:	6023      	str	r3, [r4, #0]
 80061fe:	4833      	ldr	r0, [pc, #204]	; (80062cc <_printf_i+0x240>)
 8006200:	2778      	movs	r7, #120	; 0x78
 8006202:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006206:	6823      	ldr	r3, [r4, #0]
 8006208:	6829      	ldr	r1, [r5, #0]
 800620a:	061f      	lsls	r7, r3, #24
 800620c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006210:	d402      	bmi.n	8006218 <_printf_i+0x18c>
 8006212:	065f      	lsls	r7, r3, #25
 8006214:	bf48      	it	mi
 8006216:	b2b6      	uxthmi	r6, r6
 8006218:	07df      	lsls	r7, r3, #31
 800621a:	bf48      	it	mi
 800621c:	f043 0320 	orrmi.w	r3, r3, #32
 8006220:	6029      	str	r1, [r5, #0]
 8006222:	bf48      	it	mi
 8006224:	6023      	strmi	r3, [r4, #0]
 8006226:	b91e      	cbnz	r6, 8006230 <_printf_i+0x1a4>
 8006228:	6823      	ldr	r3, [r4, #0]
 800622a:	f023 0320 	bic.w	r3, r3, #32
 800622e:	6023      	str	r3, [r4, #0]
 8006230:	2310      	movs	r3, #16
 8006232:	e7a7      	b.n	8006184 <_printf_i+0xf8>
 8006234:	4824      	ldr	r0, [pc, #144]	; (80062c8 <_printf_i+0x23c>)
 8006236:	e7e4      	b.n	8006202 <_printf_i+0x176>
 8006238:	4615      	mov	r5, r2
 800623a:	e7bd      	b.n	80061b8 <_printf_i+0x12c>
 800623c:	682b      	ldr	r3, [r5, #0]
 800623e:	6826      	ldr	r6, [r4, #0]
 8006240:	6961      	ldr	r1, [r4, #20]
 8006242:	1d18      	adds	r0, r3, #4
 8006244:	6028      	str	r0, [r5, #0]
 8006246:	0635      	lsls	r5, r6, #24
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	d501      	bpl.n	8006250 <_printf_i+0x1c4>
 800624c:	6019      	str	r1, [r3, #0]
 800624e:	e002      	b.n	8006256 <_printf_i+0x1ca>
 8006250:	0670      	lsls	r0, r6, #25
 8006252:	d5fb      	bpl.n	800624c <_printf_i+0x1c0>
 8006254:	8019      	strh	r1, [r3, #0]
 8006256:	2300      	movs	r3, #0
 8006258:	6123      	str	r3, [r4, #16]
 800625a:	4615      	mov	r5, r2
 800625c:	e7bc      	b.n	80061d8 <_printf_i+0x14c>
 800625e:	682b      	ldr	r3, [r5, #0]
 8006260:	1d1a      	adds	r2, r3, #4
 8006262:	602a      	str	r2, [r5, #0]
 8006264:	681d      	ldr	r5, [r3, #0]
 8006266:	6862      	ldr	r2, [r4, #4]
 8006268:	2100      	movs	r1, #0
 800626a:	4628      	mov	r0, r5
 800626c:	f7f9 ffb8 	bl	80001e0 <memchr>
 8006270:	b108      	cbz	r0, 8006276 <_printf_i+0x1ea>
 8006272:	1b40      	subs	r0, r0, r5
 8006274:	6060      	str	r0, [r4, #4]
 8006276:	6863      	ldr	r3, [r4, #4]
 8006278:	6123      	str	r3, [r4, #16]
 800627a:	2300      	movs	r3, #0
 800627c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006280:	e7aa      	b.n	80061d8 <_printf_i+0x14c>
 8006282:	6923      	ldr	r3, [r4, #16]
 8006284:	462a      	mov	r2, r5
 8006286:	4649      	mov	r1, r9
 8006288:	4640      	mov	r0, r8
 800628a:	47d0      	blx	sl
 800628c:	3001      	adds	r0, #1
 800628e:	d0ad      	beq.n	80061ec <_printf_i+0x160>
 8006290:	6823      	ldr	r3, [r4, #0]
 8006292:	079b      	lsls	r3, r3, #30
 8006294:	d413      	bmi.n	80062be <_printf_i+0x232>
 8006296:	68e0      	ldr	r0, [r4, #12]
 8006298:	9b03      	ldr	r3, [sp, #12]
 800629a:	4298      	cmp	r0, r3
 800629c:	bfb8      	it	lt
 800629e:	4618      	movlt	r0, r3
 80062a0:	e7a6      	b.n	80061f0 <_printf_i+0x164>
 80062a2:	2301      	movs	r3, #1
 80062a4:	4632      	mov	r2, r6
 80062a6:	4649      	mov	r1, r9
 80062a8:	4640      	mov	r0, r8
 80062aa:	47d0      	blx	sl
 80062ac:	3001      	adds	r0, #1
 80062ae:	d09d      	beq.n	80061ec <_printf_i+0x160>
 80062b0:	3501      	adds	r5, #1
 80062b2:	68e3      	ldr	r3, [r4, #12]
 80062b4:	9903      	ldr	r1, [sp, #12]
 80062b6:	1a5b      	subs	r3, r3, r1
 80062b8:	42ab      	cmp	r3, r5
 80062ba:	dcf2      	bgt.n	80062a2 <_printf_i+0x216>
 80062bc:	e7eb      	b.n	8006296 <_printf_i+0x20a>
 80062be:	2500      	movs	r5, #0
 80062c0:	f104 0619 	add.w	r6, r4, #25
 80062c4:	e7f5      	b.n	80062b2 <_printf_i+0x226>
 80062c6:	bf00      	nop
 80062c8:	08007299 	.word	0x08007299
 80062cc:	080072aa 	.word	0x080072aa

080062d0 <memmove>:
 80062d0:	4288      	cmp	r0, r1
 80062d2:	b510      	push	{r4, lr}
 80062d4:	eb01 0402 	add.w	r4, r1, r2
 80062d8:	d902      	bls.n	80062e0 <memmove+0x10>
 80062da:	4284      	cmp	r4, r0
 80062dc:	4623      	mov	r3, r4
 80062de:	d807      	bhi.n	80062f0 <memmove+0x20>
 80062e0:	1e43      	subs	r3, r0, #1
 80062e2:	42a1      	cmp	r1, r4
 80062e4:	d008      	beq.n	80062f8 <memmove+0x28>
 80062e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062ee:	e7f8      	b.n	80062e2 <memmove+0x12>
 80062f0:	4402      	add	r2, r0
 80062f2:	4601      	mov	r1, r0
 80062f4:	428a      	cmp	r2, r1
 80062f6:	d100      	bne.n	80062fa <memmove+0x2a>
 80062f8:	bd10      	pop	{r4, pc}
 80062fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80062fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006302:	e7f7      	b.n	80062f4 <memmove+0x24>

08006304 <_sbrk_r>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	4d06      	ldr	r5, [pc, #24]	; (8006320 <_sbrk_r+0x1c>)
 8006308:	2300      	movs	r3, #0
 800630a:	4604      	mov	r4, r0
 800630c:	4608      	mov	r0, r1
 800630e:	602b      	str	r3, [r5, #0]
 8006310:	f7fb f9d0 	bl	80016b4 <_sbrk>
 8006314:	1c43      	adds	r3, r0, #1
 8006316:	d102      	bne.n	800631e <_sbrk_r+0x1a>
 8006318:	682b      	ldr	r3, [r5, #0]
 800631a:	b103      	cbz	r3, 800631e <_sbrk_r+0x1a>
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	bd38      	pop	{r3, r4, r5, pc}
 8006320:	20000400 	.word	0x20000400

08006324 <memcpy>:
 8006324:	440a      	add	r2, r1
 8006326:	4291      	cmp	r1, r2
 8006328:	f100 33ff 	add.w	r3, r0, #4294967295
 800632c:	d100      	bne.n	8006330 <memcpy+0xc>
 800632e:	4770      	bx	lr
 8006330:	b510      	push	{r4, lr}
 8006332:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006336:	f803 4f01 	strb.w	r4, [r3, #1]!
 800633a:	4291      	cmp	r1, r2
 800633c:	d1f9      	bne.n	8006332 <memcpy+0xe>
 800633e:	bd10      	pop	{r4, pc}

08006340 <_realloc_r>:
 8006340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006344:	4680      	mov	r8, r0
 8006346:	4614      	mov	r4, r2
 8006348:	460e      	mov	r6, r1
 800634a:	b921      	cbnz	r1, 8006356 <_realloc_r+0x16>
 800634c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006350:	4611      	mov	r1, r2
 8006352:	f7ff bc49 	b.w	8005be8 <_malloc_r>
 8006356:	b92a      	cbnz	r2, 8006364 <_realloc_r+0x24>
 8006358:	f7ff fbda 	bl	8005b10 <_free_r>
 800635c:	4625      	mov	r5, r4
 800635e:	4628      	mov	r0, r5
 8006360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006364:	f000 f81b 	bl	800639e <_malloc_usable_size_r>
 8006368:	4284      	cmp	r4, r0
 800636a:	4607      	mov	r7, r0
 800636c:	d802      	bhi.n	8006374 <_realloc_r+0x34>
 800636e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006372:	d812      	bhi.n	800639a <_realloc_r+0x5a>
 8006374:	4621      	mov	r1, r4
 8006376:	4640      	mov	r0, r8
 8006378:	f7ff fc36 	bl	8005be8 <_malloc_r>
 800637c:	4605      	mov	r5, r0
 800637e:	2800      	cmp	r0, #0
 8006380:	d0ed      	beq.n	800635e <_realloc_r+0x1e>
 8006382:	42bc      	cmp	r4, r7
 8006384:	4622      	mov	r2, r4
 8006386:	4631      	mov	r1, r6
 8006388:	bf28      	it	cs
 800638a:	463a      	movcs	r2, r7
 800638c:	f7ff ffca 	bl	8006324 <memcpy>
 8006390:	4631      	mov	r1, r6
 8006392:	4640      	mov	r0, r8
 8006394:	f7ff fbbc 	bl	8005b10 <_free_r>
 8006398:	e7e1      	b.n	800635e <_realloc_r+0x1e>
 800639a:	4635      	mov	r5, r6
 800639c:	e7df      	b.n	800635e <_realloc_r+0x1e>

0800639e <_malloc_usable_size_r>:
 800639e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063a2:	1f18      	subs	r0, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	bfbc      	itt	lt
 80063a8:	580b      	ldrlt	r3, [r1, r0]
 80063aa:	18c0      	addlt	r0, r0, r3
 80063ac:	4770      	bx	lr
	...

080063b0 <pow>:
 80063b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063b2:	ed2d 8b02 	vpush	{d8}
 80063b6:	eeb0 8a40 	vmov.f32	s16, s0
 80063ba:	eef0 8a60 	vmov.f32	s17, s1
 80063be:	ec55 4b11 	vmov	r4, r5, d1
 80063c2:	f000 f871 	bl	80064a8 <__ieee754_pow>
 80063c6:	4622      	mov	r2, r4
 80063c8:	462b      	mov	r3, r5
 80063ca:	4620      	mov	r0, r4
 80063cc:	4629      	mov	r1, r5
 80063ce:	ec57 6b10 	vmov	r6, r7, d0
 80063d2:	f7fa fbab 	bl	8000b2c <__aeabi_dcmpun>
 80063d6:	2800      	cmp	r0, #0
 80063d8:	d13b      	bne.n	8006452 <pow+0xa2>
 80063da:	ec51 0b18 	vmov	r0, r1, d8
 80063de:	2200      	movs	r2, #0
 80063e0:	2300      	movs	r3, #0
 80063e2:	f7fa fb71 	bl	8000ac8 <__aeabi_dcmpeq>
 80063e6:	b1b8      	cbz	r0, 8006418 <pow+0x68>
 80063e8:	2200      	movs	r2, #0
 80063ea:	2300      	movs	r3, #0
 80063ec:	4620      	mov	r0, r4
 80063ee:	4629      	mov	r1, r5
 80063f0:	f7fa fb6a 	bl	8000ac8 <__aeabi_dcmpeq>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d146      	bne.n	8006486 <pow+0xd6>
 80063f8:	ec45 4b10 	vmov	d0, r4, r5
 80063fc:	f000 f848 	bl	8006490 <finite>
 8006400:	b338      	cbz	r0, 8006452 <pow+0xa2>
 8006402:	2200      	movs	r2, #0
 8006404:	2300      	movs	r3, #0
 8006406:	4620      	mov	r0, r4
 8006408:	4629      	mov	r1, r5
 800640a:	f7fa fb67 	bl	8000adc <__aeabi_dcmplt>
 800640e:	b300      	cbz	r0, 8006452 <pow+0xa2>
 8006410:	f7ff fb52 	bl	8005ab8 <__errno>
 8006414:	2322      	movs	r3, #34	; 0x22
 8006416:	e01b      	b.n	8006450 <pow+0xa0>
 8006418:	ec47 6b10 	vmov	d0, r6, r7
 800641c:	f000 f838 	bl	8006490 <finite>
 8006420:	b9e0      	cbnz	r0, 800645c <pow+0xac>
 8006422:	eeb0 0a48 	vmov.f32	s0, s16
 8006426:	eef0 0a68 	vmov.f32	s1, s17
 800642a:	f000 f831 	bl	8006490 <finite>
 800642e:	b1a8      	cbz	r0, 800645c <pow+0xac>
 8006430:	ec45 4b10 	vmov	d0, r4, r5
 8006434:	f000 f82c 	bl	8006490 <finite>
 8006438:	b180      	cbz	r0, 800645c <pow+0xac>
 800643a:	4632      	mov	r2, r6
 800643c:	463b      	mov	r3, r7
 800643e:	4630      	mov	r0, r6
 8006440:	4639      	mov	r1, r7
 8006442:	f7fa fb73 	bl	8000b2c <__aeabi_dcmpun>
 8006446:	2800      	cmp	r0, #0
 8006448:	d0e2      	beq.n	8006410 <pow+0x60>
 800644a:	f7ff fb35 	bl	8005ab8 <__errno>
 800644e:	2321      	movs	r3, #33	; 0x21
 8006450:	6003      	str	r3, [r0, #0]
 8006452:	ecbd 8b02 	vpop	{d8}
 8006456:	ec47 6b10 	vmov	d0, r6, r7
 800645a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800645c:	2200      	movs	r2, #0
 800645e:	2300      	movs	r3, #0
 8006460:	4630      	mov	r0, r6
 8006462:	4639      	mov	r1, r7
 8006464:	f7fa fb30 	bl	8000ac8 <__aeabi_dcmpeq>
 8006468:	2800      	cmp	r0, #0
 800646a:	d0f2      	beq.n	8006452 <pow+0xa2>
 800646c:	eeb0 0a48 	vmov.f32	s0, s16
 8006470:	eef0 0a68 	vmov.f32	s1, s17
 8006474:	f000 f80c 	bl	8006490 <finite>
 8006478:	2800      	cmp	r0, #0
 800647a:	d0ea      	beq.n	8006452 <pow+0xa2>
 800647c:	ec45 4b10 	vmov	d0, r4, r5
 8006480:	f000 f806 	bl	8006490 <finite>
 8006484:	e7c3      	b.n	800640e <pow+0x5e>
 8006486:	4f01      	ldr	r7, [pc, #4]	; (800648c <pow+0xdc>)
 8006488:	2600      	movs	r6, #0
 800648a:	e7e2      	b.n	8006452 <pow+0xa2>
 800648c:	3ff00000 	.word	0x3ff00000

08006490 <finite>:
 8006490:	b082      	sub	sp, #8
 8006492:	ed8d 0b00 	vstr	d0, [sp]
 8006496:	9801      	ldr	r0, [sp, #4]
 8006498:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800649c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80064a0:	0fc0      	lsrs	r0, r0, #31
 80064a2:	b002      	add	sp, #8
 80064a4:	4770      	bx	lr
	...

080064a8 <__ieee754_pow>:
 80064a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064ac:	ed2d 8b06 	vpush	{d8-d10}
 80064b0:	b089      	sub	sp, #36	; 0x24
 80064b2:	ed8d 1b00 	vstr	d1, [sp]
 80064b6:	e9dd 2900 	ldrd	r2, r9, [sp]
 80064ba:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80064be:	ea58 0102 	orrs.w	r1, r8, r2
 80064c2:	ec57 6b10 	vmov	r6, r7, d0
 80064c6:	d115      	bne.n	80064f4 <__ieee754_pow+0x4c>
 80064c8:	19b3      	adds	r3, r6, r6
 80064ca:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 80064ce:	4152      	adcs	r2, r2
 80064d0:	4299      	cmp	r1, r3
 80064d2:	4b89      	ldr	r3, [pc, #548]	; (80066f8 <__ieee754_pow+0x250>)
 80064d4:	4193      	sbcs	r3, r2
 80064d6:	f080 84d1 	bcs.w	8006e7c <__ieee754_pow+0x9d4>
 80064da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	f7f9 fed3 	bl	800028c <__adddf3>
 80064e6:	ec41 0b10 	vmov	d0, r0, r1
 80064ea:	b009      	add	sp, #36	; 0x24
 80064ec:	ecbd 8b06 	vpop	{d8-d10}
 80064f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064f4:	4b81      	ldr	r3, [pc, #516]	; (80066fc <__ieee754_pow+0x254>)
 80064f6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80064fa:	429c      	cmp	r4, r3
 80064fc:	ee10 aa10 	vmov	sl, s0
 8006500:	463d      	mov	r5, r7
 8006502:	dc06      	bgt.n	8006512 <__ieee754_pow+0x6a>
 8006504:	d101      	bne.n	800650a <__ieee754_pow+0x62>
 8006506:	2e00      	cmp	r6, #0
 8006508:	d1e7      	bne.n	80064da <__ieee754_pow+0x32>
 800650a:	4598      	cmp	r8, r3
 800650c:	dc01      	bgt.n	8006512 <__ieee754_pow+0x6a>
 800650e:	d10f      	bne.n	8006530 <__ieee754_pow+0x88>
 8006510:	b172      	cbz	r2, 8006530 <__ieee754_pow+0x88>
 8006512:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006516:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800651a:	ea55 050a 	orrs.w	r5, r5, sl
 800651e:	d1dc      	bne.n	80064da <__ieee754_pow+0x32>
 8006520:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006524:	18db      	adds	r3, r3, r3
 8006526:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800652a:	4152      	adcs	r2, r2
 800652c:	429d      	cmp	r5, r3
 800652e:	e7d0      	b.n	80064d2 <__ieee754_pow+0x2a>
 8006530:	2d00      	cmp	r5, #0
 8006532:	da3b      	bge.n	80065ac <__ieee754_pow+0x104>
 8006534:	4b72      	ldr	r3, [pc, #456]	; (8006700 <__ieee754_pow+0x258>)
 8006536:	4598      	cmp	r8, r3
 8006538:	dc51      	bgt.n	80065de <__ieee754_pow+0x136>
 800653a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800653e:	4598      	cmp	r8, r3
 8006540:	f340 84ab 	ble.w	8006e9a <__ieee754_pow+0x9f2>
 8006544:	ea4f 5328 	mov.w	r3, r8, asr #20
 8006548:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800654c:	2b14      	cmp	r3, #20
 800654e:	dd0f      	ble.n	8006570 <__ieee754_pow+0xc8>
 8006550:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006554:	fa22 f103 	lsr.w	r1, r2, r3
 8006558:	fa01 f303 	lsl.w	r3, r1, r3
 800655c:	4293      	cmp	r3, r2
 800655e:	f040 849c 	bne.w	8006e9a <__ieee754_pow+0x9f2>
 8006562:	f001 0101 	and.w	r1, r1, #1
 8006566:	f1c1 0302 	rsb	r3, r1, #2
 800656a:	9304      	str	r3, [sp, #16]
 800656c:	b182      	cbz	r2, 8006590 <__ieee754_pow+0xe8>
 800656e:	e05f      	b.n	8006630 <__ieee754_pow+0x188>
 8006570:	2a00      	cmp	r2, #0
 8006572:	d15b      	bne.n	800662c <__ieee754_pow+0x184>
 8006574:	f1c3 0314 	rsb	r3, r3, #20
 8006578:	fa48 f103 	asr.w	r1, r8, r3
 800657c:	fa01 f303 	lsl.w	r3, r1, r3
 8006580:	4543      	cmp	r3, r8
 8006582:	f040 8487 	bne.w	8006e94 <__ieee754_pow+0x9ec>
 8006586:	f001 0101 	and.w	r1, r1, #1
 800658a:	f1c1 0302 	rsb	r3, r1, #2
 800658e:	9304      	str	r3, [sp, #16]
 8006590:	4b5c      	ldr	r3, [pc, #368]	; (8006704 <__ieee754_pow+0x25c>)
 8006592:	4598      	cmp	r8, r3
 8006594:	d132      	bne.n	80065fc <__ieee754_pow+0x154>
 8006596:	f1b9 0f00 	cmp.w	r9, #0
 800659a:	f280 8477 	bge.w	8006e8c <__ieee754_pow+0x9e4>
 800659e:	4959      	ldr	r1, [pc, #356]	; (8006704 <__ieee754_pow+0x25c>)
 80065a0:	4632      	mov	r2, r6
 80065a2:	463b      	mov	r3, r7
 80065a4:	2000      	movs	r0, #0
 80065a6:	f7fa f951 	bl	800084c <__aeabi_ddiv>
 80065aa:	e79c      	b.n	80064e6 <__ieee754_pow+0x3e>
 80065ac:	2300      	movs	r3, #0
 80065ae:	9304      	str	r3, [sp, #16]
 80065b0:	2a00      	cmp	r2, #0
 80065b2:	d13d      	bne.n	8006630 <__ieee754_pow+0x188>
 80065b4:	4b51      	ldr	r3, [pc, #324]	; (80066fc <__ieee754_pow+0x254>)
 80065b6:	4598      	cmp	r8, r3
 80065b8:	d1ea      	bne.n	8006590 <__ieee754_pow+0xe8>
 80065ba:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80065be:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80065c2:	ea53 030a 	orrs.w	r3, r3, sl
 80065c6:	f000 8459 	beq.w	8006e7c <__ieee754_pow+0x9d4>
 80065ca:	4b4f      	ldr	r3, [pc, #316]	; (8006708 <__ieee754_pow+0x260>)
 80065cc:	429c      	cmp	r4, r3
 80065ce:	dd08      	ble.n	80065e2 <__ieee754_pow+0x13a>
 80065d0:	f1b9 0f00 	cmp.w	r9, #0
 80065d4:	f2c0 8456 	blt.w	8006e84 <__ieee754_pow+0x9dc>
 80065d8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065dc:	e783      	b.n	80064e6 <__ieee754_pow+0x3e>
 80065de:	2302      	movs	r3, #2
 80065e0:	e7e5      	b.n	80065ae <__ieee754_pow+0x106>
 80065e2:	f1b9 0f00 	cmp.w	r9, #0
 80065e6:	f04f 0000 	mov.w	r0, #0
 80065ea:	f04f 0100 	mov.w	r1, #0
 80065ee:	f6bf af7a 	bge.w	80064e6 <__ieee754_pow+0x3e>
 80065f2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80065f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80065fa:	e774      	b.n	80064e6 <__ieee754_pow+0x3e>
 80065fc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8006600:	d106      	bne.n	8006610 <__ieee754_pow+0x168>
 8006602:	4632      	mov	r2, r6
 8006604:	463b      	mov	r3, r7
 8006606:	4630      	mov	r0, r6
 8006608:	4639      	mov	r1, r7
 800660a:	f7f9 fff5 	bl	80005f8 <__aeabi_dmul>
 800660e:	e76a      	b.n	80064e6 <__ieee754_pow+0x3e>
 8006610:	4b3e      	ldr	r3, [pc, #248]	; (800670c <__ieee754_pow+0x264>)
 8006612:	4599      	cmp	r9, r3
 8006614:	d10c      	bne.n	8006630 <__ieee754_pow+0x188>
 8006616:	2d00      	cmp	r5, #0
 8006618:	db0a      	blt.n	8006630 <__ieee754_pow+0x188>
 800661a:	ec47 6b10 	vmov	d0, r6, r7
 800661e:	b009      	add	sp, #36	; 0x24
 8006620:	ecbd 8b06 	vpop	{d8-d10}
 8006624:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	f000 bd20 	b.w	800706c <__ieee754_sqrt>
 800662c:	2300      	movs	r3, #0
 800662e:	9304      	str	r3, [sp, #16]
 8006630:	ec47 6b10 	vmov	d0, r6, r7
 8006634:	f000 fc62 	bl	8006efc <fabs>
 8006638:	ec51 0b10 	vmov	r0, r1, d0
 800663c:	f1ba 0f00 	cmp.w	sl, #0
 8006640:	d129      	bne.n	8006696 <__ieee754_pow+0x1ee>
 8006642:	b124      	cbz	r4, 800664e <__ieee754_pow+0x1a6>
 8006644:	4b2f      	ldr	r3, [pc, #188]	; (8006704 <__ieee754_pow+0x25c>)
 8006646:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800664a:	429a      	cmp	r2, r3
 800664c:	d123      	bne.n	8006696 <__ieee754_pow+0x1ee>
 800664e:	f1b9 0f00 	cmp.w	r9, #0
 8006652:	da05      	bge.n	8006660 <__ieee754_pow+0x1b8>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	2000      	movs	r0, #0
 800665a:	492a      	ldr	r1, [pc, #168]	; (8006704 <__ieee754_pow+0x25c>)
 800665c:	f7fa f8f6 	bl	800084c <__aeabi_ddiv>
 8006660:	2d00      	cmp	r5, #0
 8006662:	f6bf af40 	bge.w	80064e6 <__ieee754_pow+0x3e>
 8006666:	9b04      	ldr	r3, [sp, #16]
 8006668:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800666c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006670:	431c      	orrs	r4, r3
 8006672:	d108      	bne.n	8006686 <__ieee754_pow+0x1de>
 8006674:	4602      	mov	r2, r0
 8006676:	460b      	mov	r3, r1
 8006678:	4610      	mov	r0, r2
 800667a:	4619      	mov	r1, r3
 800667c:	f7f9 fe04 	bl	8000288 <__aeabi_dsub>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	e78f      	b.n	80065a6 <__ieee754_pow+0xfe>
 8006686:	9b04      	ldr	r3, [sp, #16]
 8006688:	2b01      	cmp	r3, #1
 800668a:	f47f af2c 	bne.w	80064e6 <__ieee754_pow+0x3e>
 800668e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006692:	4619      	mov	r1, r3
 8006694:	e727      	b.n	80064e6 <__ieee754_pow+0x3e>
 8006696:	0feb      	lsrs	r3, r5, #31
 8006698:	3b01      	subs	r3, #1
 800669a:	9306      	str	r3, [sp, #24]
 800669c:	9a06      	ldr	r2, [sp, #24]
 800669e:	9b04      	ldr	r3, [sp, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	d102      	bne.n	80066aa <__ieee754_pow+0x202>
 80066a4:	4632      	mov	r2, r6
 80066a6:	463b      	mov	r3, r7
 80066a8:	e7e6      	b.n	8006678 <__ieee754_pow+0x1d0>
 80066aa:	4b19      	ldr	r3, [pc, #100]	; (8006710 <__ieee754_pow+0x268>)
 80066ac:	4598      	cmp	r8, r3
 80066ae:	f340 80fb 	ble.w	80068a8 <__ieee754_pow+0x400>
 80066b2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80066b6:	4598      	cmp	r8, r3
 80066b8:	4b13      	ldr	r3, [pc, #76]	; (8006708 <__ieee754_pow+0x260>)
 80066ba:	dd0c      	ble.n	80066d6 <__ieee754_pow+0x22e>
 80066bc:	429c      	cmp	r4, r3
 80066be:	dc0f      	bgt.n	80066e0 <__ieee754_pow+0x238>
 80066c0:	f1b9 0f00 	cmp.w	r9, #0
 80066c4:	da0f      	bge.n	80066e6 <__ieee754_pow+0x23e>
 80066c6:	2000      	movs	r0, #0
 80066c8:	b009      	add	sp, #36	; 0x24
 80066ca:	ecbd 8b06 	vpop	{d8-d10}
 80066ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066d2:	f000 bcc2 	b.w	800705a <__math_oflow>
 80066d6:	429c      	cmp	r4, r3
 80066d8:	dbf2      	blt.n	80066c0 <__ieee754_pow+0x218>
 80066da:	4b0a      	ldr	r3, [pc, #40]	; (8006704 <__ieee754_pow+0x25c>)
 80066dc:	429c      	cmp	r4, r3
 80066de:	dd19      	ble.n	8006714 <__ieee754_pow+0x26c>
 80066e0:	f1b9 0f00 	cmp.w	r9, #0
 80066e4:	dcef      	bgt.n	80066c6 <__ieee754_pow+0x21e>
 80066e6:	2000      	movs	r0, #0
 80066e8:	b009      	add	sp, #36	; 0x24
 80066ea:	ecbd 8b06 	vpop	{d8-d10}
 80066ee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066f2:	f000 bca9 	b.w	8007048 <__math_uflow>
 80066f6:	bf00      	nop
 80066f8:	fff00000 	.word	0xfff00000
 80066fc:	7ff00000 	.word	0x7ff00000
 8006700:	433fffff 	.word	0x433fffff
 8006704:	3ff00000 	.word	0x3ff00000
 8006708:	3fefffff 	.word	0x3fefffff
 800670c:	3fe00000 	.word	0x3fe00000
 8006710:	41e00000 	.word	0x41e00000
 8006714:	4b60      	ldr	r3, [pc, #384]	; (8006898 <__ieee754_pow+0x3f0>)
 8006716:	2200      	movs	r2, #0
 8006718:	f7f9 fdb6 	bl	8000288 <__aeabi_dsub>
 800671c:	a354      	add	r3, pc, #336	; (adr r3, 8006870 <__ieee754_pow+0x3c8>)
 800671e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006722:	4604      	mov	r4, r0
 8006724:	460d      	mov	r5, r1
 8006726:	f7f9 ff67 	bl	80005f8 <__aeabi_dmul>
 800672a:	a353      	add	r3, pc, #332	; (adr r3, 8006878 <__ieee754_pow+0x3d0>)
 800672c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006730:	4606      	mov	r6, r0
 8006732:	460f      	mov	r7, r1
 8006734:	4620      	mov	r0, r4
 8006736:	4629      	mov	r1, r5
 8006738:	f7f9 ff5e 	bl	80005f8 <__aeabi_dmul>
 800673c:	4b57      	ldr	r3, [pc, #348]	; (800689c <__ieee754_pow+0x3f4>)
 800673e:	4682      	mov	sl, r0
 8006740:	468b      	mov	fp, r1
 8006742:	2200      	movs	r2, #0
 8006744:	4620      	mov	r0, r4
 8006746:	4629      	mov	r1, r5
 8006748:	f7f9 ff56 	bl	80005f8 <__aeabi_dmul>
 800674c:	4602      	mov	r2, r0
 800674e:	460b      	mov	r3, r1
 8006750:	a14b      	add	r1, pc, #300	; (adr r1, 8006880 <__ieee754_pow+0x3d8>)
 8006752:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006756:	f7f9 fd97 	bl	8000288 <__aeabi_dsub>
 800675a:	4622      	mov	r2, r4
 800675c:	462b      	mov	r3, r5
 800675e:	f7f9 ff4b 	bl	80005f8 <__aeabi_dmul>
 8006762:	4602      	mov	r2, r0
 8006764:	460b      	mov	r3, r1
 8006766:	2000      	movs	r0, #0
 8006768:	494d      	ldr	r1, [pc, #308]	; (80068a0 <__ieee754_pow+0x3f8>)
 800676a:	f7f9 fd8d 	bl	8000288 <__aeabi_dsub>
 800676e:	4622      	mov	r2, r4
 8006770:	4680      	mov	r8, r0
 8006772:	4689      	mov	r9, r1
 8006774:	462b      	mov	r3, r5
 8006776:	4620      	mov	r0, r4
 8006778:	4629      	mov	r1, r5
 800677a:	f7f9 ff3d 	bl	80005f8 <__aeabi_dmul>
 800677e:	4602      	mov	r2, r0
 8006780:	460b      	mov	r3, r1
 8006782:	4640      	mov	r0, r8
 8006784:	4649      	mov	r1, r9
 8006786:	f7f9 ff37 	bl	80005f8 <__aeabi_dmul>
 800678a:	a33f      	add	r3, pc, #252	; (adr r3, 8006888 <__ieee754_pow+0x3e0>)
 800678c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006790:	f7f9 ff32 	bl	80005f8 <__aeabi_dmul>
 8006794:	4602      	mov	r2, r0
 8006796:	460b      	mov	r3, r1
 8006798:	4650      	mov	r0, sl
 800679a:	4659      	mov	r1, fp
 800679c:	f7f9 fd74 	bl	8000288 <__aeabi_dsub>
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	4680      	mov	r8, r0
 80067a6:	4689      	mov	r9, r1
 80067a8:	4630      	mov	r0, r6
 80067aa:	4639      	mov	r1, r7
 80067ac:	f7f9 fd6e 	bl	800028c <__adddf3>
 80067b0:	2000      	movs	r0, #0
 80067b2:	4632      	mov	r2, r6
 80067b4:	463b      	mov	r3, r7
 80067b6:	4604      	mov	r4, r0
 80067b8:	460d      	mov	r5, r1
 80067ba:	f7f9 fd65 	bl	8000288 <__aeabi_dsub>
 80067be:	4602      	mov	r2, r0
 80067c0:	460b      	mov	r3, r1
 80067c2:	4640      	mov	r0, r8
 80067c4:	4649      	mov	r1, r9
 80067c6:	f7f9 fd5f 	bl	8000288 <__aeabi_dsub>
 80067ca:	9b04      	ldr	r3, [sp, #16]
 80067cc:	9a06      	ldr	r2, [sp, #24]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	4313      	orrs	r3, r2
 80067d2:	4682      	mov	sl, r0
 80067d4:	468b      	mov	fp, r1
 80067d6:	f040 81e7 	bne.w	8006ba8 <__ieee754_pow+0x700>
 80067da:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8006890 <__ieee754_pow+0x3e8>
 80067de:	eeb0 8a47 	vmov.f32	s16, s14
 80067e2:	eef0 8a67 	vmov.f32	s17, s15
 80067e6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80067ea:	2600      	movs	r6, #0
 80067ec:	4632      	mov	r2, r6
 80067ee:	463b      	mov	r3, r7
 80067f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80067f4:	f7f9 fd48 	bl	8000288 <__aeabi_dsub>
 80067f8:	4622      	mov	r2, r4
 80067fa:	462b      	mov	r3, r5
 80067fc:	f7f9 fefc 	bl	80005f8 <__aeabi_dmul>
 8006800:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006804:	4680      	mov	r8, r0
 8006806:	4689      	mov	r9, r1
 8006808:	4650      	mov	r0, sl
 800680a:	4659      	mov	r1, fp
 800680c:	f7f9 fef4 	bl	80005f8 <__aeabi_dmul>
 8006810:	4602      	mov	r2, r0
 8006812:	460b      	mov	r3, r1
 8006814:	4640      	mov	r0, r8
 8006816:	4649      	mov	r1, r9
 8006818:	f7f9 fd38 	bl	800028c <__adddf3>
 800681c:	4632      	mov	r2, r6
 800681e:	463b      	mov	r3, r7
 8006820:	4680      	mov	r8, r0
 8006822:	4689      	mov	r9, r1
 8006824:	4620      	mov	r0, r4
 8006826:	4629      	mov	r1, r5
 8006828:	f7f9 fee6 	bl	80005f8 <__aeabi_dmul>
 800682c:	460b      	mov	r3, r1
 800682e:	4604      	mov	r4, r0
 8006830:	460d      	mov	r5, r1
 8006832:	4602      	mov	r2, r0
 8006834:	4649      	mov	r1, r9
 8006836:	4640      	mov	r0, r8
 8006838:	f7f9 fd28 	bl	800028c <__adddf3>
 800683c:	4b19      	ldr	r3, [pc, #100]	; (80068a4 <__ieee754_pow+0x3fc>)
 800683e:	4299      	cmp	r1, r3
 8006840:	ec45 4b19 	vmov	d9, r4, r5
 8006844:	4606      	mov	r6, r0
 8006846:	460f      	mov	r7, r1
 8006848:	468b      	mov	fp, r1
 800684a:	f340 82f0 	ble.w	8006e2e <__ieee754_pow+0x986>
 800684e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006852:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006856:	4303      	orrs	r3, r0
 8006858:	f000 81e4 	beq.w	8006c24 <__ieee754_pow+0x77c>
 800685c:	ec51 0b18 	vmov	r0, r1, d8
 8006860:	2200      	movs	r2, #0
 8006862:	2300      	movs	r3, #0
 8006864:	f7fa f93a 	bl	8000adc <__aeabi_dcmplt>
 8006868:	3800      	subs	r0, #0
 800686a:	bf18      	it	ne
 800686c:	2001      	movne	r0, #1
 800686e:	e72b      	b.n	80066c8 <__ieee754_pow+0x220>
 8006870:	60000000 	.word	0x60000000
 8006874:	3ff71547 	.word	0x3ff71547
 8006878:	f85ddf44 	.word	0xf85ddf44
 800687c:	3e54ae0b 	.word	0x3e54ae0b
 8006880:	55555555 	.word	0x55555555
 8006884:	3fd55555 	.word	0x3fd55555
 8006888:	652b82fe 	.word	0x652b82fe
 800688c:	3ff71547 	.word	0x3ff71547
 8006890:	00000000 	.word	0x00000000
 8006894:	bff00000 	.word	0xbff00000
 8006898:	3ff00000 	.word	0x3ff00000
 800689c:	3fd00000 	.word	0x3fd00000
 80068a0:	3fe00000 	.word	0x3fe00000
 80068a4:	408fffff 	.word	0x408fffff
 80068a8:	4bd5      	ldr	r3, [pc, #852]	; (8006c00 <__ieee754_pow+0x758>)
 80068aa:	402b      	ands	r3, r5
 80068ac:	2200      	movs	r2, #0
 80068ae:	b92b      	cbnz	r3, 80068bc <__ieee754_pow+0x414>
 80068b0:	4bd4      	ldr	r3, [pc, #848]	; (8006c04 <__ieee754_pow+0x75c>)
 80068b2:	f7f9 fea1 	bl	80005f8 <__aeabi_dmul>
 80068b6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80068ba:	460c      	mov	r4, r1
 80068bc:	1523      	asrs	r3, r4, #20
 80068be:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80068c2:	4413      	add	r3, r2
 80068c4:	9305      	str	r3, [sp, #20]
 80068c6:	4bd0      	ldr	r3, [pc, #832]	; (8006c08 <__ieee754_pow+0x760>)
 80068c8:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80068cc:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80068d0:	429c      	cmp	r4, r3
 80068d2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80068d6:	dd08      	ble.n	80068ea <__ieee754_pow+0x442>
 80068d8:	4bcc      	ldr	r3, [pc, #816]	; (8006c0c <__ieee754_pow+0x764>)
 80068da:	429c      	cmp	r4, r3
 80068dc:	f340 8162 	ble.w	8006ba4 <__ieee754_pow+0x6fc>
 80068e0:	9b05      	ldr	r3, [sp, #20]
 80068e2:	3301      	adds	r3, #1
 80068e4:	9305      	str	r3, [sp, #20]
 80068e6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80068ea:	2400      	movs	r4, #0
 80068ec:	00e3      	lsls	r3, r4, #3
 80068ee:	9307      	str	r3, [sp, #28]
 80068f0:	4bc7      	ldr	r3, [pc, #796]	; (8006c10 <__ieee754_pow+0x768>)
 80068f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80068f6:	ed93 7b00 	vldr	d7, [r3]
 80068fa:	4629      	mov	r1, r5
 80068fc:	ec53 2b17 	vmov	r2, r3, d7
 8006900:	eeb0 9a47 	vmov.f32	s18, s14
 8006904:	eef0 9a67 	vmov.f32	s19, s15
 8006908:	4682      	mov	sl, r0
 800690a:	f7f9 fcbd 	bl	8000288 <__aeabi_dsub>
 800690e:	4652      	mov	r2, sl
 8006910:	4606      	mov	r6, r0
 8006912:	460f      	mov	r7, r1
 8006914:	462b      	mov	r3, r5
 8006916:	ec51 0b19 	vmov	r0, r1, d9
 800691a:	f7f9 fcb7 	bl	800028c <__adddf3>
 800691e:	4602      	mov	r2, r0
 8006920:	460b      	mov	r3, r1
 8006922:	2000      	movs	r0, #0
 8006924:	49bb      	ldr	r1, [pc, #748]	; (8006c14 <__ieee754_pow+0x76c>)
 8006926:	f7f9 ff91 	bl	800084c <__aeabi_ddiv>
 800692a:	ec41 0b1a 	vmov	d10, r0, r1
 800692e:	4602      	mov	r2, r0
 8006930:	460b      	mov	r3, r1
 8006932:	4630      	mov	r0, r6
 8006934:	4639      	mov	r1, r7
 8006936:	f7f9 fe5f 	bl	80005f8 <__aeabi_dmul>
 800693a:	2300      	movs	r3, #0
 800693c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006940:	9302      	str	r3, [sp, #8]
 8006942:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8006946:	46ab      	mov	fp, r5
 8006948:	106d      	asrs	r5, r5, #1
 800694a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800694e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8006952:	ec41 0b18 	vmov	d8, r0, r1
 8006956:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800695a:	2200      	movs	r2, #0
 800695c:	4640      	mov	r0, r8
 800695e:	4649      	mov	r1, r9
 8006960:	4614      	mov	r4, r2
 8006962:	461d      	mov	r5, r3
 8006964:	f7f9 fe48 	bl	80005f8 <__aeabi_dmul>
 8006968:	4602      	mov	r2, r0
 800696a:	460b      	mov	r3, r1
 800696c:	4630      	mov	r0, r6
 800696e:	4639      	mov	r1, r7
 8006970:	f7f9 fc8a 	bl	8000288 <__aeabi_dsub>
 8006974:	ec53 2b19 	vmov	r2, r3, d9
 8006978:	4606      	mov	r6, r0
 800697a:	460f      	mov	r7, r1
 800697c:	4620      	mov	r0, r4
 800697e:	4629      	mov	r1, r5
 8006980:	f7f9 fc82 	bl	8000288 <__aeabi_dsub>
 8006984:	4602      	mov	r2, r0
 8006986:	460b      	mov	r3, r1
 8006988:	4650      	mov	r0, sl
 800698a:	4659      	mov	r1, fp
 800698c:	f7f9 fc7c 	bl	8000288 <__aeabi_dsub>
 8006990:	4642      	mov	r2, r8
 8006992:	464b      	mov	r3, r9
 8006994:	f7f9 fe30 	bl	80005f8 <__aeabi_dmul>
 8006998:	4602      	mov	r2, r0
 800699a:	460b      	mov	r3, r1
 800699c:	4630      	mov	r0, r6
 800699e:	4639      	mov	r1, r7
 80069a0:	f7f9 fc72 	bl	8000288 <__aeabi_dsub>
 80069a4:	ec53 2b1a 	vmov	r2, r3, d10
 80069a8:	f7f9 fe26 	bl	80005f8 <__aeabi_dmul>
 80069ac:	ec53 2b18 	vmov	r2, r3, d8
 80069b0:	ec41 0b19 	vmov	d9, r0, r1
 80069b4:	ec51 0b18 	vmov	r0, r1, d8
 80069b8:	f7f9 fe1e 	bl	80005f8 <__aeabi_dmul>
 80069bc:	a37c      	add	r3, pc, #496	; (adr r3, 8006bb0 <__ieee754_pow+0x708>)
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	4604      	mov	r4, r0
 80069c4:	460d      	mov	r5, r1
 80069c6:	f7f9 fe17 	bl	80005f8 <__aeabi_dmul>
 80069ca:	a37b      	add	r3, pc, #492	; (adr r3, 8006bb8 <__ieee754_pow+0x710>)
 80069cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d0:	f7f9 fc5c 	bl	800028c <__adddf3>
 80069d4:	4622      	mov	r2, r4
 80069d6:	462b      	mov	r3, r5
 80069d8:	f7f9 fe0e 	bl	80005f8 <__aeabi_dmul>
 80069dc:	a378      	add	r3, pc, #480	; (adr r3, 8006bc0 <__ieee754_pow+0x718>)
 80069de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e2:	f7f9 fc53 	bl	800028c <__adddf3>
 80069e6:	4622      	mov	r2, r4
 80069e8:	462b      	mov	r3, r5
 80069ea:	f7f9 fe05 	bl	80005f8 <__aeabi_dmul>
 80069ee:	a376      	add	r3, pc, #472	; (adr r3, 8006bc8 <__ieee754_pow+0x720>)
 80069f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f4:	f7f9 fc4a 	bl	800028c <__adddf3>
 80069f8:	4622      	mov	r2, r4
 80069fa:	462b      	mov	r3, r5
 80069fc:	f7f9 fdfc 	bl	80005f8 <__aeabi_dmul>
 8006a00:	a373      	add	r3, pc, #460	; (adr r3, 8006bd0 <__ieee754_pow+0x728>)
 8006a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a06:	f7f9 fc41 	bl	800028c <__adddf3>
 8006a0a:	4622      	mov	r2, r4
 8006a0c:	462b      	mov	r3, r5
 8006a0e:	f7f9 fdf3 	bl	80005f8 <__aeabi_dmul>
 8006a12:	a371      	add	r3, pc, #452	; (adr r3, 8006bd8 <__ieee754_pow+0x730>)
 8006a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a18:	f7f9 fc38 	bl	800028c <__adddf3>
 8006a1c:	4622      	mov	r2, r4
 8006a1e:	4606      	mov	r6, r0
 8006a20:	460f      	mov	r7, r1
 8006a22:	462b      	mov	r3, r5
 8006a24:	4620      	mov	r0, r4
 8006a26:	4629      	mov	r1, r5
 8006a28:	f7f9 fde6 	bl	80005f8 <__aeabi_dmul>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	460b      	mov	r3, r1
 8006a30:	4630      	mov	r0, r6
 8006a32:	4639      	mov	r1, r7
 8006a34:	f7f9 fde0 	bl	80005f8 <__aeabi_dmul>
 8006a38:	4642      	mov	r2, r8
 8006a3a:	4604      	mov	r4, r0
 8006a3c:	460d      	mov	r5, r1
 8006a3e:	464b      	mov	r3, r9
 8006a40:	ec51 0b18 	vmov	r0, r1, d8
 8006a44:	f7f9 fc22 	bl	800028c <__adddf3>
 8006a48:	ec53 2b19 	vmov	r2, r3, d9
 8006a4c:	f7f9 fdd4 	bl	80005f8 <__aeabi_dmul>
 8006a50:	4622      	mov	r2, r4
 8006a52:	462b      	mov	r3, r5
 8006a54:	f7f9 fc1a 	bl	800028c <__adddf3>
 8006a58:	4642      	mov	r2, r8
 8006a5a:	4682      	mov	sl, r0
 8006a5c:	468b      	mov	fp, r1
 8006a5e:	464b      	mov	r3, r9
 8006a60:	4640      	mov	r0, r8
 8006a62:	4649      	mov	r1, r9
 8006a64:	f7f9 fdc8 	bl	80005f8 <__aeabi_dmul>
 8006a68:	4b6b      	ldr	r3, [pc, #428]	; (8006c18 <__ieee754_pow+0x770>)
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	460f      	mov	r7, r1
 8006a70:	f7f9 fc0c 	bl	800028c <__adddf3>
 8006a74:	4652      	mov	r2, sl
 8006a76:	465b      	mov	r3, fp
 8006a78:	f7f9 fc08 	bl	800028c <__adddf3>
 8006a7c:	2000      	movs	r0, #0
 8006a7e:	4604      	mov	r4, r0
 8006a80:	460d      	mov	r5, r1
 8006a82:	4602      	mov	r2, r0
 8006a84:	460b      	mov	r3, r1
 8006a86:	4640      	mov	r0, r8
 8006a88:	4649      	mov	r1, r9
 8006a8a:	f7f9 fdb5 	bl	80005f8 <__aeabi_dmul>
 8006a8e:	4b62      	ldr	r3, [pc, #392]	; (8006c18 <__ieee754_pow+0x770>)
 8006a90:	4680      	mov	r8, r0
 8006a92:	4689      	mov	r9, r1
 8006a94:	2200      	movs	r2, #0
 8006a96:	4620      	mov	r0, r4
 8006a98:	4629      	mov	r1, r5
 8006a9a:	f7f9 fbf5 	bl	8000288 <__aeabi_dsub>
 8006a9e:	4632      	mov	r2, r6
 8006aa0:	463b      	mov	r3, r7
 8006aa2:	f7f9 fbf1 	bl	8000288 <__aeabi_dsub>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4650      	mov	r0, sl
 8006aac:	4659      	mov	r1, fp
 8006aae:	f7f9 fbeb 	bl	8000288 <__aeabi_dsub>
 8006ab2:	ec53 2b18 	vmov	r2, r3, d8
 8006ab6:	f7f9 fd9f 	bl	80005f8 <__aeabi_dmul>
 8006aba:	4622      	mov	r2, r4
 8006abc:	4606      	mov	r6, r0
 8006abe:	460f      	mov	r7, r1
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	ec51 0b19 	vmov	r0, r1, d9
 8006ac6:	f7f9 fd97 	bl	80005f8 <__aeabi_dmul>
 8006aca:	4602      	mov	r2, r0
 8006acc:	460b      	mov	r3, r1
 8006ace:	4630      	mov	r0, r6
 8006ad0:	4639      	mov	r1, r7
 8006ad2:	f7f9 fbdb 	bl	800028c <__adddf3>
 8006ad6:	4606      	mov	r6, r0
 8006ad8:	460f      	mov	r7, r1
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	4640      	mov	r0, r8
 8006ae0:	4649      	mov	r1, r9
 8006ae2:	f7f9 fbd3 	bl	800028c <__adddf3>
 8006ae6:	a33e      	add	r3, pc, #248	; (adr r3, 8006be0 <__ieee754_pow+0x738>)
 8006ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006aec:	2000      	movs	r0, #0
 8006aee:	4604      	mov	r4, r0
 8006af0:	460d      	mov	r5, r1
 8006af2:	f7f9 fd81 	bl	80005f8 <__aeabi_dmul>
 8006af6:	4642      	mov	r2, r8
 8006af8:	ec41 0b18 	vmov	d8, r0, r1
 8006afc:	464b      	mov	r3, r9
 8006afe:	4620      	mov	r0, r4
 8006b00:	4629      	mov	r1, r5
 8006b02:	f7f9 fbc1 	bl	8000288 <__aeabi_dsub>
 8006b06:	4602      	mov	r2, r0
 8006b08:	460b      	mov	r3, r1
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	4639      	mov	r1, r7
 8006b0e:	f7f9 fbbb 	bl	8000288 <__aeabi_dsub>
 8006b12:	a335      	add	r3, pc, #212	; (adr r3, 8006be8 <__ieee754_pow+0x740>)
 8006b14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b18:	f7f9 fd6e 	bl	80005f8 <__aeabi_dmul>
 8006b1c:	a334      	add	r3, pc, #208	; (adr r3, 8006bf0 <__ieee754_pow+0x748>)
 8006b1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b22:	4606      	mov	r6, r0
 8006b24:	460f      	mov	r7, r1
 8006b26:	4620      	mov	r0, r4
 8006b28:	4629      	mov	r1, r5
 8006b2a:	f7f9 fd65 	bl	80005f8 <__aeabi_dmul>
 8006b2e:	4602      	mov	r2, r0
 8006b30:	460b      	mov	r3, r1
 8006b32:	4630      	mov	r0, r6
 8006b34:	4639      	mov	r1, r7
 8006b36:	f7f9 fba9 	bl	800028c <__adddf3>
 8006b3a:	9a07      	ldr	r2, [sp, #28]
 8006b3c:	4b37      	ldr	r3, [pc, #220]	; (8006c1c <__ieee754_pow+0x774>)
 8006b3e:	4413      	add	r3, r2
 8006b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b44:	f7f9 fba2 	bl	800028c <__adddf3>
 8006b48:	4682      	mov	sl, r0
 8006b4a:	9805      	ldr	r0, [sp, #20]
 8006b4c:	468b      	mov	fp, r1
 8006b4e:	f7f9 fce9 	bl	8000524 <__aeabi_i2d>
 8006b52:	9a07      	ldr	r2, [sp, #28]
 8006b54:	4b32      	ldr	r3, [pc, #200]	; (8006c20 <__ieee754_pow+0x778>)
 8006b56:	4413      	add	r3, r2
 8006b58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006b5c:	4606      	mov	r6, r0
 8006b5e:	460f      	mov	r7, r1
 8006b60:	4652      	mov	r2, sl
 8006b62:	465b      	mov	r3, fp
 8006b64:	ec51 0b18 	vmov	r0, r1, d8
 8006b68:	f7f9 fb90 	bl	800028c <__adddf3>
 8006b6c:	4642      	mov	r2, r8
 8006b6e:	464b      	mov	r3, r9
 8006b70:	f7f9 fb8c 	bl	800028c <__adddf3>
 8006b74:	4632      	mov	r2, r6
 8006b76:	463b      	mov	r3, r7
 8006b78:	f7f9 fb88 	bl	800028c <__adddf3>
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	4632      	mov	r2, r6
 8006b80:	463b      	mov	r3, r7
 8006b82:	4604      	mov	r4, r0
 8006b84:	460d      	mov	r5, r1
 8006b86:	f7f9 fb7f 	bl	8000288 <__aeabi_dsub>
 8006b8a:	4642      	mov	r2, r8
 8006b8c:	464b      	mov	r3, r9
 8006b8e:	f7f9 fb7b 	bl	8000288 <__aeabi_dsub>
 8006b92:	ec53 2b18 	vmov	r2, r3, d8
 8006b96:	f7f9 fb77 	bl	8000288 <__aeabi_dsub>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	460b      	mov	r3, r1
 8006b9e:	4650      	mov	r0, sl
 8006ba0:	4659      	mov	r1, fp
 8006ba2:	e610      	b.n	80067c6 <__ieee754_pow+0x31e>
 8006ba4:	2401      	movs	r4, #1
 8006ba6:	e6a1      	b.n	80068ec <__ieee754_pow+0x444>
 8006ba8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8006bf8 <__ieee754_pow+0x750>
 8006bac:	e617      	b.n	80067de <__ieee754_pow+0x336>
 8006bae:	bf00      	nop
 8006bb0:	4a454eef 	.word	0x4a454eef
 8006bb4:	3fca7e28 	.word	0x3fca7e28
 8006bb8:	93c9db65 	.word	0x93c9db65
 8006bbc:	3fcd864a 	.word	0x3fcd864a
 8006bc0:	a91d4101 	.word	0xa91d4101
 8006bc4:	3fd17460 	.word	0x3fd17460
 8006bc8:	518f264d 	.word	0x518f264d
 8006bcc:	3fd55555 	.word	0x3fd55555
 8006bd0:	db6fabff 	.word	0xdb6fabff
 8006bd4:	3fdb6db6 	.word	0x3fdb6db6
 8006bd8:	33333303 	.word	0x33333303
 8006bdc:	3fe33333 	.word	0x3fe33333
 8006be0:	e0000000 	.word	0xe0000000
 8006be4:	3feec709 	.word	0x3feec709
 8006be8:	dc3a03fd 	.word	0xdc3a03fd
 8006bec:	3feec709 	.word	0x3feec709
 8006bf0:	145b01f5 	.word	0x145b01f5
 8006bf4:	be3e2fe0 	.word	0xbe3e2fe0
 8006bf8:	00000000 	.word	0x00000000
 8006bfc:	3ff00000 	.word	0x3ff00000
 8006c00:	7ff00000 	.word	0x7ff00000
 8006c04:	43400000 	.word	0x43400000
 8006c08:	0003988e 	.word	0x0003988e
 8006c0c:	000bb679 	.word	0x000bb679
 8006c10:	080072c0 	.word	0x080072c0
 8006c14:	3ff00000 	.word	0x3ff00000
 8006c18:	40080000 	.word	0x40080000
 8006c1c:	080072e0 	.word	0x080072e0
 8006c20:	080072d0 	.word	0x080072d0
 8006c24:	a3b3      	add	r3, pc, #716	; (adr r3, 8006ef4 <__ieee754_pow+0xa4c>)
 8006c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	f7f9 fb2d 	bl	800028c <__adddf3>
 8006c32:	4622      	mov	r2, r4
 8006c34:	ec41 0b1a 	vmov	d10, r0, r1
 8006c38:	462b      	mov	r3, r5
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	4639      	mov	r1, r7
 8006c3e:	f7f9 fb23 	bl	8000288 <__aeabi_dsub>
 8006c42:	4602      	mov	r2, r0
 8006c44:	460b      	mov	r3, r1
 8006c46:	ec51 0b1a 	vmov	r0, r1, d10
 8006c4a:	f7f9 ff65 	bl	8000b18 <__aeabi_dcmpgt>
 8006c4e:	2800      	cmp	r0, #0
 8006c50:	f47f ae04 	bne.w	800685c <__ieee754_pow+0x3b4>
 8006c54:	4aa2      	ldr	r2, [pc, #648]	; (8006ee0 <__ieee754_pow+0xa38>)
 8006c56:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	f340 8107 	ble.w	8006e6e <__ieee754_pow+0x9c6>
 8006c60:	151b      	asrs	r3, r3, #20
 8006c62:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8006c66:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8006c6a:	fa4a fa03 	asr.w	sl, sl, r3
 8006c6e:	44da      	add	sl, fp
 8006c70:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8006c74:	489b      	ldr	r0, [pc, #620]	; (8006ee4 <__ieee754_pow+0xa3c>)
 8006c76:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8006c7a:	4108      	asrs	r0, r1
 8006c7c:	ea00 030a 	and.w	r3, r0, sl
 8006c80:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8006c84:	f1c1 0114 	rsb	r1, r1, #20
 8006c88:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8006c8c:	fa4a fa01 	asr.w	sl, sl, r1
 8006c90:	f1bb 0f00 	cmp.w	fp, #0
 8006c94:	f04f 0200 	mov.w	r2, #0
 8006c98:	4620      	mov	r0, r4
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	bfb8      	it	lt
 8006c9e:	f1ca 0a00 	rsblt	sl, sl, #0
 8006ca2:	f7f9 faf1 	bl	8000288 <__aeabi_dsub>
 8006ca6:	ec41 0b19 	vmov	d9, r0, r1
 8006caa:	4642      	mov	r2, r8
 8006cac:	464b      	mov	r3, r9
 8006cae:	ec51 0b19 	vmov	r0, r1, d9
 8006cb2:	f7f9 faeb 	bl	800028c <__adddf3>
 8006cb6:	a37a      	add	r3, pc, #488	; (adr r3, 8006ea0 <__ieee754_pow+0x9f8>)
 8006cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	460d      	mov	r5, r1
 8006cc2:	f7f9 fc99 	bl	80005f8 <__aeabi_dmul>
 8006cc6:	ec53 2b19 	vmov	r2, r3, d9
 8006cca:	4606      	mov	r6, r0
 8006ccc:	460f      	mov	r7, r1
 8006cce:	4620      	mov	r0, r4
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	f7f9 fad9 	bl	8000288 <__aeabi_dsub>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	460b      	mov	r3, r1
 8006cda:	4640      	mov	r0, r8
 8006cdc:	4649      	mov	r1, r9
 8006cde:	f7f9 fad3 	bl	8000288 <__aeabi_dsub>
 8006ce2:	a371      	add	r3, pc, #452	; (adr r3, 8006ea8 <__ieee754_pow+0xa00>)
 8006ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce8:	f7f9 fc86 	bl	80005f8 <__aeabi_dmul>
 8006cec:	a370      	add	r3, pc, #448	; (adr r3, 8006eb0 <__ieee754_pow+0xa08>)
 8006cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf2:	4680      	mov	r8, r0
 8006cf4:	4689      	mov	r9, r1
 8006cf6:	4620      	mov	r0, r4
 8006cf8:	4629      	mov	r1, r5
 8006cfa:	f7f9 fc7d 	bl	80005f8 <__aeabi_dmul>
 8006cfe:	4602      	mov	r2, r0
 8006d00:	460b      	mov	r3, r1
 8006d02:	4640      	mov	r0, r8
 8006d04:	4649      	mov	r1, r9
 8006d06:	f7f9 fac1 	bl	800028c <__adddf3>
 8006d0a:	4604      	mov	r4, r0
 8006d0c:	460d      	mov	r5, r1
 8006d0e:	4602      	mov	r2, r0
 8006d10:	460b      	mov	r3, r1
 8006d12:	4630      	mov	r0, r6
 8006d14:	4639      	mov	r1, r7
 8006d16:	f7f9 fab9 	bl	800028c <__adddf3>
 8006d1a:	4632      	mov	r2, r6
 8006d1c:	463b      	mov	r3, r7
 8006d1e:	4680      	mov	r8, r0
 8006d20:	4689      	mov	r9, r1
 8006d22:	f7f9 fab1 	bl	8000288 <__aeabi_dsub>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4620      	mov	r0, r4
 8006d2c:	4629      	mov	r1, r5
 8006d2e:	f7f9 faab 	bl	8000288 <__aeabi_dsub>
 8006d32:	4642      	mov	r2, r8
 8006d34:	4606      	mov	r6, r0
 8006d36:	460f      	mov	r7, r1
 8006d38:	464b      	mov	r3, r9
 8006d3a:	4640      	mov	r0, r8
 8006d3c:	4649      	mov	r1, r9
 8006d3e:	f7f9 fc5b 	bl	80005f8 <__aeabi_dmul>
 8006d42:	a35d      	add	r3, pc, #372	; (adr r3, 8006eb8 <__ieee754_pow+0xa10>)
 8006d44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d48:	4604      	mov	r4, r0
 8006d4a:	460d      	mov	r5, r1
 8006d4c:	f7f9 fc54 	bl	80005f8 <__aeabi_dmul>
 8006d50:	a35b      	add	r3, pc, #364	; (adr r3, 8006ec0 <__ieee754_pow+0xa18>)
 8006d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d56:	f7f9 fa97 	bl	8000288 <__aeabi_dsub>
 8006d5a:	4622      	mov	r2, r4
 8006d5c:	462b      	mov	r3, r5
 8006d5e:	f7f9 fc4b 	bl	80005f8 <__aeabi_dmul>
 8006d62:	a359      	add	r3, pc, #356	; (adr r3, 8006ec8 <__ieee754_pow+0xa20>)
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f7f9 fa90 	bl	800028c <__adddf3>
 8006d6c:	4622      	mov	r2, r4
 8006d6e:	462b      	mov	r3, r5
 8006d70:	f7f9 fc42 	bl	80005f8 <__aeabi_dmul>
 8006d74:	a356      	add	r3, pc, #344	; (adr r3, 8006ed0 <__ieee754_pow+0xa28>)
 8006d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d7a:	f7f9 fa85 	bl	8000288 <__aeabi_dsub>
 8006d7e:	4622      	mov	r2, r4
 8006d80:	462b      	mov	r3, r5
 8006d82:	f7f9 fc39 	bl	80005f8 <__aeabi_dmul>
 8006d86:	a354      	add	r3, pc, #336	; (adr r3, 8006ed8 <__ieee754_pow+0xa30>)
 8006d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d8c:	f7f9 fa7e 	bl	800028c <__adddf3>
 8006d90:	4622      	mov	r2, r4
 8006d92:	462b      	mov	r3, r5
 8006d94:	f7f9 fc30 	bl	80005f8 <__aeabi_dmul>
 8006d98:	4602      	mov	r2, r0
 8006d9a:	460b      	mov	r3, r1
 8006d9c:	4640      	mov	r0, r8
 8006d9e:	4649      	mov	r1, r9
 8006da0:	f7f9 fa72 	bl	8000288 <__aeabi_dsub>
 8006da4:	4604      	mov	r4, r0
 8006da6:	460d      	mov	r5, r1
 8006da8:	4602      	mov	r2, r0
 8006daa:	460b      	mov	r3, r1
 8006dac:	4640      	mov	r0, r8
 8006dae:	4649      	mov	r1, r9
 8006db0:	f7f9 fc22 	bl	80005f8 <__aeabi_dmul>
 8006db4:	2200      	movs	r2, #0
 8006db6:	ec41 0b19 	vmov	d9, r0, r1
 8006dba:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	f7f9 fa61 	bl	8000288 <__aeabi_dsub>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	ec51 0b19 	vmov	r0, r1, d9
 8006dce:	f7f9 fd3d 	bl	800084c <__aeabi_ddiv>
 8006dd2:	4632      	mov	r2, r6
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	460d      	mov	r5, r1
 8006dd8:	463b      	mov	r3, r7
 8006dda:	4640      	mov	r0, r8
 8006ddc:	4649      	mov	r1, r9
 8006dde:	f7f9 fc0b 	bl	80005f8 <__aeabi_dmul>
 8006de2:	4632      	mov	r2, r6
 8006de4:	463b      	mov	r3, r7
 8006de6:	f7f9 fa51 	bl	800028c <__adddf3>
 8006dea:	4602      	mov	r2, r0
 8006dec:	460b      	mov	r3, r1
 8006dee:	4620      	mov	r0, r4
 8006df0:	4629      	mov	r1, r5
 8006df2:	f7f9 fa49 	bl	8000288 <__aeabi_dsub>
 8006df6:	4642      	mov	r2, r8
 8006df8:	464b      	mov	r3, r9
 8006dfa:	f7f9 fa45 	bl	8000288 <__aeabi_dsub>
 8006dfe:	460b      	mov	r3, r1
 8006e00:	4602      	mov	r2, r0
 8006e02:	4939      	ldr	r1, [pc, #228]	; (8006ee8 <__ieee754_pow+0xa40>)
 8006e04:	2000      	movs	r0, #0
 8006e06:	f7f9 fa3f 	bl	8000288 <__aeabi_dsub>
 8006e0a:	ec41 0b10 	vmov	d0, r0, r1
 8006e0e:	ee10 3a90 	vmov	r3, s1
 8006e12:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8006e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e1a:	da2b      	bge.n	8006e74 <__ieee754_pow+0x9cc>
 8006e1c:	4650      	mov	r0, sl
 8006e1e:	f000 f877 	bl	8006f10 <scalbn>
 8006e22:	ec51 0b10 	vmov	r0, r1, d0
 8006e26:	ec53 2b18 	vmov	r2, r3, d8
 8006e2a:	f7ff bbee 	b.w	800660a <__ieee754_pow+0x162>
 8006e2e:	4b2f      	ldr	r3, [pc, #188]	; (8006eec <__ieee754_pow+0xa44>)
 8006e30:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006e34:	429e      	cmp	r6, r3
 8006e36:	f77f af0d 	ble.w	8006c54 <__ieee754_pow+0x7ac>
 8006e3a:	4b2d      	ldr	r3, [pc, #180]	; (8006ef0 <__ieee754_pow+0xa48>)
 8006e3c:	440b      	add	r3, r1
 8006e3e:	4303      	orrs	r3, r0
 8006e40:	d009      	beq.n	8006e56 <__ieee754_pow+0x9ae>
 8006e42:	ec51 0b18 	vmov	r0, r1, d8
 8006e46:	2200      	movs	r2, #0
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f7f9 fe47 	bl	8000adc <__aeabi_dcmplt>
 8006e4e:	3800      	subs	r0, #0
 8006e50:	bf18      	it	ne
 8006e52:	2001      	movne	r0, #1
 8006e54:	e448      	b.n	80066e8 <__ieee754_pow+0x240>
 8006e56:	4622      	mov	r2, r4
 8006e58:	462b      	mov	r3, r5
 8006e5a:	f7f9 fa15 	bl	8000288 <__aeabi_dsub>
 8006e5e:	4642      	mov	r2, r8
 8006e60:	464b      	mov	r3, r9
 8006e62:	f7f9 fe4f 	bl	8000b04 <__aeabi_dcmpge>
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f43f aef4 	beq.w	8006c54 <__ieee754_pow+0x7ac>
 8006e6c:	e7e9      	b.n	8006e42 <__ieee754_pow+0x99a>
 8006e6e:	f04f 0a00 	mov.w	sl, #0
 8006e72:	e71a      	b.n	8006caa <__ieee754_pow+0x802>
 8006e74:	ec51 0b10 	vmov	r0, r1, d0
 8006e78:	4619      	mov	r1, r3
 8006e7a:	e7d4      	b.n	8006e26 <__ieee754_pow+0x97e>
 8006e7c:	491a      	ldr	r1, [pc, #104]	; (8006ee8 <__ieee754_pow+0xa40>)
 8006e7e:	2000      	movs	r0, #0
 8006e80:	f7ff bb31 	b.w	80064e6 <__ieee754_pow+0x3e>
 8006e84:	2000      	movs	r0, #0
 8006e86:	2100      	movs	r1, #0
 8006e88:	f7ff bb2d 	b.w	80064e6 <__ieee754_pow+0x3e>
 8006e8c:	4630      	mov	r0, r6
 8006e8e:	4639      	mov	r1, r7
 8006e90:	f7ff bb29 	b.w	80064e6 <__ieee754_pow+0x3e>
 8006e94:	9204      	str	r2, [sp, #16]
 8006e96:	f7ff bb7b 	b.w	8006590 <__ieee754_pow+0xe8>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f7ff bb65 	b.w	800656a <__ieee754_pow+0xc2>
 8006ea0:	00000000 	.word	0x00000000
 8006ea4:	3fe62e43 	.word	0x3fe62e43
 8006ea8:	fefa39ef 	.word	0xfefa39ef
 8006eac:	3fe62e42 	.word	0x3fe62e42
 8006eb0:	0ca86c39 	.word	0x0ca86c39
 8006eb4:	be205c61 	.word	0xbe205c61
 8006eb8:	72bea4d0 	.word	0x72bea4d0
 8006ebc:	3e663769 	.word	0x3e663769
 8006ec0:	c5d26bf1 	.word	0xc5d26bf1
 8006ec4:	3ebbbd41 	.word	0x3ebbbd41
 8006ec8:	af25de2c 	.word	0xaf25de2c
 8006ecc:	3f11566a 	.word	0x3f11566a
 8006ed0:	16bebd93 	.word	0x16bebd93
 8006ed4:	3f66c16c 	.word	0x3f66c16c
 8006ed8:	5555553e 	.word	0x5555553e
 8006edc:	3fc55555 	.word	0x3fc55555
 8006ee0:	3fe00000 	.word	0x3fe00000
 8006ee4:	fff00000 	.word	0xfff00000
 8006ee8:	3ff00000 	.word	0x3ff00000
 8006eec:	4090cbff 	.word	0x4090cbff
 8006ef0:	3f6f3400 	.word	0x3f6f3400
 8006ef4:	652b82fe 	.word	0x652b82fe
 8006ef8:	3c971547 	.word	0x3c971547

08006efc <fabs>:
 8006efc:	ec51 0b10 	vmov	r0, r1, d0
 8006f00:	ee10 2a10 	vmov	r2, s0
 8006f04:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006f08:	ec43 2b10 	vmov	d0, r2, r3
 8006f0c:	4770      	bx	lr
	...

08006f10 <scalbn>:
 8006f10:	b570      	push	{r4, r5, r6, lr}
 8006f12:	ec55 4b10 	vmov	r4, r5, d0
 8006f16:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	462b      	mov	r3, r5
 8006f1e:	b999      	cbnz	r1, 8006f48 <scalbn+0x38>
 8006f20:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006f24:	4323      	orrs	r3, r4
 8006f26:	d03f      	beq.n	8006fa8 <scalbn+0x98>
 8006f28:	4b35      	ldr	r3, [pc, #212]	; (8007000 <scalbn+0xf0>)
 8006f2a:	4629      	mov	r1, r5
 8006f2c:	ee10 0a10 	vmov	r0, s0
 8006f30:	2200      	movs	r2, #0
 8006f32:	f7f9 fb61 	bl	80005f8 <__aeabi_dmul>
 8006f36:	4b33      	ldr	r3, [pc, #204]	; (8007004 <scalbn+0xf4>)
 8006f38:	429e      	cmp	r6, r3
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	460d      	mov	r5, r1
 8006f3e:	da10      	bge.n	8006f62 <scalbn+0x52>
 8006f40:	a327      	add	r3, pc, #156	; (adr r3, 8006fe0 <scalbn+0xd0>)
 8006f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f46:	e01f      	b.n	8006f88 <scalbn+0x78>
 8006f48:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006f4c:	4291      	cmp	r1, r2
 8006f4e:	d10c      	bne.n	8006f6a <scalbn+0x5a>
 8006f50:	ee10 2a10 	vmov	r2, s0
 8006f54:	4620      	mov	r0, r4
 8006f56:	4629      	mov	r1, r5
 8006f58:	f7f9 f998 	bl	800028c <__adddf3>
 8006f5c:	4604      	mov	r4, r0
 8006f5e:	460d      	mov	r5, r1
 8006f60:	e022      	b.n	8006fa8 <scalbn+0x98>
 8006f62:	460b      	mov	r3, r1
 8006f64:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006f68:	3936      	subs	r1, #54	; 0x36
 8006f6a:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006f6e:	4296      	cmp	r6, r2
 8006f70:	dd0d      	ble.n	8006f8e <scalbn+0x7e>
 8006f72:	2d00      	cmp	r5, #0
 8006f74:	a11c      	add	r1, pc, #112	; (adr r1, 8006fe8 <scalbn+0xd8>)
 8006f76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f7a:	da02      	bge.n	8006f82 <scalbn+0x72>
 8006f7c:	a11c      	add	r1, pc, #112	; (adr r1, 8006ff0 <scalbn+0xe0>)
 8006f7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f82:	a319      	add	r3, pc, #100	; (adr r3, 8006fe8 <scalbn+0xd8>)
 8006f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f88:	f7f9 fb36 	bl	80005f8 <__aeabi_dmul>
 8006f8c:	e7e6      	b.n	8006f5c <scalbn+0x4c>
 8006f8e:	1872      	adds	r2, r6, r1
 8006f90:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8006f94:	428a      	cmp	r2, r1
 8006f96:	dcec      	bgt.n	8006f72 <scalbn+0x62>
 8006f98:	2a00      	cmp	r2, #0
 8006f9a:	dd08      	ble.n	8006fae <scalbn+0x9e>
 8006f9c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006fa0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006fa4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006fa8:	ec45 4b10 	vmov	d0, r4, r5
 8006fac:	bd70      	pop	{r4, r5, r6, pc}
 8006fae:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006fb2:	da08      	bge.n	8006fc6 <scalbn+0xb6>
 8006fb4:	2d00      	cmp	r5, #0
 8006fb6:	a10a      	add	r1, pc, #40	; (adr r1, 8006fe0 <scalbn+0xd0>)
 8006fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fbc:	dac0      	bge.n	8006f40 <scalbn+0x30>
 8006fbe:	a10e      	add	r1, pc, #56	; (adr r1, 8006ff8 <scalbn+0xe8>)
 8006fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006fc4:	e7bc      	b.n	8006f40 <scalbn+0x30>
 8006fc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006fca:	3236      	adds	r2, #54	; 0x36
 8006fcc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006fd0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	4b0c      	ldr	r3, [pc, #48]	; (8007008 <scalbn+0xf8>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	e7d5      	b.n	8006f88 <scalbn+0x78>
 8006fdc:	f3af 8000 	nop.w
 8006fe0:	c2f8f359 	.word	0xc2f8f359
 8006fe4:	01a56e1f 	.word	0x01a56e1f
 8006fe8:	8800759c 	.word	0x8800759c
 8006fec:	7e37e43c 	.word	0x7e37e43c
 8006ff0:	8800759c 	.word	0x8800759c
 8006ff4:	fe37e43c 	.word	0xfe37e43c
 8006ff8:	c2f8f359 	.word	0xc2f8f359
 8006ffc:	81a56e1f 	.word	0x81a56e1f
 8007000:	43500000 	.word	0x43500000
 8007004:	ffff3cb0 	.word	0xffff3cb0
 8007008:	3c900000 	.word	0x3c900000

0800700c <with_errno>:
 800700c:	b570      	push	{r4, r5, r6, lr}
 800700e:	4604      	mov	r4, r0
 8007010:	460d      	mov	r5, r1
 8007012:	4616      	mov	r6, r2
 8007014:	f7fe fd50 	bl	8005ab8 <__errno>
 8007018:	4629      	mov	r1, r5
 800701a:	6006      	str	r6, [r0, #0]
 800701c:	4620      	mov	r0, r4
 800701e:	bd70      	pop	{r4, r5, r6, pc}

08007020 <xflow>:
 8007020:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007022:	4614      	mov	r4, r2
 8007024:	461d      	mov	r5, r3
 8007026:	b108      	cbz	r0, 800702c <xflow+0xc>
 8007028:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800702c:	e9cd 2300 	strd	r2, r3, [sp]
 8007030:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007034:	4620      	mov	r0, r4
 8007036:	4629      	mov	r1, r5
 8007038:	f7f9 fade 	bl	80005f8 <__aeabi_dmul>
 800703c:	2222      	movs	r2, #34	; 0x22
 800703e:	b003      	add	sp, #12
 8007040:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007044:	f7ff bfe2 	b.w	800700c <with_errno>

08007048 <__math_uflow>:
 8007048:	b508      	push	{r3, lr}
 800704a:	2200      	movs	r2, #0
 800704c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007050:	f7ff ffe6 	bl	8007020 <xflow>
 8007054:	ec41 0b10 	vmov	d0, r0, r1
 8007058:	bd08      	pop	{r3, pc}

0800705a <__math_oflow>:
 800705a:	b508      	push	{r3, lr}
 800705c:	2200      	movs	r2, #0
 800705e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007062:	f7ff ffdd 	bl	8007020 <xflow>
 8007066:	ec41 0b10 	vmov	d0, r0, r1
 800706a:	bd08      	pop	{r3, pc}

0800706c <__ieee754_sqrt>:
 800706c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007070:	ec55 4b10 	vmov	r4, r5, d0
 8007074:	4e67      	ldr	r6, [pc, #412]	; (8007214 <__ieee754_sqrt+0x1a8>)
 8007076:	43ae      	bics	r6, r5
 8007078:	ee10 0a10 	vmov	r0, s0
 800707c:	ee10 2a10 	vmov	r2, s0
 8007080:	4629      	mov	r1, r5
 8007082:	462b      	mov	r3, r5
 8007084:	d10d      	bne.n	80070a2 <__ieee754_sqrt+0x36>
 8007086:	f7f9 fab7 	bl	80005f8 <__aeabi_dmul>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	4620      	mov	r0, r4
 8007090:	4629      	mov	r1, r5
 8007092:	f7f9 f8fb 	bl	800028c <__adddf3>
 8007096:	4604      	mov	r4, r0
 8007098:	460d      	mov	r5, r1
 800709a:	ec45 4b10 	vmov	d0, r4, r5
 800709e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a2:	2d00      	cmp	r5, #0
 80070a4:	dc0b      	bgt.n	80070be <__ieee754_sqrt+0x52>
 80070a6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80070aa:	4326      	orrs	r6, r4
 80070ac:	d0f5      	beq.n	800709a <__ieee754_sqrt+0x2e>
 80070ae:	b135      	cbz	r5, 80070be <__ieee754_sqrt+0x52>
 80070b0:	f7f9 f8ea 	bl	8000288 <__aeabi_dsub>
 80070b4:	4602      	mov	r2, r0
 80070b6:	460b      	mov	r3, r1
 80070b8:	f7f9 fbc8 	bl	800084c <__aeabi_ddiv>
 80070bc:	e7eb      	b.n	8007096 <__ieee754_sqrt+0x2a>
 80070be:	1509      	asrs	r1, r1, #20
 80070c0:	f000 808d 	beq.w	80071de <__ieee754_sqrt+0x172>
 80070c4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80070c8:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 80070cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80070d0:	07c9      	lsls	r1, r1, #31
 80070d2:	bf5c      	itt	pl
 80070d4:	005b      	lslpl	r3, r3, #1
 80070d6:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80070da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80070de:	bf58      	it	pl
 80070e0:	0052      	lslpl	r2, r2, #1
 80070e2:	2500      	movs	r5, #0
 80070e4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80070e8:	1076      	asrs	r6, r6, #1
 80070ea:	0052      	lsls	r2, r2, #1
 80070ec:	f04f 0e16 	mov.w	lr, #22
 80070f0:	46ac      	mov	ip, r5
 80070f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80070f6:	eb0c 0001 	add.w	r0, ip, r1
 80070fa:	4298      	cmp	r0, r3
 80070fc:	bfde      	ittt	le
 80070fe:	1a1b      	suble	r3, r3, r0
 8007100:	eb00 0c01 	addle.w	ip, r0, r1
 8007104:	186d      	addle	r5, r5, r1
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	f1be 0e01 	subs.w	lr, lr, #1
 800710c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007110:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007114:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007118:	d1ed      	bne.n	80070f6 <__ieee754_sqrt+0x8a>
 800711a:	4674      	mov	r4, lr
 800711c:	2720      	movs	r7, #32
 800711e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8007122:	4563      	cmp	r3, ip
 8007124:	eb01 000e 	add.w	r0, r1, lr
 8007128:	dc02      	bgt.n	8007130 <__ieee754_sqrt+0xc4>
 800712a:	d113      	bne.n	8007154 <__ieee754_sqrt+0xe8>
 800712c:	4290      	cmp	r0, r2
 800712e:	d811      	bhi.n	8007154 <__ieee754_sqrt+0xe8>
 8007130:	2800      	cmp	r0, #0
 8007132:	eb00 0e01 	add.w	lr, r0, r1
 8007136:	da57      	bge.n	80071e8 <__ieee754_sqrt+0x17c>
 8007138:	f1be 0f00 	cmp.w	lr, #0
 800713c:	db54      	blt.n	80071e8 <__ieee754_sqrt+0x17c>
 800713e:	f10c 0801 	add.w	r8, ip, #1
 8007142:	eba3 030c 	sub.w	r3, r3, ip
 8007146:	4290      	cmp	r0, r2
 8007148:	bf88      	it	hi
 800714a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800714e:	1a12      	subs	r2, r2, r0
 8007150:	440c      	add	r4, r1
 8007152:	46c4      	mov	ip, r8
 8007154:	005b      	lsls	r3, r3, #1
 8007156:	3f01      	subs	r7, #1
 8007158:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800715c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007160:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007164:	d1dd      	bne.n	8007122 <__ieee754_sqrt+0xb6>
 8007166:	4313      	orrs	r3, r2
 8007168:	d01b      	beq.n	80071a2 <__ieee754_sqrt+0x136>
 800716a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8007218 <__ieee754_sqrt+0x1ac>
 800716e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800721c <__ieee754_sqrt+0x1b0>
 8007172:	e9da 0100 	ldrd	r0, r1, [sl]
 8007176:	e9db 2300 	ldrd	r2, r3, [fp]
 800717a:	f7f9 f885 	bl	8000288 <__aeabi_dsub>
 800717e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007182:	4602      	mov	r2, r0
 8007184:	460b      	mov	r3, r1
 8007186:	4640      	mov	r0, r8
 8007188:	4649      	mov	r1, r9
 800718a:	f7f9 fcb1 	bl	8000af0 <__aeabi_dcmple>
 800718e:	b140      	cbz	r0, 80071a2 <__ieee754_sqrt+0x136>
 8007190:	f1b4 3fff 	cmp.w	r4, #4294967295
 8007194:	e9da 0100 	ldrd	r0, r1, [sl]
 8007198:	e9db 2300 	ldrd	r2, r3, [fp]
 800719c:	d126      	bne.n	80071ec <__ieee754_sqrt+0x180>
 800719e:	3501      	adds	r5, #1
 80071a0:	463c      	mov	r4, r7
 80071a2:	106a      	asrs	r2, r5, #1
 80071a4:	0863      	lsrs	r3, r4, #1
 80071a6:	07e9      	lsls	r1, r5, #31
 80071a8:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80071ac:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80071b0:	bf48      	it	mi
 80071b2:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80071b6:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80071ba:	461c      	mov	r4, r3
 80071bc:	e76d      	b.n	800709a <__ieee754_sqrt+0x2e>
 80071be:	0ad3      	lsrs	r3, r2, #11
 80071c0:	3815      	subs	r0, #21
 80071c2:	0552      	lsls	r2, r2, #21
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0fa      	beq.n	80071be <__ieee754_sqrt+0x152>
 80071c8:	02dc      	lsls	r4, r3, #11
 80071ca:	d50a      	bpl.n	80071e2 <__ieee754_sqrt+0x176>
 80071cc:	f1c1 0420 	rsb	r4, r1, #32
 80071d0:	fa22 f404 	lsr.w	r4, r2, r4
 80071d4:	1e4d      	subs	r5, r1, #1
 80071d6:	408a      	lsls	r2, r1
 80071d8:	4323      	orrs	r3, r4
 80071da:	1b41      	subs	r1, r0, r5
 80071dc:	e772      	b.n	80070c4 <__ieee754_sqrt+0x58>
 80071de:	4608      	mov	r0, r1
 80071e0:	e7f0      	b.n	80071c4 <__ieee754_sqrt+0x158>
 80071e2:	005b      	lsls	r3, r3, #1
 80071e4:	3101      	adds	r1, #1
 80071e6:	e7ef      	b.n	80071c8 <__ieee754_sqrt+0x15c>
 80071e8:	46e0      	mov	r8, ip
 80071ea:	e7aa      	b.n	8007142 <__ieee754_sqrt+0xd6>
 80071ec:	f7f9 f84e 	bl	800028c <__adddf3>
 80071f0:	e9da 8900 	ldrd	r8, r9, [sl]
 80071f4:	4602      	mov	r2, r0
 80071f6:	460b      	mov	r3, r1
 80071f8:	4640      	mov	r0, r8
 80071fa:	4649      	mov	r1, r9
 80071fc:	f7f9 fc6e 	bl	8000adc <__aeabi_dcmplt>
 8007200:	b120      	cbz	r0, 800720c <__ieee754_sqrt+0x1a0>
 8007202:	1ca0      	adds	r0, r4, #2
 8007204:	bf08      	it	eq
 8007206:	3501      	addeq	r5, #1
 8007208:	3402      	adds	r4, #2
 800720a:	e7ca      	b.n	80071a2 <__ieee754_sqrt+0x136>
 800720c:	3401      	adds	r4, #1
 800720e:	f024 0401 	bic.w	r4, r4, #1
 8007212:	e7c6      	b.n	80071a2 <__ieee754_sqrt+0x136>
 8007214:	7ff00000 	.word	0x7ff00000
 8007218:	20000060 	.word	0x20000060
 800721c:	20000068 	.word	0x20000068

08007220 <_init>:
 8007220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007222:	bf00      	nop
 8007224:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007226:	bc08      	pop	{r3}
 8007228:	469e      	mov	lr, r3
 800722a:	4770      	bx	lr

0800722c <_fini>:
 800722c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800722e:	bf00      	nop
 8007230:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007232:	bc08      	pop	{r3}
 8007234:	469e      	mov	lr, r3
 8007236:	4770      	bx	lr
